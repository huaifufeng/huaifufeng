<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Git on 怀府小阁</title>
    <link>http://blog.huaifufeng.com/tags/git/</link>
    <description>Recent content in Git on 怀府小阁</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sun, 17 Feb 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="http://blog.huaifufeng.com/tags/git/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Git专业笔记（二十六）</title>
      <link>http://blog.huaifufeng.com/2019/02/post/git-section-26.html</link>
      <pubDate>Sun, 17 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>http://blog.huaifufeng.com/2019/02/post/git-section-26.html</guid>
      <description>暂存    参数 详情     show 线上暂存区中处于暂存状态的文件和原始父文件的不同，当没有时，显示最新的一个。   list 列出当前拥有的暂存内容。每一个列出的暂存有名称（stash@{0}是最新的，stash@{1}是上一个），暂存创建是处于的分支名称，暂存基于的提交的简单描述   pop 从暂存列表中删除一个暂存，并把修改应用到当前工作树状态内   apply 和pop类似，但是不会删除暂存列表中的新   clear 删除所有的暂存信息。注意这些状态都会被删除，并且无法修复   drop 从暂存列表删除一个暂存状态。当没有给出时，会删除最新的一个stash@{0}。否则是stash列表中指向stash@{}中的有效信息   create 创建一个stash（它是一个常规提交对象）并返回其对象名，而不将其存储在ref命名空间的任何位置。这对脚本很有用。它可能不是您想要使用的命令；请参见上面的“save”。   store 将通过git stash create创建的给定存储（这是一个悬空合并提交）存储在stash ref中，更新stash reflog。这对脚本很有用。它可能不是您想要使用的命令；请参见上面的“save”。    什么是暂存 当在一个项目上面做开发，你目前在一个特性分支上做修改做了一半，但是现在master分支出现了一个bug。你还没有准备好提交你的信息，但是你也不想丢掉你的修改。这个就到git stash出马的时候了。
运行git status查看你当前分支没有提交的修改：
(master) $ git status On branch master Your branch is up-to-date with &#39;origin/master&#39;. Changes not staged for commit: (use &amp;quot;git add &amp;lt;file&amp;gt;.</description>
    </item>
    
    <item>
      <title>Git专业笔记（二十五）</title>
      <link>http://blog.huaifufeng.com/2019/02/post/git-section-25.html</link>
      <pubDate>Sat, 16 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>http://blog.huaifufeng.com/2019/02/post/git-section-25.html</guid>
      <description>clone 浅克隆 克隆一个大项目（像已经有多年历史的项目）可能会花费很长的时间，或者因为需要传输太多的数据而出现问题。因此你不需要获取所有有效的历史，你可以使用一个浅克隆：
git clone [repo_url] --depth 1  上面的命令只会获取远端仓库的最新提交。
注意你可能无法在浅克隆仓库中解析merge提交。获取足够解析merge提交的提交数是个好的主意。例如，获取至少50个提交：
git clone [rrepo_url] --depth 50  之后如果需要的话，你可以fetch仓库其他的提交：
Version &amp;gt;= 1.8.3
git fetch --unshallow # equivalent of git fetch -–depth=2147483647 # fetches the rest of the repository  Version &amp;lt; 1.8.3
git fetch --depth=1000 # fetch the last 1000 commits  普通克隆 下载整个仓库包括所有的历史和所有的分支，输入：
git clone &amp;lt;url&amp;gt;  上面的例子将会把仓库的信息放到一个和仓库名称一致的目录内。
下载一个仓库，并且把仓库的信息放到指定的目录内：
git clone &amp;lt;url&amp;gt; [directory]  克隆指定分支 克隆一个仓库指定的分支，可以在仓库地址前面加上--branch选项：
git clone --branch &amp;lt;branch_name&amp;gt; &amp;lt;url&amp;gt; [directory]  也可以使用—branch选项的简写格式-b。这个命令会下载整个仓库，并且切换到&amp;lt;branch_name&amp;gt;分支。</description>
    </item>
    
    <item>
      <title>Git专业笔记（二十四）</title>
      <link>http://blog.huaifufeng.com/2019/02/post/git-section-24.html</link>
      <pubDate>Fri, 15 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>http://blog.huaifufeng.com/2019/02/post/git-section-24.html</guid>
      <description>钩子 pre-push 在Git1.8.2及以上是有效的。
Version&amp;gt;=1.8
Pre-push钩子可以用来避免过度推送。这很有用，这是其中的一些原因：阻止意外的手动推送到指定分支，或者当遇到错误时阻止推送（单元检测，语法等）。
创建一个Pre-push钩子是很贱的，只需要在.git/hooks/目录下面创建一个名为pre-push的文件，（警戒），并且确保这个文件有执行的权限：chmod +x ./git/hooks/pre-push。
下面是Hannah Wolfe提供的一个阻止推送到master分支的钩子：
#!/bin/bash protected_branch=&#39;master&#39; current_branch=$(git symbolic -ref HEAD | sed -e &#39;s,.*/\(.*\),\1,&#39;) if [$protected_branch = $current_branch] then read -p &amp;quot;You&#39;re about to push master, is that what you intended? [y|n] &amp;quot; -n 1 -r &amp;lt; /dev/tty echo if echo $REPLY | grep -E &#39;^[Yy]$&#39; &amp;gt; /dev/null then exit 0 #push 将会执行 fi exit 1 #push 将不会执行 else exit 0 #push 执行 fi  下面是Volkan Unsal提供的要求在push之前需要确保通过了RSpec的测试的例子：</description>
    </item>
    
    <item>
      <title>Git专业笔记（二十三）</title>
      <link>http://blog.huaifufeng.com/2019/02/post/git-section-23.html</link>
      <pubDate>Thu, 14 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>http://blog.huaifufeng.com/2019/02/post/git-section-23.html</guid>
      <description>Pull    Parameter Details     &amp;ndash;quiet 没有文本输出   -q —-quiet的短格式   &amp;ndash;verbose 详细文本输出。可以分别传给merge/rebase命令   -v —verbos的短格式   &amp;ndash;[no-]recurse-submodules[=yes|on-demand|no] 获取子模块的新提交？（注意这个不是pull/checkout）    不像push是把你本地的修改推到集中版本关联服务器，而是从代码仓库服务器获取服务器上当前的代码，并且把代码从远端服务器拉取到本地机器。本主题说明了使用Git从代码库中提取代码的过程，以及将不同代码提取到本地副本时可能遇到的情况。
获取修改到本地代码库 简单pull 当你和其他人在一个远端仓库（例如Github）协同工作时，某些时候你想和其他人分享你的修改。当他们已经把自己的修改推送到这个仓库时，你可以使用pull命令从这个仓库获取这些修改。
git pull  在大多数的情况下，这都会正常工作的。
从不同的远端或分支获取 你可以通过指定远端或分支的名字来从远端仓库获取这些修改：
git pull origin feature-A  将会从origin拉取分支feature-A的修改到本地分支。注意你可以直接使用远端url来代替远端名称，使用提交的SHA来代替分支名称。
手动pull 你可以使用git fetch和git merge模拟pull命令的行为：
git fetch origin # retrieve objects and update refs from origin git merge origin/feature-A # actually perform the merge  这给与你更多的控制器，允许你在合并分支之前检查分支的内容。实际上，在fetch代码之后，你可以使用git branch -a命令来查看远端的分支，然后切换到这个分支：</description>
    </item>
    
    <item>
      <title>访问本地服务</title>
      <link>http://blog.huaifufeng.com/2019/02/post/localhost.html</link>
      <pubDate>Thu, 14 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>http://blog.huaifufeng.com/2019/02/post/localhost.html</guid>
      <description>本地访问 我们在访问本地服务的时候，有的时候使用的是localhost，有的时候用的是127.0.0.1。这在大多数的情况下都是可以互换的，可以使用一种方法换另一种方法。但是在某些情况下localhost可以访问，但是127.0.0.1不可以访问。这说明两者还是有不同存在的。
127.0.0.1 这个地址一般是分配给loopback接口的，这是一种特殊的接口，用于本机应用的相互通信。只要本机的网络组件正常，这个接口就可以使用。实际上整个127.*的网段都是可以使用的，只不过127.0.0.1是默认的设置而已。ping 127.0.0.2也是可以访问的。
因为数据的传输通过网卡，所以受到网络防火墙和网卡设置的限制。这个在访问的过程中就涉及到网络用户权限的问题。
localhost localhost是一个域名，默认指向127.0.0.1。现在支持IPv6，同时也指向[::1]。
可以设置localhost指向的ip地址，一般是在操作系统的hosts文件中进行配置。在这个配置文件中，可以把不同的ip地址设置到localhost上面。
因为localhost的访问不走网卡，所以不收网络防火墙和网卡的限制。
访问这个地址也是使用本地用户权限去访问的。
其他 所以访问本地程序时，使用localhost比较好，不占用网卡和网络资源。</description>
    </item>
    
    <item>
      <title>Git专业笔记（二十二）</title>
      <link>http://blog.huaifufeng.com/2019/02/post/git-section-22.html</link>
      <pubDate>Wed, 13 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>http://blog.huaifufeng.com/2019/02/post/git-section-22.html</guid>
      <description>工作流的类型 集中工作流 使用这种基础工作流程，master分支包含所有进行中的开发分支。在继续开发前，贡献者需要特别确定他们能够获取最新的修改，因为这个分支会迅速变化。每个可以访问这个仓库的人都可以把提交修改到master分支上面。
这种模型的图形展示：
这是经典的版本控制范例，旧的版本管理系统Subversion和CVS就是基于这种模型。以这种方式工作的软件成为集中版本控制系统或者CVCS。虽然Git可以以这种方式工作，但是存在的名下的缺点，例如在每次拉取之前都要进行合并操作。团队可以按这种方式工作，但不断的合并解决冲突最终会占用大量的宝贵时间。
这就是为什么Linus Torvalds创建Git不是按照CVCS模式，而是DVCS（分布式版本控制系统），类似于Mercurial。这种模式的优点是本章其他示例展示的灵活性。
Gitflow工作流 最初由Vincent Driessen提出的，Gitflow是使用Git和几个预定义的分支的开发流程。这可以看做是特性分支工作流的一种特例。
这种想法是为开发中的特定部分保留在单独的分支上面：
 master分支一直包含最新的生产代码，实验性代码不能包含到这个分支上面。 develop包含所有最新的开发内容。这些最新的修改可以包含基本所有的内容，但是大的特性应该包含在自己的分支内。这里的代码在发布/部署之前要合并到release分支上面。 hotfix分支代表一些小的bug修复功能，这些修复功能等不到代码发布了。hotfix从master分支上切出来，并且要合并到master和develop分支上面。 release分支用来把最新的开发从develop分支发布到master分支上。任何最后一分钟的修改（像版本号冲突）都在release分支修改，然后合并到master和develop分支上。部署新版本时，master应标记当前版本号（例如，使用语义版本），以供将来参考和轻松回滚。 feature分支包含大的特性的修改。这些修改都在专门的分支中进行，开发结束之后合并到develop分支。专门的feature分支可以把开发工作分库，对于每个特性可以单独部署。  这种模型的图形展示：
这种模型的原始展现形式是：
特性分支工作流 特性分支工作流的核心思想是把所有的特性放到不同的分支中进行开发，而不是统统放到master分支。这种封装使得多个开发人员可以在不干扰主代码库的情况下轻松地完成特定功能的开发。这还意味着主分支永远不会包含损坏的代码，对于持续集成环境来说是一个巨大的优势。
封装特性开发可以利用pull request的优势，这也是围绕分支讨论的一种方法。这给了其他开发者在特性合并到主线之前进行确认的机会。或者，你可以在一个特性分支的开发中，你可以打开一个pull request来请求同时的建议。最关键的是，pull request使您的团队非常容易对彼此的工作进行评论。
基于Atlassian Tutorials。
Github工作流 这在很多开源项目中是很有名的，但不仅仅这样。特定位置的master分支（Github,Gitlab,BitBucket,本地服务器）包含最新的可发布版本。
对于每个新特性/错误修复/体系结构更改，每个开发人员都创建一个分支。所有的修改都在这个分支上进行，并且可以在pull request或code review中进行讨论。一旦这些修改都被接受了，可以合并到master主分支。
Scott Chacon提供的全部流程：
 master分支上的任何信息都是可以发布的 要处理新的功能，请从master创建一个描述性命名的分支（即：new-oauth2-scopes） 在本地提交该分支，并定期将您的工作推送到服务器上的同一个命名分支 当您需要反馈或帮助时，或者您认为分支已准备好进行合并时，请建立一个pull request。 在其他人查看并且接受了这个分支之后，你就可以把这个分支合并到master了。 一旦这个分支被合并到master并且push到远端的master分支，你应该立即把这个master分支发布。  Scott Chacon私人站点表述的原始流程：
图片由Github Flow reference提供。
Fork工作流 这种工作流和其他提到的工作流有着根本的不同。每个人都有一个他/她自己从主库fork的新库，而不是所有人使用一个集中主库。这样做的好处是开发人员可以将修改发布到自己的存储库而不是共享存储库，维护人员可以在适当的时候将其他人存储库中的更改集成到原始存储库中。
下面是这种工作流的一种图形展示：
参考：Git® Notes for Professionals book</description>
    </item>
    
    <item>
      <title>Git专业笔记（二十一）</title>
      <link>http://blog.huaifufeng.com/2019/02/post/git-section-21.html</link>
      <pubDate>Tue, 12 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>http://blog.huaifufeng.com/2019/02/post/git-section-21.html</guid>
      <description>.mailmap文件 按别名合并贡献者以在短日志中显示提交计数 当贡献者从不同的机器或操作系统添加到一个项目中时，他们可能会为此使用不同的电子邮件或名称，这将分割贡献者列表和统计信息。
git shortlog -sn命令可以获取贡献者的列表和他们各自的提交数量，具体的结果像下面这样：
Patrick Rothfuss 871 Elizabeth Moon 762 E. Moon 184 Rothfuss, Patrick 90  可以通过提供包含电子邮件映射的纯文本文件.mailmap来调整此碎片/解除关联。
一行中列出的所有名称和电子邮件地址将分别与第一个命名实体关联。
像上面的例子，一个map邮件像下面这样：
Patrick Rothfuss &amp;lt;fussy@kingkiller.com&amp;gt; Rothfuss, Patrick &amp;lt;fussy@kingkiller.com&amp;gt; Elizabeth Moon &amp;lt;emoon@marines.mil&amp;gt; E. Moon &amp;lt;emoon@scifi.org&amp;gt;  如果这个文件在项目的根目录，运行git shortlog -sn命令将会返回缩减之后的结果：
Patrick Rothfuss 961 Elizabeth Moon 946  参考：Git® Notes for Professionals book</description>
    </item>
    
    <item>
      <title>Git专业笔记（二十）</title>
      <link>http://blog.huaifufeng.com/2019/02/post/git-section-20.html</link>
      <pubDate>Mon, 11 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>http://blog.huaifufeng.com/2019/02/post/git-section-20.html</guid>
      <description>.gitattributes文件 自动行结束符标准化 在项目的更目录创建.gitattributes文件，里面添加下面的内容：
* text=auto  这将导致所有文本文件（由Git标识的）使用LF提交，但根据操作系统的不同默认检出合适的格式。
这等价于core.autocrlf配置项使用下面的配置：
 Linux/macOS里面是input Windows里面是true  识别二进制文件 Git非常擅长识别二进制文件，但是你可以指明哪些文件时二进制的。在项目的根目录创建.gitattributes文件，并添加下面的配置：
*.png binary  binary是内建的宏命令，等价于-diff -merge -text。
.gitattributes模板 如果你确定你的.gitattributes文件是否少了某些规则，或者你只是想给你的项目添加一个通用的配置，你可以在下面的地址中选择或生成一个.gitattributes文件：
 https://gitattributes.io/ https://github.com/alexkaratarakis/gitattributes  进制行结束符标准化 在项目的根目录创建.gitattributes文件，并在里面添加：
* -text  这个配置等价于下面的配置core.autocrlf = false。
参考：Git® Notes for Professionals book</description>
    </item>
    
    <item>
      <title>Git专业笔记（十九）</title>
      <link>http://blog.huaifufeng.com/2019/02/post/git-section-19.html</link>
      <pubDate>Sun, 10 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>http://blog.huaifufeng.com/2019/02/post/git-section-19.html</guid>
      <description>Git清理    Parameter Details     -d 除了未追踪的文件外，删除未追踪的文件夹。如果未追踪的文件夹由不同的Git仓库管理，默认是不删除的。如果你一定要删除，使用两次-f选项。   -f,&amp;ndash;force 如果Git的配置clean. requireForce配置为false，Git将不会删除任何文件或目录，除了提供-f，-n或-i选项。除非给出第二个-f，否则Git将拒绝删除有.git子目录的目录或文件。   -i,&amp;ndash;interactive 交互式操作删除每个文件   -n,&amp;ndash;dry-run 只显示将要被删除的文件列表，而不实际删除这些内容   -q,&amp;ndash;quiet 只显示删除出错的文件，不显示成功的文件    交互式清理 git clean -i  打印出将要被清理的文件，使用下面的命令进行确认：
Would remove the following items: folder/file1.py folder/file2.py *** Commands *** 1: clean 2: filter by pattern 3: select by numbers 4: ask each 5: quit 6: help What now&amp;gt;  交互式选项-i可以和其他的选项-X，-d一起添加。</description>
    </item>
    
    <item>
      <title>Git专业笔记（十八）</title>
      <link>http://blog.huaifufeng.com/2019/02/post/git-section-18.html</link>
      <pubDate>Sat, 09 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>http://blog.huaifufeng.com/2019/02/post/git-section-18.html</guid>
      <description>恢复 恢复reset操作 使用Git，你总是（几乎）可以把时钟倒转。
不要害怕尝试重写历史的命令。Git默认不会删除你90天内的提交，在此期间你可以使用reflog轻松的恢复这些修改：
$ git reset @~3 # go back 3 commits $ git reflog c4f708b HEAD@{0}: reset: moving to @~3 2c52489 HEAD@{1}: commit: more changes 4a5246d HEAD@{2}: commit: make important changes e8571e4 HEAD@{3}: commit: make some changes ... earlier commits ... $ git reset 2c52489 ... and you&#39;re back where you started  *注意像--hard和—force这样的选项：他们会丢弃修改
*另外，避免在协助的分支上面修改提交历史。
恢复stash 获取你在执行git stash命令之后你最新的暂存修改，使用下面命令：
git stash apply  查看你暂存的信息列表：
git stash list  你可以获取像下面这样的修改：</description>
    </item>
    
    <item>
      <title>Git专业笔记（十七）</title>
      <link>http://blog.huaifufeng.com/2019/02/post/git-section-17.html</link>
      <pubDate>Fri, 08 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>http://blog.huaifufeng.com/2019/02/post/git-section-17.html</guid>
      <description>随意选取    Parameter Details     -e,&amp;ndash;edit 选择这个选项，使用git cherry-pick命令允许你在提交信息之前编辑提交信息   -x 记录提交时，在原始提交消息中附加一行（cherry picked from commit&amp;hellip;），以指示从哪个提交中挑选出这个更改。这个只适用于没有冲突的选取。   &amp;ndash;ff 如果当前的HEAD和cherry的提交的父提交同级，将会执行此提交的快进。   &amp;ndash;continue 使用.git/sequencer里面的信息继续进行当前的操作。可以在解决失败的挑选或恢复中的冲突后继续使用   &amp;ndash;quit 忘记当前的操作。在选取或恢复失败后，可以用来清除sequencer的信息   &amp;ndash;abort 取消当前操作，恢复之前的状态    一个随意选取获取提交中引入的补丁，并尝试在您当前所在的分支上重新应用它。
Source：Git SCM Book
从一个分支复制提交到另一个分支 git cherry-pick &amp;lt;commit-hash&amp;gt;会应用另一个分支上的已经存在的提交修改，将会记录一个新的修改。实际上，你可以把提交从分支复制到另一个分支。
已经有下面的提交树(source)：
dd2e86 - 946992 - 9143a9 - a6fd86 - 5a6057 [master] \ 76cada - 62ecb3 - b886a0 [feature]  我们想把b886a0这个分支的修改复制到master上（5a6057之上）：
我们使用下面的命令：
 git checkout master git cherry-pick b886a0  下面我们的提交树就变成下面这样：</description>
    </item>
    
    <item>
      <title>Git专业笔记（十六）</title>
      <link>http://blog.huaifufeng.com/2019/02/post/git-section-16.html</link>
      <pubDate>Thu, 07 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>http://blog.huaifufeng.com/2019/02/post/git-section-16.html</guid>
      <description>压缩 不使用rebase压缩提交 如果你想把之前的x个提交压缩到一个提交，你可以使用下面的命令：
$ git reset --soft HEAD~x $ git commit  这里，你可以替换x为你想要压缩到一个提交的多个提交的数量。
请记住这将会创建一个新的提交，基本上会丢掉之前x个提交包含的提交人，提交信息和提交日期。你可能需要首先复制粘贴现有的提交消息。
merge时压缩提交 你可以使用git merge —squash命令把这个分支的修改压缩到一个提交。并不是实际的提交被创建了。
 git merge --squash &amp;lt;branch&amp;gt; git commit  这或多或少相当于使用git reset命令，但当合并更改具有符号名时更方便。比较：
git checkout &amp;lt;branch&amp;gt; git reset --soft $(git merge-base master &amp;lt;branch&amp;gt;) git commit  rebase时压缩提交 在git rebase命令执行的时候可以压缩多个提交。建议您在尝试以这种方式压缩提交之前了解rebase命令。
 确定要从哪个提交中rebase，并注意其提交的hash值。
 执行git rebase -i [commit hash]
  或者，你可以使用HEAD~4来代替提交的hash值，来查看最新的提交和最新之前4个提交
 在运行这个命令打开的编辑器中，选择哪些提交你想要合并。替换这些行之前的pick为squash来吧这些提交压缩的签名的提交中。
 在选择了压缩的提交之后，你需要编辑提交的信息
  查看提交并且决定哪些提交要rebase:
&amp;gt; git log --oneline 612f2f7 This commit should not be squashed d84b05d This commit should be squashed ac60234 Yet another commit 36d15de Rebase from here 17692d1 Did some more stuff e647334 Another Commit 2e30df6 Initial commit &amp;gt; git rebase -i 36d15de  这时你选择的编辑器就会打开，在这里你可以描述你想要这些提交做什么。Git在注释中提供了帮助信息。如果你退出了这个编辑器，什么都不会发生，因为每个提交都会保持和之前一样的顺序。在这个例子中，我们应用下面的命令：</description>
    </item>
    
    <item>
      <title>Git专业笔记（十五）</title>
      <link>http://blog.huaifufeng.com/2019/02/post/git-section-15.html</link>
      <pubDate>Wed, 06 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>http://blog.huaifufeng.com/2019/02/post/git-section-15.html</guid>
      <description>Rev-List    Parameter Detals     &amp;ndash;online 将提交显示为带有标题的单行。    列出在master不在远端master提交 git rev-list --oneline master ^origin/master  git rev-list命令会列出在一个分支不在另一个分支的提交。当您试图弄清楚代码是否已合并到分支中时，它是一个很好的工具。
 使用--oneline选项显示每个提交的标题 ^操作符会在列表中过滤指定的分支 如果需要，可以传递两个以上的分支。git rev-list foo bar ^baz将会列出foo和bar的提交，不包括baz。  参考：Git® Notes for Professionals book</description>
    </item>
    
    <item>
      <title>Git专业笔记（十四）</title>
      <link>http://blog.huaifufeng.com/2019/02/post/git-section-14.html</link>
      <pubDate>Tue, 05 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>http://blog.huaifufeng.com/2019/02/post/git-section-14.html</guid>
      <description>分支    Parameter Detals     -d,&amp;ndash;delete 删除分支。这个分支必须合并到它的远端分支，如果设置了--track或--set-upstream的话，就需要在HEAD中   -D --delete --force强制删除的简称   -m,&amp;ndash;move 移动/重命名分支和相应的reflog   -M --move —force命令的简称   -r,&amp;ndash;remotes 列出或删除（使用-d）远端追踪的分支   -a,&amp;ndash;all 列出远端追踪分支和本地分支   &amp;ndash;list 激活列表模式。git branch &amp;lt;pattern&amp;gt;会试着新建分支。git branch -- list &amp;lt;pattern&amp;gt;列出所有匹配的分支   &amp;ndash;set-upstream 如果指定的分支不存在或者指定了--force参数，行为会和--track一样。否则在创建分支时设置像--track那样的配置，除了分支指向的地方没有改变    创建和切换新分支 创建一个新分支，并且保留在当前分支，执行下面的命令：
$ git branch &amp;lt;name&amp;gt;  通常，分支名称不得包含空格，并且符合列出的这里列出的其他规范。切换到已经存在的分支：
$ git checkout &amp;lt;name&amp;gt;  创建并且切换到新分支：
$ git checkout -b &amp;lt;name&amp;gt;  在指定索引创建一个分支，而不是在当前分支的最后提交（就是HEAD），可以使用下面任何一个命令：</description>
    </item>
    
    <item>
      <title>Git专业笔记（十三）</title>
      <link>http://blog.huaifufeng.com/2019/02/post/git-section-13.html</link>
      <pubDate>Mon, 04 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>http://blog.huaifufeng.com/2019/02/post/git-section-13.html</guid>
      <description>配置    Parameter Detals     &amp;ndash;system 编辑为每个人使用的系统配置（在linux上，配置文件在$(prefix)/etc/gitconfig）   &amp;ndash;global 修改为你的每个仓库使用的全局配置文件（在linux上，配置文件在~/.gitconfig）   &amp;ndash;local 编辑指定仓库的配置文件，在你仓库的.git/config这个文件内，这个是默认的配置    配置编辑器 有多个方式来配置你commit和rebase的时候使用的编辑器：
 修改core.editor配置项：   $ git config --global core.editor nano   设置GIT_EDITOR环境变量：  举个例子，应用到一个命令：
 $ GIT_EDITOR=nano git commit  或者为终端执行的所有git命令。注意：直到你关闭了终端，这个配置才会生效：
 $ export GIT_EDITOR=nano   想要修改终端所有程序的编辑器，不仅仅是git，可以VISUAL或EDITOR环境变量（可以查看VISUAL vs EDITOR）:   $ export EDITOR=nano  注意：像上面一样，这个命令只会应用到当前的终端页面。你的shell通常会有一个配置文件，允许你永远的设置你的配置。（比如在bash时，可以添加上面的配置到~/.bashrc获取~/.bash_profile配置文件）。
一些文本编辑器（主要是GUI编辑器）一次只运行一个实例，如果你已经打开了一个实例，通常会退出。如果您的文本编辑器就是这种情况，Git将打印Aborting commit due to empty commit message。不允许你先编辑你的提交信息。如果你遇到了这种情况，检查你的编辑器文档是否有--wait这个配置项。允许你在文档关闭之前终端提交。</description>
    </item>
    
    <item>
      <title>Git专业笔记（十二）</title>
      <link>http://blog.huaifufeng.com/2019/02/post/git-section-12.html</link>
      <pubDate>Sun, 03 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>http://blog.huaifufeng.com/2019/02/post/git-section-12.html</guid>
      <description>rebase    Parameter Detals     &amp;ndash;continue 在解决完merge冲突之后，重新开始执行rebase命令   &amp;ndash;abort 中断rebase操作之后，重新吧HEAD定位到原有分支上。如果在使用rebase命令的时候提供了分支名，HEAD将会被设置到这个分支上。否则HEAD将会重新设置到rebase操作开始的位置。   &amp;ndash;keep-empty 保留那些没有修改的提交   &amp;ndash;skip 重新开始rebase命令，忽略掉当前的补丁   -m,&amp;ndash;merge 在rebase的时候使用megre策略。当使用递归(默认)合并策略的话，这允许rebase知道上游的重命名。注意rebase合并的工作方式是从上游分支顶部的工作分支重放每个提交。因此，当合并冲突发生时，报告为我们的一方是迄今为止重新定位的系列，从上游开始，他们是工作分支。换句话说，双方交换。   &amp;ndash;stat 显示上次rebase之后，上游做的修改。这些不同将会有rebase.stat配置项控制   -x, &amp;ndash;exec command 执行交互式rebase，在每个提交和执行command之间暂停    本地分支rebase rebase在另外提交的顶部应用一系列的提交。rebase一个分支的话，首先切换到这个分支，然后rebase到另一个分支的顶部：
$ git checkout topic $ git rebase master  这会导致：
	A---B---C topic / D---E---F---G master  变成：
 A&#39;--B&#39;--C&#39; topic / D---E---F---G master  这些操作可以合并到一个简单命令上面：切换分支然后执行rebase命令</description>
    </item>
    
    <item>
      <title>Git专业笔记（十一）</title>
      <link>http://blog.huaifufeng.com/2019/02/post/git-section-11.html</link>
      <pubDate>Sat, 02 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>http://blog.huaifufeng.com/2019/02/post/git-section-11.html</guid>
      <description>别名 简单别名 有两种方法来创建Git别名：
 编辑~/.gitconfig文件：   [alias] ci = commit st = status co = checkout   使用命令行：   git config --global alias.ci &amp;quot;commit&amp;quot; git config --global alias.st &amp;quot;status&amp;quot; git config --global alias.co &amp;quot;checkout&amp;quot;  在别名创建之后：
 git ci就是git commit git st就是git status git co就是git checkout  像正常的命令一样，别名也可以使用参数，例如：
 git ci -m &amp;quot;Commit message...&amp;quot; git co -b feature-42  显示搜索别名 你可以使用--get-regexp选项来列出所有的别名：
$ git config --get-regexp &#39;^alias\.&#39;  搜索别名 想要搜索别名的话，在.</description>
    </item>
    
    <item>
      <title>Git专业笔记（十）</title>
      <link>http://blog.huaifufeng.com/2019/02/post/git-section-10.html</link>
      <pubDate>Fri, 01 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>http://blog.huaifufeng.com/2019/02/post/git-section-10.html</guid>
      <description>提交    参数 详情     &amp;ndash;message, -m 包含在提交中的信息。这将会打开一个编辑器   &amp;ndash;amend 指定这个参数将会把当前暂存区的信息添加到之前的提交内。请注意，这将会修改之前的提交历史   &amp;ndash;no-edit 使用选择的提交信息但是不打开编辑器，例如：git commit --amend --no-edit追加提交到之前的提交上，并且不修改提交信息。   &amp;ndash;all, -a 提交包括未暂存的文件在内的修改   &amp;ndash;date 手动设置关联到这个提交的日期信息   &amp;ndash;only 只提交指定路径的信息。这将只会提交指定的文件   &amp;ndash;patch,-p 使用交互的补丁选择窗口来选择提交哪些修改   -S[keyid], -S &amp;ndash;gpg- sign[=keyid], -S &amp;ndash;no-gpg-sign Sign commit, GPG-sign commit, 取消 commit.gpgSign 配置变量   -n,&amp;ndash;no-verify 这个参数取消执行预提交和提交信息的钩子。详情看钩子    暂存提交修改 基础 在你修改了你的本地文件之后，在你准备提交这些修改之前，需要把文件暂存起来。
例如，如果你修改README.md和program.py这两文件：
$ git add README.</description>
    </item>
    
    <item>
      <title>Git专业笔记（九）</title>
      <link>http://blog.huaifufeng.com/2019/01/post/git-section-9.html</link>
      <pubDate>Thu, 31 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>http://blog.huaifufeng.com/2019/01/post/git-section-9.html</guid>
      <description>submodule clone一个有子模块的仓库 当你克隆了一个有子模块的仓库时，你需要初始化和更新他们：
$ git clone --recursive https://github.com/username/repo.git  这将会克隆关联的子模块，并且把子模块放到合适的位置上面（包括子模块关联的子模块）。这个命令等价于在仓库克隆之后立即执行git submodule update --init --recursive这个命令。
更新子模块 如果一个子模块引用了另一个仓库中的子模块的特定提交。想要切换到所有引用子模块的特定状态的话，可以使用下面的命令：
$ git submodule update --recursive  有时候为了替换引用子模块当前的状态，你想要把本地米宽的分支切换到远端的最新状态。使用下面的命令可以把所有引用的子模块切换到远端最新的分支：
$ git submodule foreach git pull &amp;lt;remote&amp;gt; &amp;lt;branch&amp;gt;  或者使用默认的git pull参数：
$ git submodule foreach git pull  注意：这将只会更新本地工作区副本。如果一个子模块用这个命令更新了，他将会出现在git status命令的文件列表内。如果你想要把你的引用更新到最新的状态，你可以提交这些修改：
 git add &amp;lt;submodule_directory&amp;gt; git commit  如果你使用git pull的话，这写修改可能会造成合并冲突。你可以使用git pull —rebase来把修改到会到最新。大多数情况下这会减少出现冲突的次数。这也会把所有的分支pull到本地：
$ git submodule foreach git pull --rebase  想要把某个分支切换到最新的状态，可以使用：
$ git submodule update --remote &amp;lt;submodule_directory&amp;gt;  添加子模块 你可以把另外的Git仓库当做你自己项目的一个文件夹，使用Git来追踪：</description>
    </item>
    
    <item>
      <title>Git专业笔记（八）</title>
      <link>http://blog.huaifufeng.com/2019/01/post/git-section-8.html</link>
      <pubDate>Wed, 30 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>http://blog.huaifufeng.com/2019/01/post/git-section-8.html</guid>
      <description>merge    parameter Details     -m 在merge提交里使用的信息   -v 显示详细的输出   &amp;ndash;abort 中断把文件恢复到之前的状态   &amp;ndash;ff-only 当一个merge提交被要求的话立即中断   &amp;ndash;no-ff 强制创建一个merge提交，即使它不是强制的   &amp;ndash;no-commit 假装merge失败了，允许去检查和调整这个结果   &amp;ndash;stat merge合并之后，展示状态的不同   -n/&amp;ndash;no-stat 不显示状态的不同   &amp;ndash;sqaush 允许对这个分支的merge修改做一个单独的提交    自动合并 当两个分支的提交不冲突的话，Git可以自动的合并他们：
~/Stack Overflow(branch:master) » git merge another_branch Auto-merging file_a Merge made by the &#39;recursive&#39; strategy. file_a | 2 +- 1 file changed, 1 insertion(+), 1 deletion(-)  找到没有merge提交的分支 有时候你有一些已经把修改merge到master上的分支。这将找出来所有不是master分支并且和master分支没有区别提交的分支。这用来查找在PR合并到master之后，没有删除的分支非常有帮助：</description>
    </item>
    
    <item>
      <title>Git专业笔记（七）</title>
      <link>http://blog.huaifufeng.com/2019/01/post/git-section-7.html</link>
      <pubDate>Tue, 29 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>http://blog.huaifufeng.com/2019/01/post/git-section-7.html</guid>
      <description>撤销修改 返回前一个提交 返回前一个提交，首先使用git log找到前一个提交的hash值。然后要临时返回那个提交的话，使用下面的命令：
$ git checkout 789abcd  这将返回hash值为789abcd的提交。现在你可以在不影响你的HEAD的情况下，在这个老提交的基础上建立新的提交。你可以使用branch或checkout -b命令来建立一个分支，然后把这些修改放到这个分支上面。
使用下面的命令返回上一个提交的话，会保留之前的修改：
$ git reset --soft 789abcd  去返回上一个提交，可以使用下面的命令：
$ git reset --soft HEAD~  想要抛弃某个提交之后的修改，可以使用下面的命令：
$ git reset --hard 789abcd  想要抛弃上一个提交之后的修改，使用下面的命令：
$ git reset --hard HEAD~  注意：你可以使用reflog和reset恢复丢弃的提交，但是没有提交的修改是无法恢复的。
撤销修改 撤消对工作副本中文件或目录的更改。
$ git checkout -- file.txt  下面的命令将会递归的应用到当前目录的所有文件和文件夹上面，他将撤销工作区副本的所有修改：
$ git checkout .  想要撤销部分修改的话，可以使用---patch选项。这样对每个修改，你都将被询问，是要撤销还是保留：
$ git checkout --patch -- dir  想要撤销添加到index的修改，使用下面的命令：
$ git reset --hard  如果没有—hard选项的话，这将会执行一个软reset命令。</description>
    </item>
    
    <item>
      <title>Git专业笔记（六）</title>
      <link>http://blog.huaifufeng.com/2019/01/post/git-section-6.html</link>
      <pubDate>Mon, 28 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>http://blog.huaifufeng.com/2019/01/post/git-section-6.html</guid>
      <description>git diff    parameter details     -p, -u, &amp;ndash;patch 生成补丁。   -s, &amp;ndash;no-patch 取消差异的输出。对于像git diff这样显示补丁的命令非常有用。或者用来取消—patch选项的效果。   &amp;ndash;raw 输出原生格式信息的文件差异信息。   &amp;ndash;diff-algorithm= 选择差异对比的算法。可选的算法有：myers，minimal，patience，histogram   &amp;ndash;summary 输出一个压缩的扩展头信息，包括（创建，重命名和模式修改等）   &amp;ndash;name-only 只展示修改文件的名称   &amp;ndash;name-status 展示已修改文件的名称和状态，常见的状态有：M 修改 A 添加 D 删除   &amp;ndash;check 如果修改出现了标记冲突和空白错误会发出警告。被视作空白错误的信息是由core.whitespace控制的。默认情况下，尾随空格（包括仅由空格组成的行）和空格字符（在行的初始缩进内紧跟制表符）被视为空格错误。如果出现问题就会以非0的退出码退出。不和--exit-code兼容。   &amp;ndash;full-index 当想产生补丁格式的输出时，取代最开始的几个字符，将会把完整的pre-和post-image二进制对象显示在索引行中。   &amp;ndash;binary 除了像--full-index外，还会输出一个可以用于git apply命令的二进制差异文件。   -a, &amp;ndash;text 把所有的文件视作文本。   &amp;ndash;color 设置颜色模式：如果要将diff设置为较小并保持git的颜色，请使用--color=always    展示工作区差异 $ git diff  这将展示当前分支未暂存的修改和之前的提交的差异。这只展示相对于索引的差异，也就是只展示你可以在下次提交的，但是还没有提交的修改。想要添加这些修改，可以使用git add。</description>
    </item>
    
    <item>
      <title>Git专业笔记（五）</title>
      <link>http://blog.huaifufeng.com/2019/01/post/git-section-5.html</link>
      <pubDate>Sun, 27 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>http://blog.huaifufeng.com/2019/01/post/git-section-5.html</guid>
      <description>忽略文件文件夹 这章的主题是介绍怎么避免把不想要的文件（或者文件的修改）添加到Git仓库内。有好几种方式可以实现这个目的：全局或者本地的.gitignore ，.git/exclude，git update-index --assume-unchanged，git update-index --skip-tree。但是请记住Git是用来管理内容的：忽略实际忽略的是文件夹的内容。一个空的文件夹将会被自动忽略，因为它不能不添加到仓库内。
.gitignore 你可以让Git通过添加一个或多个.gitignore文件来忽略某些文件或者文件夹，即不把这些内容通过Git来追踪。
在一些软件项目中，.gitignore文件会包含一列在构建程序或运行时产生的文件或文件夹。在.gitignore中，可能包含指向下面内容的名称或路径：
 临时资源，像缓存，log文件，编译文件等 不应该分享给其他人的配置文件 包含密码、秘钥、证书等隐秘信息的文件  当在顶层目录创建这个文件时，这些规则将会应用到这个仓库所有的文件和子目录。当在子目录创建时，这些规则只会应用到这个目录和这个目录子目录的文件中。
当一个文件或目录被忽略了，这代表：
 不会被Git库追踪。 不会再git status和git diff命令中输出处理。 不会通过git add -A命令暂存这些内容。  在一些特殊的场景下，你需要把已经追踪的文件忽略掉，这时你要特别小心。可以查看下面章节：忽略已提交内容。
例子： 下面是一些.gitignore中比较简单的例子，基于glob file patterns：
# Lines starting with `#` are comments. # Ignore files called &#39;file.ext&#39; file.ext # Comments can&#39;t be on the same line as rules! # The following line ignores files called &#39;file.ext # not a comment&#39; file.ext # not a comment # Ignoring files with full path.</description>
    </item>
    
    <item>
      <title>Git专业笔记（四）</title>
      <link>http://blog.huaifufeng.com/2019/01/post/git-section-4.html</link>
      <pubDate>Thu, 24 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>http://blog.huaifufeng.com/2019/01/post/git-section-4.html</guid>
      <description>暂存区 暂存所有文件 想要删除一个远端的分支：
$ git add -A  在Git 2.0+之后的版本
$ git add .  在版本2.x时，git add .命令将会添加当前目录及其子目录下的所有修改的文件。但是在1.x的版本，只会暂存新建或修改的文件，不会暂存删除的文件。
使用git add -A或者git add --all来存储所有修改的文件，不管在哪个版本都是有效的。
取消存储的修改文件 $ git reset &amp;lt;filePath&amp;gt;  添加大片修改 你可以看到大片的选项是怎么被存储的，通过使用patch选项：
$ git add -p  或者
$ git add --patch  这个命令将会打开一个交互界面，允许你查看修改，并且决定哪些内容去被存储起来：
Stage this hunk [y,n,q,a,d,/,s,e,?]?   y stage this hunk for the next commit n do not stage this hunk for the next commit q quit; do not stage this hunk or any of the remaining hunks a stage this hunk and all later hunks in the file d do not stage this hunk or any of the later hunks in the file g select a hunk to go to / search for a hunk matching the given regex j leave this hunk undecided, see next undecided hunk J leave this hunk undecided, see next hunk k leave this hunk undecided, see previous undecided hunk K leave this hunk undecided, see previous hunk s split the current hunk into smaller hunks e manually edit the current hunk ?</description>
    </item>
    
    <item>
      <title>Git专业笔记（三）</title>
      <link>http://blog.huaifufeng.com/2019/01/post/git-section-3.html</link>
      <pubDate>Mon, 21 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>http://blog.huaifufeng.com/2019/01/post/git-section-3.html</guid>
      <description>操作远端 删除远端分支 想要删除一个远端的分支：
$ git push [remote-name] --delete [branch-name]  或者
$ git push [remote-name] :[branch-name]  修改远端地址 查看已经存在的远端地址：
$ git remote -v # origin https://github.com/username/repo.git (fetch) # origin https://github.com/usernam/repo.git (push)  修改仓库的地址：
$ git remote set-url origin https://github.com/username/repo2.git # Change the &#39;origin&#39; remote&#39;s URL  查看验证新的远端地址：
$ git remote -v # origin https://github.com/username/repo2.git (fetch) # origin https://github.com/username/repo2.git (push)  远端列表 查看这个仓库关联的远端列表：
$ git remote  查看这个仓库关联的远端列表，包括这些远端的fetch和push的Url地址。
$ git remote --verbose  或者</description>
    </item>
    
    <item>
      <title>Git专业笔记（二）</title>
      <link>http://blog.huaifufeng.com/2019/01/post/git-section-2.html</link>
      <pubDate>Fri, 18 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>http://blog.huaifufeng.com/2019/01/post/git-section-2.html</guid>
      <description>查看历史    Parameter Explanation     -q, &amp;ndash;quiet Quiet, suppresses diff output   &amp;ndash;source Shows source of commit   &amp;ndash;use-mailmap Use mail map file (changes user info for committing user)   &amp;ndash;decorate[=&amp;hellip;] Decorate options   &amp;ndash;L &amp;lt; n,m:file&amp;gt; Show log for specific range of lines in a file, counting from 1. Starts from line n, goes to line m. Also shows diff.</description>
    </item>
    
    <item>
      <title>Git专业笔记（一）</title>
      <link>http://blog.huaifufeng.com/2019/01/post/git-section-1.html</link>
      <pubDate>Tue, 15 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>http://blog.huaifufeng.com/2019/01/post/git-section-1.html</guid>
      <description>开始学习Git 创建自己的项目，并添加、提交文件 首页在终端验证你是否已经安装有Git：
在所有的操作系统上，都可以使用下面的命令：
$ git --version  在类Unix系统还可以使用下面的命令：
$ which git  如果什么都没有返回，或者没有通过验证，这就表明你需要通过下载并运行安装程序，在你的系统上安装Git。查看Git官网，上面有特别详细和容易的安装教程。
安装完Git之后，在你真正的提交之前，还需要配置好你的名称和邮件地址。
一旦安装成功Git，你就可以到你希望进行版本管理的文件夹下，初始化一个空的Git仓库：
$ git init  这会创建一个隐藏的.git文件夹，用来存放Git工作需要的信息。
接下来检查下Git将把什么文件加入到仓库内，这是非常值得注意的，也是在添加、提交文件之前的必要操作：
$ git status  检查文件的列表，你可以告诉Git哪些文件你想进行版本的管理（避免将像密码这样的重要信息或者污染仓库的信息添加到Git仓库里面）：
$ git add &amp;lt;file/directory name #1&amp;gt; &amp;lt;file/directory name #2&amp;gt; &amp;lt; ... &amp;gt;  如果所有的文件你都想和能访问这个仓库的人分享，有一个简单的命令可以添加当前目录和当前目录子目录内的所有文件：
$ git add .  这将“暂存”所有的文件，等待将这些文件加入版本管理，准备在你的第一次提交中提交它们。
对于你不想添加到版本管理的文件，你可以在执行add之前命令创建一个名.gitignore的文件，并且填写里面的内容。
提交所有已经添加的文件，同时填写一个提交的注释信息：
$ git commit -m &amp;quot;Initial commit&amp;quot;  这使用提供的信息创建了一个新的提交。一个提交就像你整个项目的一个快照。现在你就可以把本地的文件push到远端的仓库内，如果有需要的时候，你可以重新返回这里。
如果你忽略了-m参数，你默认的编辑器将会打开，你可以在编辑器里面编辑并且保存提交信息。
添加远端仓库 想要添加一个新的远端仓库地址，你可以在你仓库所在的文件夹内，在终端内执行git remote add命令。
1. 一个远端的名称，比如```origin``` 2. 一个远端的URL地址，比如```https://&amp;lt;your-git-service-address&amp;gt;/user/repo.git``` ```shell $ git remote add origin https://&amp;lt;your-git-service-address&amp;gt;/owner/repository.</description>
    </item>
    
  </channel>
</rss>