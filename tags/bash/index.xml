<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Bash on 怀府小阁</title>
    <link>http://blog.huaifufeng.com/tags/bash/</link>
    <description>Recent content in Bash on 怀府小阁</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sun, 17 Feb 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="http://blog.huaifufeng.com/tags/bash/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Bash专业笔记(二十一)</title>
      <link>http://blog.huaifufeng.com/2019/02/post/bash-section-21.html</link>
      <pubDate>Sun, 17 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>http://blog.huaifufeng.com/2019/02/post/bash-section-21.html</guid>
      <description>引号 变量和命令替换的双引号 变量的个替换只能够被用在双引号中。
calculation=&#39;2 * 3&#39; echo &amp;quot;$calculation&amp;quot; # prints 2 * 3 echo $calculation # prints 2, the list of files in the current directory, and 3 echo &amp;quot;$(($calculation))&amp;quot; # prints 6  在双引号之外，$var使用变量var的值，然后用空格分隔这个值的每一部分，并将每一部分解析为一个(通配符)模式。除非你需要这种方式，否则每次都把$var放到双引号里面&amp;quot;$var&amp;quot;。
这也适用于命令的方式，&amp;quot;$(mycommand)&amp;quot;输出mycommand的值。mycommand将会输出空格分隔之后的结果。
echo &amp;quot;$var&amp;quot; # good echo &amp;quot;$(mycommand)&amp;quot; # good another=$var # also works, assignment is implicitly double-quoted make -D THING=$var # BAD! This is not a bash assignment. make -D THING=&amp;quot;$var&amp;quot; # good make -D &amp;quot;THING=$var&amp;quot; # also good  命令替换有它自己的上下文环境。编写任意嵌套替换很容易，因为解析器将跟踪嵌套深度，而不是贪婪地搜索第一个“字符”。不过，StackOverflow语法高亮分析错误。例如：</description>
    </item>
    
    <item>
      <title>Bash专业笔记(二十)</title>
      <link>http://blog.huaifufeng.com/2019/02/post/bash-section-20.html</link>
      <pubDate>Sat, 16 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>http://blog.huaifufeng.com/2019/02/post/bash-section-20.html</guid>
      <description>Here语法 here文档执行命令 ssh -p 21 example@example.com &amp;lt;&amp;lt;EOF echo &#39;printing pwd&#39; echo &amp;quot;\${pwd}&amp;quot; ls -a find &#39;*.txt&#39; EOF  $这里是被逃脱的，因为我们不想让这个变量在当前shell中解析。$(pwd)应该在远端的shell中执行。
另外一种方式：
ssh -p 21 example@example.com &amp;lt;&amp;lt;&#39;EOF&#39; echo &#39;printing pwd&#39; echo &amp;quot;$(pwd)&amp;quot; ls -a find &#39;*.txt&#39; EOF  注意：这个结束的EOF标识需要在一行的最开始（前面没有任何空格）。如果需要缩进的话，当你的hera语法是以&amp;lt;&amp;lt;-开头的话，可以使用tab。查看here文档的缩进和限制字符串来获取更多信息。
here缩进 你可以在here文档中使用tab来进行缩进操作，但是这个时候你就需要使用&amp;lt;&amp;lt;-来代替&amp;lt;&amp;lt;符号了：
$ cat &amp;lt;&amp;lt;- EOF This is some content indented with tabs `\t`. You cannot indent with spaces you __have__ to use tabs. Bash will remove empty space before these lines. __Note__: Be sure to replace spaces with tabs when copying this example.</description>
    </item>
    
    <item>
      <title>Bash专业笔记(十九)</title>
      <link>http://blog.huaifufeng.com/2019/02/post/bash-section-19.html</link>
      <pubDate>Fri, 15 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>http://blog.huaifufeng.com/2019/02/post/bash-section-19.html</guid>
      <description>Source source一个文件和执行命令是不同的，因为所有的命令都是在当前bash会话的上下文环境中执行的—这就意味着所有的变量、函数或别名在整个会话中是保持不变的。
创建一个你想要source的文件sourcename.sh：
#!/bin/bash export A=&amp;quot;hello_world&amp;quot; alias sayHi=&amp;quot;echo Hi&amp;quot; sayHello() { echo Hello }  在你当前的bash会话中，source这个文件：
$ source sourcename.sh  从这时开始，在当前的会话中你拥有了被source文件内的所有变量：
$ echo $A hello_world $ sayHi Hi $ sayHello Hello  另外注意：.命令是source命令的简称，所以你可以简单的使用下面的命令：
. sourcename.sh  source虚拟环境 当在一个机器上面开发多个应用的时候，把不同的依赖分别放入不同的虚拟环境是很有用的。
通过使用virtualenv命令，这些环境变量被source到你的shell环境中。这样当你执行一个命令的时候，它是被运行在一个虚拟环境中。
下面是使用pip按照软件的常用方法：
pip install https://github.com/pypa/virtualenv/tarball/15.0.2  创建一个新的环境变量：
virtualenv --python=python3.5 my_env  激活这个环境：
source my_env/bin/activate  参考：Bash Notes for Professionals book</description>
    </item>
    
    <item>
      <title>Bash专业笔记(十八)</title>
      <link>http://blog.huaifufeng.com/2019/02/post/bash-section-18.html</link>
      <pubDate>Thu, 14 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>http://blog.huaifufeng.com/2019/02/post/bash-section-18.html</guid>
      <description>Sort    Option meaning     -u 每行输出都唯一    sort是一个Unix命令，用来按顺序对文件中的数据进行排序。
命令输出 sort用来排序一列行。
输入一个文件 sort file.txt  排序另个命令的输出 你可以排序任何输出命令的输出。在下面的例子中，会排序一列符合条件的文件：
find * -name pattern | sort  输出唯一 如果想要输出的行保持唯一，可以使用-u选项。
输出目录中文件的所有者：
ls -l | awk &#39;{print $3}&#39; | sort -u  数字排序 假设我们有下面的文件：
$ cat file 10.Gryffindor 4.Hogwarts 2.Harry 3.Dumbledore 1.The sorting hat  想要按数字排序这些内容，使用-n选项：
sort -n file  这个命令会输出下面的内容：
1.The sorting hat 2.Harry 3.Dumbledore 4.Hogwarts 10.</description>
    </item>
    
    <item>
      <title>Bash专业笔记(十七)</title>
      <link>http://blog.huaifufeng.com/2019/02/post/bash-section-17.html</link>
      <pubDate>Wed, 13 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>http://blog.huaifufeng.com/2019/02/post/bash-section-17.html</guid>
      <description>Find find是一个用于在目录中递归搜索与条件匹配的文件（或目录）的命令，然后对所选文件执行某些操作。
find search_path selection_criteria action  按照文件名或扩展名搜索文件 使用指定的文件名在pwd指向的本地目录内搜索文件或目录：
$ find . -name &amp;quot;myFile.txt&amp;quot; ./myFile.txt  使用通配符查找有指定扩展名的文件或目录：
$ find . -name &amp;quot;*.txt&amp;quot; ./myFile.txt ./myFile2.txt  想要搜索包含多个扩展的文件或目录，使用or选项：
$ find . -name &amp;quot;*.txt&amp;quot; -o -name &amp;quot;*.sh&amp;quot;  想要搜索以abc开头，后面跟着一个字符，之后跟着一个数字使用下面的模式：
$ find . -name &amp;quot;abc[a-z][0-9]&amp;quot;  获取指定目录下所有的文件：
$ find /opt  只显示目录下面的文件，使用-type f：
$ find /opt -type f  只显示目录下面的目录，使用-type d:
$ find /opt -type d  对找到的文件执行命令 有时候我们需要在一批文件上面运行命令。这里就可以使用xargs命令。
find . -type d -print | xargs -r chmod 770  上面的命令将会在.</description>
    </item>
    
    <item>
      <title>Bash专业笔记(十六)</title>
      <link>http://blog.huaifufeng.com/2019/02/post/bash-section-16.html</link>
      <pubDate>Tue, 12 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>http://blog.huaifufeng.com/2019/02/post/bash-section-16.html</guid>
      <description>复制    Option Description     -a,-archive 和选项d，p，r一起使用   -b,-backup 在删除之前，建立一个备份   -d,&amp;ndash;no-deference 保存连接   -f,&amp;ndash;force 在不提醒用户的情况下删除目标地址存在的文件   -i,&amp;ndash;interactive 在覆盖前进行提示   -l,&amp;ndash;link 不复制文件，而是使用文件连接   -p,&amp;ndash;preserve 尽可能保留文件的属性   -R,&amp;ndash;recursive 递归复制目录的文件    复制一个文件 把文件foo.txt从/path/to/source/复制到/path/to/target/folder/。
cp /path/to/source/foo.txt /path/to/target/folder/  把文件foo.txt从/path/to/source/复制到/path/to/target/folder/，并且修改文件名称为bar.txt。
cp /path/to/source/foo.txt /path/to/target/folder/bar.txt  复制目录 把目录foo复制到目录bar里面：
cp -r /path/to/foo /path/to/bar  如果目录bar在执行命令之前存在，目录foo和它的内容将会被复制到目录bar中。但是如果执行命令之前bar目录不存在的话，会创建目录bar，并且把目录foo的内容存放到bar中。
参考：Bash Notes for Professionals book</description>
    </item>
    
    <item>
      <title>Bash专业笔记(十五)</title>
      <link>http://blog.huaifufeng.com/2019/02/post/bash-section-15.html</link>
      <pubDate>Mon, 11 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>http://blog.huaifufeng.com/2019/02/post/bash-section-15.html</guid>
      <description>bash参数扩展 $字符引入了参数扩展、命令替换或算术扩展。要扩展的参数名称或符号可以用大括号括起来，大括号是可选的，但可以将变量从紧跟在其后面的字符扩展中选取出来，不然这些字符可以被解释为名称的一部分。
查看更多。
修改字母字符的大小写 Version&amp;gt;=4.0
修改为大写字母：
$ v=&amp;quot;hello&amp;quot; # Just the first character $ printf &#39;%s\n&#39; &amp;quot;${v^}&amp;quot; Hello # All characters $ printf &#39;%s\n&#39; &amp;quot;${v^^}&amp;quot; HELLO # Alternative $ v=&amp;quot;hello world&amp;quot; $ declare -u string=&amp;quot;$v&amp;quot; $ echo &amp;quot;$string&amp;quot; HELLO WORLD  转换字符为小写：
$ v=&amp;quot;BYE&amp;quot; # Just the first character $ printf &#39;%s\n&#39; &amp;quot;${v,}&amp;quot; bYE # All characters $ printf &#39;%s\n&#39; &amp;quot;${v,,}&amp;quot; bye # Alternative $ v=&amp;quot;HELLO WORLD&amp;quot; $ declare -l string=&amp;quot;$v&amp;quot; $ echo &amp;quot;$string&amp;quot; hello world  大写修改为小写，小写修改为大写：</description>
    </item>
    
    <item>
      <title>Bash专业笔记(十四)</title>
      <link>http://blog.huaifufeng.com/2019/02/post/bash-section-14.html</link>
      <pubDate>Sun, 10 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>http://blog.huaifufeng.com/2019/02/post/bash-section-14.html</guid>
      <description>函数 带参数函数 在helloJohn.sh文件里面有下面的代码：
#!/bin/bash greet() { local name=&amp;quot;$1&amp;quot; echo &amp;quot;Hello, $name&amp;quot; } greet &amp;quot;John Doe&amp;quot;  执行这个文件：
$ bash helloJohn.sh Hello, John Doe   如果你没有修改参数，可以不用把这个参数放到本地变量中，可以直接使用`echo &amp;ldquo;Hello, $1&amp;rdquo;
 你可以在函数中使用$1，$2，$3等等的变量访问函数的参数。
   注意：对于超过9个的参数，使用$10是没有用的，因为这将被解析成为$10，所以你需要使用${10}、${11}这样的变量。
  在函数中，$@引用所有的参数：   #!/bin/bash foo() { echo &amp;quot;$@&amp;quot; } foo 1 2 3 # output =&amp;gt; 1 2 3   注意：你应该像这里展示的一样，在$@周围使用双引号。
 省略引号将导致shell扩展通配符（即使用户为避免这种情况而专门引用通配符），并且通常会引入不受欢迎的行为，甚至潜在的安全问题。
 foo &amp;quot;string with spaces;&amp;quot; &#39;$HOME&#39; &amp;quot;*&amp;quot; # output =&amp;gt; string with spaces; $HOME *   想要使用默认值的话，用${1:-default_val}的格式：   #!</description>
    </item>
    
    <item>
      <title>Bash专业笔记(十三)</title>
      <link>http://blog.huaifufeng.com/2019/02/post/bash-section-13.html</link>
      <pubDate>Sat, 09 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>http://blog.huaifufeng.com/2019/02/post/bash-section-13.html</guid>
      <description>关联数组 操作关联数组 以下代码段显示了所有需要的用法：
#!/usr/bin/env bash declare -A assoc_array=([key_string]=value \ [one]=&amp;quot;something&amp;quot; \ [two]=&amp;quot;another thing&amp;quot; \ [ three ]=&#39;mind the blanks!&#39; \ [ &amp;quot; four&amp;quot; ]=&#39;count the blanks of this key later!&#39; \ [IMPORTANT]=&#39;SPACES DO ADD UP!!!&#39; \ [1]=&#39;there are no integers!&#39; \ [info]=&amp;quot;to avoid history expansion &amp;quot; \ [info2]=&amp;quot;quote exclamation mark with single quotes&amp;quot; \ ) echo # just a blank line echo now here are the values of assoc_array: echo ${assoc_array[@]} echo not that useful, echo # just a blank line echo this is better: declare -p assoc_array # -p == print echo have a close look at the spaces above\!</description>
    </item>
    
    <item>
      <title>Bash专业笔记(十二)</title>
      <link>http://blog.huaifufeng.com/2019/02/post/bash-section-12.html</link>
      <pubDate>Fri, 08 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>http://blog.huaifufeng.com/2019/02/post/bash-section-12.html</guid>
      <description>数组 数组赋值 列表赋值 如果你熟悉Perl，C或者Java的话，你可能会认为Bash使用逗号来分隔数组的元素，然而不是这样的，Bash使用空格来分隔元素：
# Perl中的数组 my @array = (1, 2, 3, 4); #Bash中的数组 array=(1 2 3 4)  使用新元素创建数组：
array=(&#39;first element&#39; &#39;second element&#39; &#39;third element&#39;)  下标赋值 使用明确的元素索引创建一个数组：
array=([3]=&#39;fourth element&#39; [4]=&#39;fifth element&#39;)  索引赋值 array[0]=&#39;first element&#39; array[1]=&#39;second element&#39;  关联数组 Version&amp;gt;= 4.0
decalare -A array array[first]=&#39;First element&#39; array[second]=&#39;Second elemet&#39;  动态赋值 从其他命令的输出结果创建一个数组，例如使用seq获取1到10的值：
array=(`seq 1 10`)  从脚本的输入参数赋值给数组：
array=(&amp;quot;$@&amp;quot;)  使用循环赋值：
while read -r; do #array+=(&amp;quot;$REPLY&amp;quot;) #数组追加 array[$i]=&amp;quot;$REPLY&amp;quot; #索引赋值 let i++ #索引增加 done &amp;lt; &amp;lt;(seq 1 10) #?</description>
    </item>
    
    <item>
      <title>Bash专业笔记(十一)</title>
      <link>http://blog.huaifufeng.com/2019/02/post/bash-section-11.html</link>
      <pubDate>Thu, 07 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>http://blog.huaifufeng.com/2019/02/post/bash-section-11.html</guid>
      <description>true，false和：命令 无限循环 while true; do echo ok done  或者
while :; do echo ok done  或者
until false; do echo ok done  函数返回 function positive() { return 0 } function negative() { return 1 }  一直或从不执行的代码 if true; then echo Always executed fi if false; then echo Never executed fi  参考：Bash Notes for Professionals book</description>
    </item>
    
    <item>
      <title>Bash专业笔记(十)</title>
      <link>http://blog.huaifufeng.com/2019/02/post/bash-section-10.html</link>
      <pubDate>Wed, 06 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>http://blog.huaifufeng.com/2019/02/post/bash-section-10.html</guid>
      <description>控制结构    Parameter to [ or test Details     File Operators Details   -e &amp;ldquo;$file&amp;rdquo; 如果文件存在，返回true   -d &amp;ldquo;$file&amp;rdquo; 如果文件存在并且是一个目录的话，返回true   -f &amp;ldquo;$file&amp;rdquo; 如果文件存在并且是一个普通文件的话，返回true   -h &amp;ldquo;$file&amp;rdquo; 如果文件存在并且是一个符号链接的话，返回true   String Comparators Details   -z &amp;ldquo;$str&amp;rdquo; 字符串长度为0时为true   -n &amp;ldquo;$str&amp;rdquo; 字符串长度不为0时为true   &amp;rdquo;$str&amp;rdquo; = &amp;ldquo;$str2&amp;rdquo; 如果字符串$str等于字符串$str2。对整数是不合适的，虽然可以工作，但是结果可能不符合预期。   &amp;rdquo;$str&amp;rdquo; != &amp;ldquo;$str2&amp;rdquo; 如果字符串$str不等于$str2时返回true   Integer Comparators Details   &amp;rdquo;$int1&amp;rdquo; -eq &amp;ldquo;$int2&amp;rdquo; 如果整数相等返回true   &amp;rdquo;$int1&amp;rdquo; -ne &amp;ldquo;$int2&amp;rdquo; 如果整数不相等返回true   &amp;rdquo;$int1&amp;rdquo; -gt &amp;ldquo;$int2&amp;rdquo; 如果整数$int1大于$int2返回true   &amp;rdquo;$int1&amp;rdquo; -ge &amp;ldquo;$int2&amp;rdquo; 如果整数$int1大于等于$int2返回true   &amp;rdquo;$int1&amp;rdquo; -lt &amp;ldquo;$int2&amp;rdquo; 如果整数$int1小于$int2返回true   &amp;rdquo;$int1&amp;rdquo; -le &amp;ldquo;$int2&amp;rdquo; 如果整数$int1小于等于$int2返回true    命令列表的条件执行 如何使用命令列表的条件执行 任何内建的命令、表达式或函数，以及外部的命令或脚本都可以使用&amp;amp;&amp;amp;或||运算符有条件的执行。</description>
    </item>
    
    <item>
      <title>Bash专业笔记(九)</title>
      <link>http://blog.huaifufeng.com/2019/02/post/bash-section-9.html</link>
      <pubDate>Tue, 05 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>http://blog.huaifufeng.com/2019/02/post/bash-section-9.html</guid>
      <description>重定向    Parameter Details     内部文件标识 整形   重定向 &amp;gt;或&amp;lt;或&amp;lt;&amp;gt;   外部文件标识或路径 文件标识或路径后面加&amp;amp;    重定向标准输出 &amp;gt;重定向当前命令的标准输出（STDOUT）到一个文件或者另外的描述符。
下面的例子会把ls命令的标准输出，输出到一个文件file.txt：
$ ls &amp;gt;file.txt $ &amp;gt; file.txt ls  如果目标文件不存在的话，就会创建这个文件，否则就会重置这个文件。
默认的文件标识符是标准输出，或者没有提供的话就是1。下面的命令和之前的一样，只是指定了标准输出：
$ ls 1&amp;gt;file.txt  注意：重定向是执行的shell初始化的，而不是由执行的命令初始化的，因此在命令执行前，初始化工作就已经完成了。
追加 Vs 重置 重置 &amp;gt;  文件不存在创建指定文件 重置（删除文件内容） 向文件写入内容  $ echo &amp;quot;first line&amp;quot; &amp;gt; /tmp/lines $ echo &amp;quot;second line&amp;quot; &amp;gt; /tmp/lines $ cat /tmp/lines second line  追加 &amp;gt;&amp;gt;  不存在创建文件 追加文件（向文件末尾写入内容）  # Overwrite existing file $ echo &amp;quot;first line&amp;quot; &amp;gt; /tmp/lines # Append a second line $ echo &amp;quot;second line&amp;quot; &amp;gt;&amp;gt; /tmp/lines $ cat /tmp/lines first line second line  重定向到STDOUT和STDERR 文件标识符0和1是指针。我们通过重定向更改文件描述符指向的内容。&amp;gt;/dev/null意味着1指向/dev/null。</description>
    </item>
    
    <item>
      <title>Bash专业笔记(八)</title>
      <link>http://blog.huaifufeng.com/2019/02/post/bash-section-8.html</link>
      <pubDate>Mon, 04 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>http://blog.huaifufeng.com/2019/02/post/bash-section-8.html</guid>
      <description>任务和进程 任务处理 创建任务 要创建一个任务，可以在命令后面添加&amp;amp;符号：
$ sleep 10 &amp;amp; [1] 20024  你也可以创建一个运行任务进程，可以按下Ctrl+z：
前后台进程 想要把一个后台进程获取到前台执行，可以使用fg命令加上%和进程数：
$ sleep 10 &amp;amp; [1] 20024 $ fg %1 sleep 10  现在你可以控制流程，想要把进程放回到后台运行的话，使用bg命令。因为终端的缓存，你需要使用Ctrl+z来终端进行。
$ sleep 10 ^Z [1]+ Stopped sleep 10 $ bg %1 [1]+ sleep 10 &amp;amp;  因为程序员的&amp;rdquo;惰性&amp;rdquo;，当只有一个进程或者想要处理列表中第一个进程，可以只适使用一个%。
$ sleep 10 &amp;amp; [1] 20024 $ fg % # to bring a process to foreground &#39;fg %&#39; is also working. sleep 10  或者：</description>
    </item>
    
    <item>
      <title>Bash专业笔记(七)</title>
      <link>http://blog.huaifufeng.com/2019/02/post/bash-section-7.html</link>
      <pubDate>Sun, 03 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>http://blog.huaifufeng.com/2019/02/post/bash-section-7.html</guid>
      <description>别名 shell的别名是一种创建新命令或者在已有命令添加自己代码的方式。这和shell的函数有重叠的地方，但是shell函数更加通用，最好优先使用。
绕过别名 有时候你想临时绕过一个别名，而不是让别名不能使用了。下面就是一个例子：
alias ls=&#39;ls --color=auto&#39;  如果我们想要使用ls命令而不是ls别名，有下面几种方法：
 使用内建的command命令：command ls 使用命令的完整路径：/bin/ls 在命令名的任何地方添加一个\：\ls或l\s 把命令引用起来：&amp;rdquo;ls&amp;rdquo;或&amp;rsquo;ls&amp;rsquo;  创建别名 alias word=&#39;command&#39;  使用word就是运行命令command。任何追加到别名后面的参数就会添加到命令后面：
 alias myAlias=&#39;some command --with --options&#39; myAlias foo bar baz  上面的别名将会执行下面的命令：
some command --with --options foo bar baz  想要在一行中执行多个命令，可以使用&amp;amp;&amp;amp;连接多个命令字符串。李润：
alias print_things=&#39;echo &amp;quot;foo&amp;quot; &amp;amp;&amp;amp; echo &amp;quot;bar&amp;quot; &amp;amp;&amp;amp; echo &amp;quot;baz&amp;quot;&#39;  删除别名 删除别名使用下面的命令：
unalias {alias_name}  例如：
# create an alias $ alias now=&#39;date&#39; # preview the alias $ now Thu Jul 21 17:11:25 CEST 2016 # remove the alias $ unalias now # test if removed $ now -bash: now: command not found  BASH_ALIASES 别名是一些命令的快捷方式，可以在交互式bash实例中定义和使用。这些别名被保存在一个名字文件BASH_ALIASES的关联数组文件。想要在脚本中使用这些别名的话，必须在交互式的shell中：</description>
    </item>
    
    <item>
      <title>Bash专业笔记(六)</title>
      <link>http://blog.huaifufeng.com/2019/02/post/bash-section-6.html</link>
      <pubDate>Sat, 02 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>http://blog.huaifufeng.com/2019/02/post/bash-section-6.html</guid>
      <description>grep 找bar文件中的foo字符：
$ grep foo ~/Desktop/bar  寻找bar文件中不包含foo字符的其他字符串：
$ grep –v foo ~/Desktop/bar  显示所有以foo结尾的字符串：
$ grep &amp;quot;*foo&amp;quot; ~/Desktop/bar  参考：Bash Notes for Professionals book</description>
    </item>
    
    <item>
      <title>Bash专业笔记(五)</title>
      <link>http://blog.huaifufeng.com/2019/02/post/bash-section-5.html</link>
      <pubDate>Fri, 01 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>http://blog.huaifufeng.com/2019/02/post/bash-section-5.html</guid>
      <description>cat    Option Description     -n 输出行号   -v 使用^和M-代替不能打印的字符，除了LFD和TAB   -T 使用^I代替TAB   -E 使用$代替换行符(LF)   -e 和-vE一个含义   -b 输出非空行行号，覆盖-n   -A 等价于-vET   -s 抑制重复输出空行    拼接文件 这是cat命令的主要作用：
$ cat file1 file2 file3 &amp;gt; file_all  cat命令也用来把拼接文件的结果作为管道的一部分：
$ cat file1 file2 file3 | grep foo  输出文件内容 $ cat file.txt  将会输出文件的所有内容。</description>
    </item>
    
    <item>
      <title>Bash专业笔记(四)</title>
      <link>http://blog.huaifufeng.com/2019/01/post/bash-section-4.html</link>
      <pubDate>Thu, 31 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>http://blog.huaifufeng.com/2019/01/post/bash-section-4.html</guid>
      <description>文件列表    Option Description     -a, &amp;ndash;all 列出所有文件，包含.开头的文件   -A, &amp;ndash;almost-all 列出所有文件，处理.和..   -c 按修改时间排序文件   -d, &amp;ndash;directory 列出所有的目录   -h, &amp;ndash;human-readable 使用人可读的单位列出文件的大小（K, M等）   -H 和上面的参数一样，只是使用1000来代替1024   -l 显示文件的详细信息   -o 显示详细信息处理分组信息   -r, &amp;ndash;reverse 倒序显示文件内容   -s, &amp;ndash;size 显示文件的块大小   -S 以文件大小排序   &amp;ndash;sort=WORD 按照某个词排序（size，version，status等）。ps：mac没有这个选项   -t 按照修改时间排序   -u 按照访问时间排序   -v 按照版本排序   -1 每行返回一个文件    列出文件详情 ls命令的-l参数，打印文件长列表格式的详细信息。如果没有指定文件夹，默认列出当前文件夹的内容。</description>
    </item>
    
    <item>
      <title>Bash专业笔记(三)</title>
      <link>http://blog.huaifufeng.com/2019/01/post/bash-section-3.html</link>
      <pubDate>Wed, 30 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>http://blog.huaifufeng.com/2019/01/post/bash-section-3.html</guid>
      <description>导航目录 绝对目录和相对目录 想要切换到一个绝对路径的目录，可以使用/开头的完整目录名称：
$ cd /home/username/project/abc  如果你想到达的目录在这个目录的下级目录，可以使用一个相对路径。例如，你当前在/home/username/project目录，如果想要到这个目录的abc子目录：
$ cd abc  如果你想到当前目录的上级目录，可以使用..符号。比如，如果你当前在/home/username/project/abc这个目录，现在想要到/home/username/project这个目录，可以使用下面的命令：
$ cd ..  这也可以称作“向上”目录。
到之前目录 在当前的shell中，你可以到你之前在的目录，而不用管这个目录在哪：
$ cd -  如果多次执行这个目录，你将会在当前目录和之前的目录之间切换。
home目录 默认的目录是home目录（$HOME，特别是/home/username），所以当没有带目录参数的执行cd命令的时候，将会直接到home目录：
$ cd  或者你可以更加明确的执行：
$ cd $HOME  home目录的简单符合是~，所以也可以这样执行：
$ cd ~  脚本目录 通常，有两种bash脚本：
 在当前目录执行的系统工具。 相对于自己目录修改文件的项目工具。  对第二中脚本来说，到的脚本所在的目录是非常有用的。这可以使用下面的命令：
$ cd &amp;quot;$(dirname &amp;quot;$(readlink -f &amp;quot;$0&amp;quot;)&amp;quot;)&amp;quot;  这个命令运行了3个命令：
 readlink -f &amp;quot;$0&amp;quot;获取当前脚本的目录。 dirname获取脚本的目录。 cd修改当前的目录到dirname返回的目录。  参考：Bash Notes for Professionals book</description>
    </item>
    
    <item>
      <title>Bash专业笔记(二)</title>
      <link>http://blog.huaifufeng.com/2019/01/post/bash-section-2.html</link>
      <pubDate>Wed, 30 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>http://blog.huaifufeng.com/2019/01/post/bash-section-2.html</guid>
      <description>脚本shebang 环境shebang 想要使用bash命令执行一个脚本文件，可以使用可以执行的env来指定PATH环境变量中的bash命令。脚本文件的第一行需要是：带有bash参数的绝对路径的env可执行文件：
#!/usr/bin/env bash  只有在使用下面这样的方式执行脚本的时候，shebang里面的env命令才会被解析：
script.sh  当然，这个脚本必须有执行权限。
当直接指明bash解析器来执行脚本的时候，这个shebang是被忽略的：
bash script.sh  直接shebang 想要用bash来执行一个脚本，也可以定义一个可以执行的bash路径：
#!/bin/bash  当直接执行脚本的时候，shebang将会被解析并执行：
./script.sh  脚本需要可以执行的权限。
当bash解析器直接指明来执行这个脚本的时候，这个shebang不会被执行：
bash script.sh  其他的shebang 操作系统内核能识别的有两种程序：一种是用ELF (ExtenableLoadableFormat)头声明的二进制程序，通常是编译生成的；另一种就是各种的脚本。
如果一个文件的第一行以#!开头，下一个字符串必须是一个解析器的路径。如果操作系统内核读到了这行，会调用路径指向的解析器，然后把后面的字符都传给这个解析器作为参数。如果没有文件焦作something或者wrong：
#!/bin/bash something wrong echo &amp;quot;This line never gets printed&amp;quot;  bash执行的时候，参数something wrong是不存在的。脚本文件的名称也会被添加。下面看下直接声明echo命令的shebang：
#&amp;quot;/bin/echo something wrong # and now call this script named &amp;quot;thisscript&amp;quot; like so: # thisscript one two # the output will be: something wrong ./thisscript one two  一些想awk的程序就用这种技术来运行长时间留在硬盘上的脚本。</description>
    </item>
    
    <item>
      <title>Bash专业笔记(一)</title>
      <link>http://blog.huaifufeng.com/2019/01/post/bash-section-1.html</link>
      <pubDate>Mon, 28 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>http://blog.huaifufeng.com/2019/01/post/bash-section-1.html</guid>
      <description>开始Bash Hello World 交互shell Bash shell通常是使用其交互模式：这允许你输入和修改命令，当你按下Return键的时候，就会执行这些命令。大多数基于Unix和类Unix的操作系统都会使用Bash作为它们默认的shell（特别是Linux和macOS）。当终端打开的时候会自动的进入交互模式的Bash shell。
使用下面的方式输出一个Hello World：
$ echo &amp;quot;Hello World&amp;quot; #&amp;gt; Hello World # Output Example  注意点：
 你可以在终端中通过修改shell的名称来修改shell。比如：sh，bash等等 echo是Bash内建的一个命令，会把它接收到的参数输出到标准输出中。默认它会在输出的后面输出一个新行。  非交互shell Bash shell也可以在脚本中被按照非交互模式运行，当shell不需要人工操作时。交互的行为和非交互的行为都是唯一的：Unix V7 Bourne shell和其他的衍生shell 的一项重要设计原则。因此，任何在命令行中可以执行的命令都可以放到脚本中重复使用。
下面的步骤创建了一个Hello World脚本：
 创建一个叫hello-world.sh的文件。   $ touch hello-world.sh   为文件添加执行权限：chmod +x hello-world.sh
 添加下面的代码：
   #!/bin/bash echo &amp;quot;Hello World&amp;quot;  第一行：脚本的第一行必须以字符串#!开始，这被叫做 shebang。这个shebang通知操作系统去允许/bin/bash，并且把文件的路径作为参数传递给这个命令。像：/bin/bash hello-world.sh
第二行：使用echo命令把Hello world输出到标准输出。
 在命令行中执行hello-world.sh这个脚本可以使用下面的人一个方式：
 ./hello-world.sh 最常用的方法，也是最推荐的方法。 /bin/bash hello-world.sh bash hello-world.</description>
    </item>
    
  </channel>
</rss>