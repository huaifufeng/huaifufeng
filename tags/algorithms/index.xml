<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Algorithms on 怀府小阁</title>
    <link>http://blog.huaifufeng.com/tags/algorithms/</link>
    <description>Recent content in Algorithms on 怀府小阁</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Wed, 01 Jan 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="http://blog.huaifufeng.com/tags/algorithms/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>算法时间复杂度分析</title>
      <link>http://blog.huaifufeng.com/2020/01/post/%E7%AE%97%E6%B3%95%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%88%86%E6%9E%90.html</link>
      <pubDate>Wed, 01 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>http://blog.huaifufeng.com/2020/01/post/%E7%AE%97%E6%B3%95%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%88%86%E6%9E%90.html</guid>
      <description>算法时间复杂度分析 当我们实现完我们的代码时，我们需要对代码效率进行评估。常用的方法就是对代码的执行时间进行测试，这也是我们常用的方法，其中性能测试就是这样的方式。但是，这种方法有两个缺点：
 代码的执行效果受到硬件的影响。同样的代码在不同的机器上面执行的效果是不一样的，可能在一个机器上面a比b执行的快，但是在另一个机器上却相反。 代码的执行效果受到数据规模的影响。同样的代码在不同数据上的执行效果各不相同，也许O(n)的程序会比O(logn)的执行效果更好。  所以，我们就是用一种估算的方式来计算代码的执行效果，这样不会受到硬件和数据的影响，这就是大O时间分析法.
大O时间复杂度分析 大O时间复杂度分析就是一种评估程序随数据规模增长的趋势，详细名称是渐进式时间复杂度，检查时间复杂度。
我们看下下面代码的时间复杂度：
1 func sum(nums []int) int { 2 res := 0 3 n := len(nums) 4 for i :0 ; i &amp;lt; n; i++ { 5 res += nums[i] 6 } 7 8 return res 9 } 这里我们假设每行代码执行的时间是相同的(因为是预估的时间，这里可以这样假设)。
其中2、3、8行的复杂度分别是 1，4、5行的复杂度是n，这样我们中的复杂度就是n+2，表示起来就是O(n+2)因为常量的复杂度不会随n值得增加而变化，所以这里常量是可以省略的，这样这个方法的复杂度就是O(n)，其中n表示的是数组的长度。
这样我们就知道了大O时间复杂度的计算方法：就是统计方法每行代码的执行时间次数之和。就像上面一样，大O时间复杂度分析有一些规则：
  只关注执行次数最多的代码
就像上面，我们关系的是循环的代码，单独的一行代码可以不用考虑。具体到时间复杂度就是不需要关系常量执行次数的代码，不管是一次还是多次，只要不随n的值发生变化，都可以不考虑。
如果只有常量执行次数的代码，那么大O时间复杂度就是O(1)，这表示代码的执行和n没有任何关系，我们不需要关系执行多少次，只需要标记是常量次数就可以。
  只需要关注执行次数量级最多的代码
比如下面的代码：
for a:= 0; a &amp;lt; n; a++ { sum += a } for i := 0; i &amp;lt; n; i++ { for j := 0; j &amp;lt; n; j++ { sum += i } } 这段代码的时间复杂度安装之前的方法就是O(n²+n)。这里因为复杂度随n的变化，n²变化幅度比n大的多，所以我们只需要关系n²就可以，这就可以代表代码的效率变化了，也就是大O时间复杂度是O(n²)</description>
    </item>
    
  </channel>
</rss>