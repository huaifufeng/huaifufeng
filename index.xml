<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>怀府小阁</title>
    <link>http://blog.huaifufeng.com/</link>
    <description>Recent content on 怀府小阁</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Mon, 28 Jan 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="http://blog.huaifufeng.com/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Bash专业笔记(一)</title>
      <link>http://blog.huaifufeng.com/2019/01/post/bash-section-1.html</link>
      <pubDate>Mon, 28 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>http://blog.huaifufeng.com/2019/01/post/bash-section-1.html</guid>
      <description>开始Bash Hello World 交互shell Bash shell通常是使用其交互模式：这允许你输入和修改命令，当你按下Return键的时候，就会执行这些命令。大多数基于Unix和类Unix的操作系统都会使用Bash作为它们默认的shell（特别是Linux和macOS）。当终端打开的时候会自动的进入交互模式的Bash shell。
使用下面的方式输出一个Hello World：
$ echo &amp;quot;Hello World&amp;quot; #&amp;gt; Hello World # Output Example  注意点：
 你可以在终端中通过修改shell的名称来修改shell。比如：sh，bash等等 echo是Bash内建的一个命令，会把它接收到的参数输出到标准输出中。默认它会在输出的后面输出一个新行。  非交互shell Bash shell也可以在脚本中被按照非交互模式运行，当shell不需要人工操作时。交互的行为和非交互的行为都是唯一的：Unix V7 Bourne shell和其他的衍生shell 的一项重要设计原则。因此，任何在命令行中可以执行的命令都可以放到脚本中重复使用。
下面的步骤创建了一个Hello World脚本：
 创建一个叫hello-world.sh的文件。   $ touch hello-world.sh   为文件添加执行权限：chmod +x hello-world.sh
 添加下面的代码：
   #!/bin/bash echo &amp;quot;Hello World&amp;quot;  第一行：脚本的第一行必须以字符串#!开始，这被叫做 shebang。这个shebang通知操作系统去允许/bin/bash，并且把文件的路径作为参数传递给这个命令。像：/bin/bash hello-world.sh
第二行：使用echo命令把Hello world输出到标准输出。
 在命令行中执行hello-world.sh这个脚本可以使用下面的人一个方式：
 ./hello-world.sh 最常用的方法，也是最推荐的方法。 /bin/bash hello-world.sh bash hello-world.</description>
    </item>
    
    <item>
      <title>Git专业笔记（五）</title>
      <link>http://blog.huaifufeng.com/2019/01/post/git-section-5.html</link>
      <pubDate>Sun, 27 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>http://blog.huaifufeng.com/2019/01/post/git-section-5.html</guid>
      <description>忽略文件文件夹 这章的主题是介绍怎么避免把不想要的文件（或者文件的修改）添加到Git仓库内。有好几种方式可以实现这个目的：全局或者本地的.gitignore ，.git/exclude，git update-index --assume-unchanged，git update-index --skip-tree。但是请记住Git是用来管理内容的：忽略实际忽略的是文件夹的内容。一个空的文件夹将会被自动忽略，因为它不能不添加到仓库内。
.gitignore 你可以让Git通过添加一个或多个.gitignore文件来忽略某些文件或者文件夹，即不把这些内容通过Git来追踪。
在一些软件项目中，.gitignore文件会包含一列在构建程序或运行时产生的文件或文件夹。在.gitignore中，可能包含指向下面内容的名称或路径：
 临时资源，像缓存，log文件，编译文件等 不应该分享给其他人的配置文件 包含密码、秘钥、证书等隐秘信息的文件  当在顶层目录创建这个文件时，这些规则将会应用到这个仓库所有的文件和子目录。当在子目录创建时，这些规则只会应用到这个目录和这个目录子目录的文件中。
当一个文件或目录被忽略了，这代表：
 不会被Git库追踪。 不会再git status和git diff命令中输出处理。 不会通过git add -A命令暂存这些内容。  在一些特殊的场景下，你需要把已经追踪的文件忽略掉，这时你要特别小心。可以查看下面章节：忽略已提交内容。
例子： 下面是一些.gitignore中比较简单的例子，基于glob file patterns：
# Lines starting with `#` are comments. # Ignore files called &#39;file.ext&#39; file.ext # Comments can&#39;t be on the same line as rules! # The following line ignores files called &#39;file.ext # not a comment&#39; file.ext # not a comment # Ignoring files with full path.</description>
    </item>
    
    <item>
      <title>Git专业笔记（四）</title>
      <link>http://blog.huaifufeng.com/2019/01/post/git-section-4.html</link>
      <pubDate>Thu, 24 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>http://blog.huaifufeng.com/2019/01/post/git-section-4.html</guid>
      <description>暂存区 暂存所有文件 想要删除一个远端的分支：
$ git add -A  在Git 2.0+之后的版本
$ git add .  在版本2.x时，git add .命令将会添加当前目录及其子目录下的所有修改的文件。但是在1.x的版本，只会暂存新建或修改的文件，不会暂存删除的文件。
使用git add -A或者git add --all来存储所有修改的文件，不管在哪个版本都是有效的。
取消存储的修改文件 $ git reset &amp;lt;filePath&amp;gt;  添加大片修改 你可以看到大片的选项是怎么被存储的，通过使用patch选项：
$ git add -p  或者
$ git add --patch  这个命令将会打开一个交互界面，允许你查看修改，并且决定哪些内容去被存储起来：
Stage this hunk [y,n,q,a,d,/,s,e,?]?   y stage this hunk for the next commit n do not stage this hunk for the next commit q quit; do not stage this hunk or any of the remaining hunks a stage this hunk and all later hunks in the file d do not stage this hunk or any of the later hunks in the file g select a hunk to go to / search for a hunk matching the given regex j leave this hunk undecided, see next undecided hunk J leave this hunk undecided, see next hunk k leave this hunk undecided, see previous undecided hunk K leave this hunk undecided, see previous hunk s split the current hunk into smaller hunks e manually edit the current hunk ?</description>
    </item>
    
    <item>
      <title>Git专业笔记（三）</title>
      <link>http://blog.huaifufeng.com/2019/01/post/git-section-3.html</link>
      <pubDate>Mon, 21 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>http://blog.huaifufeng.com/2019/01/post/git-section-3.html</guid>
      <description>操作远端 删除远端分支 想要删除一个远端的分支：
$ git push [remote-name] --delete [branch-name]  或者
$ git push [remote-name] :[branch-name]  修改远端地址 查看已经存在的远端地址：
$ git remote -v # origin https://github.com/username/repo.git (fetch) # origin https://github.com/usernam/repo.git (push)  修改仓库的地址：
$ git remote set-url origin https://github.com/username/repo2.git # Change the &#39;origin&#39; remote&#39;s URL  查看验证新的远端地址：
$ git remote -v # origin https://github.com/username/repo2.git (fetch) # origin https://github.com/username/repo2.git (push)  远端列表 查看这个仓库关联的远端列表：
$ git remote  查看这个仓库关联的远端列表，包括这些远端的fetch和push的Url地址。
$ git remote --verbose  或者</description>
    </item>
    
    <item>
      <title>Git专业笔记（二）</title>
      <link>http://blog.huaifufeng.com/2019/01/post/git-section-2.html</link>
      <pubDate>Fri, 18 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>http://blog.huaifufeng.com/2019/01/post/git-section-2.html</guid>
      <description>查看历史    Parameter Explanation     -q, &amp;ndash;quiet Quiet, suppresses diff output   &amp;ndash;source Shows source of commit   &amp;ndash;use-mailmap Use mail map file (changes user info for committing user)   &amp;ndash;decorate[=&amp;hellip;] Decorate options   &amp;ndash;L &amp;lt; n,m:file&amp;gt; Show log for specific range of lines in a file, counting from 1. Starts from line n, goes to line m. Also shows diff.</description>
    </item>
    
    <item>
      <title>Git专业笔记（一）</title>
      <link>http://blog.huaifufeng.com/2019/01/post/git-section-1.html</link>
      <pubDate>Tue, 15 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>http://blog.huaifufeng.com/2019/01/post/git-section-1.html</guid>
      <description>开始学习Git 创建自己的项目，并添加、提交文件 首页在终端验证你是否已经安装有Git：
在所有的操作系统上，都可以使用下面的命令：
$ git --version  在类Unix系统还可以使用下面的命令：
$ which git  如果什么都没有返回，或者没有通过验证，这就表明你需要通过下载并运行安装程序，在你的系统上安装Git。查看Git官网，上面有特别详细和容易的安装教程。
安装完Git之后，在你真正的提交之前，还需要配置好你的名称和邮件地址。
一旦安装成功Git，你就可以到你希望进行版本管理的文件夹下，初始化一个空的Git仓库：
$ git init  这会创建一个隐藏的.git文件夹，用来存放Git工作需要的信息。
接下来检查下Git将把什么文件加入到仓库内，这是非常值得注意的，也是在添加、提交文件之前的必要操作：
$ git status  检查文件的列表，你可以告诉Git哪些文件你想进行版本的管理（避免将像密码这样的重要信息或者污染仓库的信息添加到Git仓库里面）：
$ git add &amp;lt;file/directory name #1&amp;gt; &amp;lt;file/directory name #2&amp;gt; &amp;lt; ... &amp;gt;  如果所有的文件你都想和能访问这个仓库的人分享，有一个简单的命令可以添加当前目录和当前目录子目录内的所有文件：
$ git add .  这将“暂存”所有的文件，等待将这些文件加入版本管理，准备在你的第一次提交中提交它们。
对于你不想添加到版本管理的文件，你可以在执行add之前命令创建一个名.gitignore的文件，并且填写里面的内容。
提交所有已经添加的文件，同时填写一个提交的注释信息：
$ git commit -m &amp;quot;Initial commit&amp;quot;  这使用提供的信息创建了一个新的提交。一个提交就像你整个项目的一个快照。现在你就可以把本地的文件push到远端的仓库内，如果有需要的时候，你可以重新返回这里。
如果你忽略了-m参数，你默认的编辑器将会打开，你可以在编辑器里面编辑并且保存提交信息。
添加远端仓库 想要添加一个新的远端仓库地址，你可以在你仓库所在的文件夹内，在终端内执行git remote add命令。
1. 一个远端的名称，比如```origin``` 2. 一个远端的URL地址，比如```https://&amp;lt;your-git-service-address&amp;gt;/user/repo.git``` ```shell $ git remote add origin https://&amp;lt;your-git-service-address&amp;gt;/owner/repository.</description>
    </item>
    
    <item>
      <title>Golang学习（二）</title>
      <link>http://blog.huaifufeng.com/2019/01/post/go-learn-2.html</link>
      <pubDate>Sat, 12 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>http://blog.huaifufeng.com/2019/01/post/go-learn-2.html</guid>
      <description>上一节简单介绍了Golang的基本含义和简单的例子，接下来就详细介绍一下使用Go开发需要的详细环境配置。主要是GOPATH等环境变量和一些很有效的工具。
环境配置 go语言一般需要设置三个环境变量：
 GOPATH：go的工作区，是我们代码的所在目录。 GOROOT：go的安装路径，即go的安装目录。不过在1.11之后已经不需要再配置这个路径了。 GOBIN：go生成的执行文件的目录，也不需要专门的配置，默认在GOPATH目录下的src/bin目录  GOPATH go语言的代码工作区目录，可以是一个目录，也可以是多个目录，go命令会按照多个目录的顺序依次搜索相应的目录，
GOPATH目录的基本结构如下，下面会有三个目录：
bin/ pkg/ src/   bin目录就是GOBIN默认对应的目录，存放编译后的可执行文件，一般不用单独在设置。 src是我们的代码目录文件，下面包含.go文件，就是go的源码文件。 pkg编译后的生成的静态库文件，和平台有关系，每个平台会有相应的目录。在linux下是扩展名为.a的文件。  使用go install会bin目录生成项目的执行文件，而go build会在当前目录生成项目的执行文件。
管理工具 我们自己在开发时，可能不同的项目会需要在不同版本的go下面执行，就需要在不同版本go下面进行切换，这里就介绍两款工具，方便我们管理不同版本的go；go的包管理工具
GVM 管理不同版本go的管理工具GVM。
安装 在终端执行下面的命令，因为我本地安装了oh-my-zsh，所以我这里就最开始是zsh，如果你本地是原生的bash，将zsh替换成bash就可以：
$ zsh &amp;lt; &amp;lt;(curl -s -S -L https://raw.githubusercontent.com/moovweb/gvm/master/binscripts/gvm-installer) Cloning from https://github.com/moovweb/gvm.git to /Users/test/.gvm Created profile for existing install of Go at &amp;quot;/usr/local/Cellar/go/1.11.4/libexec&amp;quot; Installed GVM v1.0.22 Please restart your terminal session or to get started right away run `source /Users/test/.gvm/scripts/gvm`  出现如上的信息就代表安装成功了，在安装下面的提示执行如下命令，激活gvm的命令：</description>
    </item>
    
    <item>
      <title>Golang学习（一）</title>
      <link>http://blog.huaifufeng.com/2019/01/post/go-learn-1.html</link>
      <pubDate>Sun, 06 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>http://blog.huaifufeng.com/2019/01/post/go-learn-1.html</guid>
      <description>作为一个PHP程序员，最近因为兴趣和业务的需要(学习了一个东西，如果不使用的话，忘记的速度会非常快)，开始接触golang这门语言，这里做下学习的笔记，这里是学习的第一步，简单介绍一下golang的一些基本信息。
简介 golang是一门谷歌开发并开源，和C++，java，c等一样的类c语言；一门静态、编译型语言。
该语言起源于2007年，于2009年正式的发布，目前在TIBOE中排行到19位。在各个地区尤其是国内拥有大量的使用，包括京东，七牛，B站等都有使用。
专注安全 golang在保留了C++的大部分语法，移除了其中指针运算，运算符重载等特性，同时增加了GC等新特性，拥有不输于C++的性能，是一门类型安全、内存安全的编程语言。
统一格式 golang强制要求语言的格式，让每个人的代码格式都是一致的，也许有人会不习惯，但是我觉得相同的语言格式对于代码的一致性，更容易理解别人的代码。
原生协程 为了更好的利用分布式和多核的计算机，实现了goroutine来达到这个目标，使用channel作为goroutine通信的工具。原生支持协程。简单的一个go func就可以实现协程。
易于开发 虽然具备不输于C++的性能，但是去除了一些C++的不良特性，增加gc。对于开发者来说，不用再考虑那些疑惑的特性，不用考虑内存的申请，更加关注于程序自身。
快速编译 golang的编译速度非常快，整个标准库一般在20s以下，自己的库一般也就几s就可以了，比c的编译速度更快，减少开发者等待编译的时间。
WebAssembly golang和WebAssembly强强联合，加入WASM的大家庭，允许编写可以在浏览器运营的程序，然后使用JavaScript调用wasm的文件，处理需要运算的功能，虽然目前还比较简单，但是值得期待。
等等，特性还有很多，我这只是列出一些比较有特色的特性。
Hello World! 任何语言的第一步都是Hello World!，我们也从这里开始。
安装 这里就直接使用mac环境介绍了，其他环境自行百度。
使用mac开发的，一般都已经安装好HomeworkBrew了，这里就直接执行命令就可以：
$ brew install go  安装网络的不同，等待的时间也不一样长，在命令行输入如下命令，就可以确定是否安装成功了:
$ go version  当输出类似go version go1.11.4 darwin/amd64的信息就代表安装成功了。
go一般会安装到如下目录：/usr/local/Cellar/go，目录下面是不同版本的目录。同时，会在/usr/local/bin下生成一个指向刚才目录下某个版本的go执行命令，
代码 环境安装成功之后，只是编写Hello World 的话，在任何目录下都可以。我们就直接在自己的家目录下编写第一个文件吧。
使用vim在命令行打开hello.go文件，然后输入如下内容：
package main import &amp;quot;fmt&amp;quot; func main() { fmt.Println(&amp;quot;Hello World!&amp;quot;) }  然后保存文件。
想要执行一个go文件，很简单，直接使用go run filename就可以，比如要执行hello.go文件，我们可以：
$ go run hello.go Hello World!  这我们就执行成功了，输出了我们想要的Hello World！</description>
    </item>
    
    <item>
      <title>Hugo&#43;GitHub搭建自己的blog</title>
      <link>http://blog.huaifufeng.com/2019/01/post/hugo-first.html</link>
      <pubDate>Tue, 01 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>http://blog.huaifufeng.com/2019/01/post/hugo-first.html</guid>
      <description>2019年新的开始，新年第一天的首个工作就是把blog搭了起来，之后就要坚持做下去了，保证一周能有一篇有货的文章，这个也是给自己提的一个邀请，每周要学习至少一个知识点，可以分享的知识点。
这个blog是用hugo搭建的，因为最近在学习go语言，所以就挑选了这个以go语音实现的静态网站生成工具，在以后就要看下hugo的源码了，希望能够学习并升级这个工具。下面就介绍一下hugo+github搭建自己的blog。
环境搭建 这里涉及到两个环境的配置Hugo静态网站生成器和GitHub代码托管网站的配置，下面分别介绍两个环境的配置过程。
Hugo环境搭建 Hugo是一个用golang语言实现的一个静态网站生成器，不只是用来生成blog，还可以用来生成商城，信息网站等。它最主要的特性就是快，安全。这里就介绍下安装方法。
Hugo支持目前市面上的操作系统，包括：Mac，Windows，Linux，OpenBSD，FreeBSD。我这里用的Mac电脑，就介绍下Mac的安装，其他的环境可以到Hugo安装页面查看相应的安装步骤。
1、首先确定你的电脑是否安装有Homebrew，这是一个mac的安装包管理工具，可以用来安装软件。
brew --version  如果输出了版本号，说明你的电脑已经安装了这个软件，否则就需要执行下面的命令进行安装。
/usr/bin/ruby -e &amp;quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&amp;quot;  然后重新输入上面的命令进行安装。
2、使用Homebrew安装Hugo
brew install hugo  安装完毕之后使用下面的命令验证：
hugo version  获取到版本号说明安装成功。
3、然后就可以使用过hugo的命令来生成网站，生成页面了。
首先生成网址，先到达你存放网站信息的地方，使用下面的命令生成网站的根目录文件夹example(替换为你自己的项目目录)：
hugo new site example  生成网站的目录结构如下：
. ├── archetypes ├── assets ├── config.toml //网站的配置文件 ├── content //网站内容的原始文件 ├── data ├── layouts ├── static └── themes //网站的模板文件  其他的我们暂时不关心，目前用到的是content，themes，config.toml
首先需要把我们的项目变成一个git项目，才可以进行下面的操作：
git init git add . git commit -m &#39;init&#39;  Hugo目前已经有了一批的模板，只需要到这个地址，就可以找到需要的模板了，我这个blog就是从中使用的模板。使用下面的命令就可以把一个模板下载到本地：</description>
    </item>
    
    <item>
      <title></title>
      <link>http://blog.huaifufeng.com/some/localhost-127.0.0.1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://blog.huaifufeng.com/some/localhost-127.0.0.1/</guid>
      <description>localhost 127.0.0.1
Localhost
特殊的DNS域名，分配给计算机本身使用。
不经网卡传输，不受网络防火墙和网卡相关设置的限制
访问localhost使用本机用户的权限去访问
127.0.0.1
通过网卡传输，依赖网卡，受网络防火墙和网卡设置限制
访问127.0.0.1 使用本机通过网络去访问本机，涉及到网络用户权限
访问本地程序时，使用localhost比较好，不占用网卡和网络资源
/etc/hosts
配置 127.0.0.1 localhost
不配做 ping localhost 不通</description>
    </item>
    
  </channel>
</rss>