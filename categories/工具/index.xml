<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>工具 on 怀府小阁</title>
    <link>http://blog.huaifufeng.com/categories/%E5%B7%A5%E5%85%B7/</link>
    <description>Recent content in 工具 on 怀府小阁</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Wed, 03 Apr 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="http://blog.huaifufeng.com/categories/%E5%B7%A5%E5%85%B7/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Bash专业笔记(六十六)</title>
      <link>http://blog.huaifufeng.com/2019/04/post/bash-section-66.html</link>
      <pubDate>Wed, 03 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>http://blog.huaifufeng.com/2019/04/post/bash-section-66.html</guid>
      <description>陷阱 赋值时空格 赋值时出现空格：
foo = &#39;bar&#39; # incorrect foo= &#39;bar&#39; # incorrect foo=&#39;bar&#39; # correct  前两个会出现语法错误(或者执行一个错误的命令)。最后一个会正确的为变量foo设置值bar。
失败的命令不停止脚本执行 在大多数的脚本语言中，如果一个函数错了，将会抛出一个异常并且终止程序的执行。Bash没有异常，但是有退出码。一个非零的退出码代表出现了错误，但是这并不会终止程序的执行。
这可能会导致危险（尽管诚然是人为的）情况，如：
#!/bin/bash cd ~/non/existent/directory rm -rf *  如果cd命令失败了，Bash会忽略失败，并且继续执行下面的命令。将会清除你运行命令文件夹的所有文件。
最好的方法是使用set命令：
#!/bin/bash set -e cd ~/non/existent/directory rm -rf *  set -e告诉Bash如果遇到一个非零的返回值，直接终端执行。
缺少文件中的最后一行 C标准规定文件要以新行结束，所以如果EOF出现在行尾，那么某些命令可能不会遗漏这行。例如：
$ echo &#39;one\ntwo\nthree\c&#39; &amp;gt; file.txt $ cat file.txt one two three $ while read line ; do echo &amp;quot;line $line&amp;quot; ; done &amp;lt; file.txt one two  想要修复这个问题的话，就测试最后一行是否为空，不为空继续执行：</description>
    </item>
    
    <item>
      <title>Bash专业笔记(六十五)</title>
      <link>http://blog.huaifufeng.com/2019/04/post/bash-section-65.html</link>
      <pubDate>Tue, 02 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>http://blog.huaifufeng.com/2019/04/post/bash-section-65.html</guid>
      <description>设计模式 在bash中完成一些常见的设计模式。
发布订阅模式 当项目变为一个库时，添加新功能会变得很困难。函数名、变量和参数通常需要在使用它们的脚本中进行更改。在这样的场景中，分离代码并使用事件驱动的设计模式是很有帮助的。在所述模式中，外部脚本可以订阅事件。当触发（发布）该事件时，脚本可以执行它在该事件中注册的代码。
pubsub.sh #!/usr/bin/env bash # # Save the path to this script&#39;s directory in a global env variable # DIR=&amp;quot;$( cd &amp;quot;$( dirname &amp;quot;${BASH_SOURCE[0]}&amp;quot; )&amp;quot; &amp;amp;&amp;amp; pwd )&amp;quot; # # Array that will contain all registered events # EVENTS=() function action1() { echo &amp;quot;Action #1 was performed ${2}&amp;quot; } function action2() { echo &amp;quot;Action #2 was performed&amp;quot; } # # @desc :: Registers an event # @param :: string $1 - The name of the event.</description>
    </item>
    
    <item>
      <title>Bash专业笔记(六十四)</title>
      <link>http://blog.huaifufeng.com/2019/04/post/bash-section-64.html</link>
      <pubDate>Mon, 01 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>http://blog.huaifufeng.com/2019/04/post/bash-section-64.html</guid>
      <description>解码URL 简单例子 编码URL
 http%3A%2F%2Fwww.foo.com%2Findex.php%3Fid%3Dqwerty
 使用命令解码URL
echo &amp;quot;http%3A%2F%2Fwww.foo.com%2Findex.php%3Fid%3Dqwerty&amp;quot; | sed -e &amp;quot;s/%\([0-9A-F][0-9A- F]\)/\\\\\x\1/g&amp;quot; | xargs -0 echo -e  输出：
 http://www.foo.com/index.php?id=qwerty
 使用printf解码字符串 #!bin/bash $ string=&#39;Question%20- %20%22how%20do%20I%20decode%20a%20percent%20encoded%20string%3F%22%0AAnswer%20%20%20- %20Use%20printf%20%3A)&#39; $ printf &#39;%b\n&#39; &amp;quot;${string//%/\\x}&amp;quot; # the result Question - &amp;quot;how do I decode a percent encoded string?&amp;quot; Answer - Use printf :)  参考：Bash Notes for Professionals book</description>
    </item>
    
    <item>
      <title>Bash专业笔记(六十三)</title>
      <link>http://blog.huaifufeng.com/2019/03/post/bash-section-63.html</link>
      <pubDate>Sun, 31 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>http://blog.huaifufeng.com/2019/03/post/bash-section-63.html</guid>
      <description>Parallel    选项 详情     -j n 同时运行n个任务   -k 保持相同的顺序   -X 上下文替换的多个参数   —colsep regexp 在regexp上拆分输入以进行位置替换   {} {.} {/} {/.} {#} 替换字符串   {3} {3.} {3/} {3/.} 位置替换字符串   -S sshlogin 例如 foo@server.example.com   —trc {} .bar —transfer —return {}.bar —cleanup的简短格式   &amp;ndash;onall 在所有sshlogins上运行带有参数的给定命令   &amp;ndash;nonall 在所有sshlogins上运行没有带参数的给定命令   &amp;ndash;pipe 将stdin（标准输入）拆分为多个任务   —recend str 记录&amp;ndash;pipe的结束分隔符。   —recstart str 记录—pipe的开始分隔符。    GUN Linux上面的任务可以使用GNU parallel并行执行。一个任务可以是一个命令或需要运行输入每行的小脚本。特别的输入就是一列文件，一列host，一列用户，一列URL，一列表等。一个任务也可以是从管道中读取的命令。</description>
    </item>
    
    <item>
      <title>Bash专业笔记(六十二)</title>
      <link>http://blog.huaifufeng.com/2019/03/post/bash-section-62.html</link>
      <pubDate>Sat, 30 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>http://blog.huaifufeng.com/2019/03/post/bash-section-62.html</guid>
      <description>bash网络操作 Bash通常用于服务器和集群的管理和维护工作。与网络操作使用的典型命令有关的信息，何时使用哪个命令用于哪个目的，以及应包括其独特和/或有趣应用程序的示例/示例。
网络命令 ifconfig  上面的命令会显示机器所有活动的接口，提供下面的信息：
 接口的IP地址 接口的MAC地址 广播地址 发送和接收字节  一些例子：
ifconfig -a  上面的例子也会显示无效的接口。
ifconfig eth0  上面的命令将会只显示eth0接口。
ifconfig etho0 192.168.1.100 netmask 255.255.255.0  上面的命令将会把静态ip地址赋值给eth0接口。
ifup ehth0  上面的命令会开启eth0
ifdown eth0  上面的命令会禁止eth0接口
ping  上面的命令(Packet Internet Grouper)用于测试两个节点之间的链接。
ping -c2 8.8.8.8  上面的命令将ping或测试与谷歌服务器的连接2秒
traceroute  以上命令用于故障排除，以找出到达目的地所花费的跳数。
netstat  上面的命令将会获取连接信息和他们的状态
dig www.baidu.com  上面的命令(域信息分组器)查询DNS相关信息
nslookup www.baidu.com  上面的命令查询DNS信息，并找出网站名称对应的IP地址。
route  上面的命令用来检测网络路由信息。只是显示你的路由表。
router add default gw 192.168.1.1 eth0  上面的命令会将eth0接口的默认网络路由添加到路由表192.</description>
    </item>
    
    <item>
      <title>Bash专业笔记(六十一)</title>
      <link>http://blog.huaifufeng.com/2019/03/post/bash-section-61.html</link>
      <pubDate>Fri, 29 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>http://blog.huaifufeng.com/2019/03/post/bash-section-61.html</guid>
      <description>eval命令 首先最重要的是：知道你正在做什么。第二，虽然你应该避免使用eval，但是它的使用让代码更加干净，那就继续使用。
使用eval 例如，考虑将$@的内容设置为给定变量的内容：
a=(1 2 3) eval set -- &amp;quot;${a[@]}&amp;quot;  这个代码通常伴随着getopt或getopts将$@设置为上述选项分析器的输出。但是你也可以用这个创建一个简单的pop函数，这个函数可以简单的直接操作变量，而不用将变量存储在原始变量中：
isnum() { # is argument an integer? local re=&#39;^[0-9]+$&#39; if [[ -n $1 ]]; then [[ $1 =~ $re ]] &amp;amp;&amp;amp; return 0 return 1 else return 2 fi } isvar() { if isnum &amp;quot;$1&amp;quot;; then return 1 fi local arr=&amp;quot;$(eval eval -- echo -n &amp;quot;\$$1&amp;quot;)&amp;quot; if [[ -n ${arr[@]} ]]; then	return 0 fi return 1 } pop() { if [[ -z $@ ]]; then return 1 fi local var= local isvar=0 local arr=() if isvar &amp;quot;$1&amp;quot;; then # let&#39;s check to see if this is a variable or just a bare array var=&amp;quot;$1&amp;quot; isvar=1 arr=($(eval eval -- echo -n &amp;quot;\${$1[@]}&amp;quot;)) # if it is a var, get its contents else arr=($@) fi # we need to reverse the contents of $@ so that we can shift # the last element into nothingness arr=($(awk &amp;lt;&amp;lt;&amp;lt;&amp;quot;${arr[@]}&amp;quot; &#39;{ for (i=NF; i&amp;gt;1; --i) printf(&amp;quot;%s &amp;quot;,$i); print $1; }&#39; # set $@ to ${arr[@]} so that we can run shift against it.</description>
    </item>
    
    <item>
      <title>Bash专业笔记(六十)</title>
      <link>http://blog.huaifufeng.com/2019/03/post/bash-section-60.html</link>
      <pubDate>Thu, 28 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>http://blog.huaifufeng.com/2019/03/post/bash-section-60.html</guid>
      <description>select关键字 select关键字可以用来在菜单格式中获取输入参数。
获取参数 假设你想要用户选择菜单的关键字，你可以创建下面类似的脚本：
#! /usr/bin/env bash select os in &amp;quot;linux&amp;quot; &amp;quot;windows&amp;quot; &amp;quot;mac&amp;quot; do echo &amp;quot;{$os}&amp;quot; break done  解析：这里select关键字循环元素列表，在命令行的提示中显示这些元素，以供用户选择。注意break关键字将会中断循环，一旦用户做了选择。否则循环将不会结束。
结果：一旦开始运行脚本，菜单的选项将会显示，用户将被提示进行一个选择，一旦选择了，这个值将会显示，并且返回命令提示。
&amp;gt;bash select_menu.sh 1) linux 2) windows 3) mac #? 3 mac &amp;gt;  参考：Bash Notes for Professionals book</description>
    </item>
    
    <item>
      <title>Bash专业笔记(五十九)</title>
      <link>http://blog.huaifufeng.com/2019/03/post/bash-section-59.html</link>
      <pubDate>Wed, 27 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>http://blog.huaifufeng.com/2019/03/post/bash-section-59.html</guid>
      <description>CGI脚本 请求方法：GET 使用GET请求一个CGI脚本是非常方便的。
首先你需要脚本的encoded url。然后你在变量后面添加?。
 每个变量有=分割的两个部分。第一部分是对每个变量唯一的值，第二部分是变量的值
 变量使用&amp;amp;分隔
 字符串的总长度不要超过255个字符
 变量的名称和值需要是html编码的(替换&amp;lt;/ /?:@&amp;amp;=+$)
  注意：当使用html表格时，请求方法可以自己产生。使用Ajax你可以使用encodeURI和encodeURIComponent来编码信息
例子：
http://www.example.com/cgi-bin/script.sh?var1=Hello%20World!&amp;amp;var2=This%20is%20a%20Test.&amp;amp;  服务器只能通过跨源资源共享(CORS)来进行请求，这样请求更加安全。在这个例子中，我们使用CORS来确定使用的数据类型。
有多中数据类型我们可以选择，通常是：
 text/html text/plain application/json  当发生一个请求，服务器会创建很多环境变量。现在最重要的环境变量是$REQUEST_METHOD和$QUERY_STRING
这里REQUEST_METHOD必须是GET。这个QUERY_STRING`包含所有html编码的数据。
#!/bin/bash # CORS is the way to communicate, so lets response to the server first echo &amp;quot;Content-type: text/html&amp;quot; # set the data-type we want to use echo &amp;quot;&amp;quot; # we don&#39;t need more rules, the empty line initiate this. # CORS are set in stone and any communication from now on will be like reading a html-document.</description>
    </item>
    
    <item>
      <title>Bash专业笔记(五十八)</title>
      <link>http://blog.huaifufeng.com/2019/03/post/bash-section-58.html</link>
      <pubDate>Tue, 26 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>http://blog.huaifufeng.com/2019/03/post/bash-section-58.html</guid>
      <description>全局和本地变量 默认的，你在脚本中声明的自己的变量，在每个方法，脚本甚至shell外部都是全局的。
如果你想要变量是方法本地的，在方法内部使用local关键字，这些值将只能在方法中访问。
全局变量 var=&amp;quot;hello&amp;quot; function foo(){ echo $var } foo  将会输出&amp;rdquo;hello&amp;rdquo;。这在另一种方式也是可以的：
function foo() { var=&amp;quot;hello&amp;quot; } foo echo $var  将也会输出&amp;rdquo;hello&amp;rdquo;
本地变量 function foo(){ local var var = &amp;quot;hello&amp;quot; } foo echo var  将什么都不会输出，var是方法内部的变量，在方法外部是不可见的。
混合使用 var=&amp;quot;hello&amp;quot; function foo() { local var=&amp;quot;sup?&amp;quot; echo &amp;quot;inside function, var=$var&amp;quot; } foo echo &amp;quot;outside function, var=$var&amp;quot;  将会输出：
inside function, var=sup? outside function, var=hello  参考：Bash Notes for Professionals book</description>
    </item>
    
    <item>
      <title>Bash专业笔记(五十七)</title>
      <link>http://blog.huaifufeng.com/2019/03/post/bash-section-57.html</link>
      <pubDate>Mon, 25 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>http://blog.huaifufeng.com/2019/03/post/bash-section-57.html</guid>
      <description>cut命令    选项 详情     -b LIST, —bytes=LIST 打印LIST参数中的字节列表   -c LIST, —characters=LIST 打印参数LIST中指定位置的字符   -f LIST, —fields=LIST 打印字段或者列   -d DELIMITER 用来分割字段或列    在Bash，cut命令用来把文件分割到小的部分。
显示文件第一列 假设你有像下面的文件
John Smith 31 Robert Jones 27 ...  这个文件有空格分割的3列。值选择第一列使用下面的命令：
cut -d &#39; &#39; -f1 filename  这里-d标识指定了分隔符，或者什么分割了结果。f标识指定获取的列或自动的数。这将会输出下面的结果：
John Robert ...  显示文件x-y的列表 有时候，需要显示一个文件的指定范围的列。假设你有
Apple California 2017 1.00 47 Mango Oregon 2015 2.30 33  选择前3列表：</description>
    </item>
    
    <item>
      <title>Bash专业笔记(五十六)</title>
      <link>http://blog.huaifufeng.com/2019/03/post/bash-section-56.html</link>
      <pubDate>Sun, 24 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>http://blog.huaifufeng.com/2019/03/post/bash-section-56.html</guid>
      <description>Windows 10的bash readme 最简单的在Windows上使用Bash的方式是按照Windows版本的Git。这带有Git Bash，这是一个真正的Bash。你可以使用下面的顺序打开
Start &amp;gt; All Programs &amp;gt; Git &amp;gt; Git Bash
命令像grep ls find sed vi等等都是可以使用的
参考：Bash Notes for Professionals book</description>
    </item>
    
    <item>
      <title>Git专业笔记（六十一）</title>
      <link>http://blog.huaifufeng.com/2019/03/post/git-section-61.html</link>
      <pubDate>Sun, 24 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>http://blog.huaifufeng.com/2019/03/post/git-section-61.html</guid>
      <description>diff-tree 比较通过两个树对象找到的blob的内容和模式。
获取指定提交的文件修改 git diff-tree --no-commit-id --name-only -r COMMIT_ID  使用 git diff-tree [--stdin] [-m] [-c] [--cc] [-s] [-v] [--pretty] [-t] [-r] [--root] [&amp;lt;common-diff- options&amp;gt;] &amp;lt;tree-ish&amp;gt; [&amp;lt;tree-ish&amp;gt;] [&amp;lt;path&amp;gt;...]     选项 含义     -r 递归的进行diff   &amp;ndash;root 包括初始提交作为/dev/null的diff    选项    选项 详情     -z 输出diff-raw，以NUL结尾   -p 输出补丁格式   -u -p的别名   —patch-with-raw 输出补丁和diff-raw格式   &amp;ndash;stat 显示diffstat而不是patch。   &amp;ndash;numstat 显示数字diffstat而不是patch。   —patch-with-stat 输出一个补丁并预先准备其diffstat。   —name-only 显示修改文件的名称   —name-status 显示修改文件的名称和状态   —full-index 在索引行显示完整的对象名称   —abbrev= 在对象名称的缩写版本的树和区分RAW头。   -R 交换输入文件对。   -B 检测完全重写。   -M 检查重命名   -C 检查复制   —find-copies-harder 尝试将未更改的文件作为副本检测的候选文件。   -l 将重命名尝试限制为最多个路径。   -O 根据重新排序差异。   -S 查找仅一侧包含字符串的文件对。   —pickaxe-all 使用-s并找到hit时显示所有文件diff。   -a —text 把所有的文件当做字符串    参考：Git® Notes for Professionals book</description>
    </item>
    
    <item>
      <title>Bash专业笔记(五十五)</title>
      <link>http://blog.huaifufeng.com/2019/03/post/bash-section-55.html</link>
      <pubDate>Sat, 23 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>http://blog.huaifufeng.com/2019/03/post/bash-section-55.html</guid>
      <description>cut命令    转义符 含义     -f, —fields 基于字段的选择   -d, —delimiter 基于字段选择的分隔符   -c, —characters 基于字符选择，分隔符忽略或者错误   -s, —only-delimited 禁止使用不带分隔符的行（按其他方式打印）   —complemment 反向选择（提取除指定字段/字符之外的所有字段/字符   —output-delimiter 指定它必须与输入分隔符不同的时间    cut命令是快速提前文本文件行的部分的方法。这是最老的Unix命令之一。它最流行的实现是Linux上的GUN版本，MacOS的FreeBSD版本。但是Unix的每种风格都有自己的特色。查看下面的不同。输入的行或者从标准输入读取，或者从命令行的参数列出的文件的读取。
只有一个分隔符 你不能拥有大于一个的的分隔符。如果你指定了像-d &amp;quot;,;:&amp;quot;，一些实现中只会使用第一个字符作为分隔符(这里，是逗号)。其他的一些实现(像GNU cut)会出现错误信息。
$ cut -d &amp;quot;,;:&amp;quot; -f2 &amp;lt;&amp;lt;&amp;lt;&amp;quot;J.Smith,1 Main Road,cell:1234567890;land:4081234567&amp;quot; cut: the delimiter must be a single character Try `cut --help&#39; for more information.  重复分隔符任务是空字符 $ cut -d, -f1,3 &amp;lt;&amp;lt;&amp;lt;&amp;quot;a,,b,c,d,e&amp;quot; a,b	 是相当明显的，但是使用空格分隔符，对某些人来说可能不太明显。</description>
    </item>
    
    <item>
      <title>Git专业笔记（六十）</title>
      <link>http://blog.huaifufeng.com/2019/03/post/git-section-60.html</link>
      <pubDate>Sat, 23 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>http://blog.huaifufeng.com/2019/03/post/git-section-60.html</guid>
      <description>整理本地和远程存储库 删除远端已删除的分支 要在本地和已删除的远程分支之间进行远程跟踪，请使用
git fetch -p  然后你可以使用
git branch -vv  来查看哪些分支没有被追踪。
那些还没有被追踪的分支将会向下面这样，包含&amp;rsquo;gone&amp;rsquo;：
branch 12345e6 [origin/branch: gone] Fixed bug  你可以组合使用上面的命令，查找git branch -vv中返回的gone的分支，并使用-d删除这些分支：
git fetch -p &amp;amp;&amp;amp; git branch -vv | awk &#39;/: gone]/{print $1}&#39; | xargs git branch -d  参考：Git® Notes for Professionals book</description>
    </item>
    
    <item>
      <title>Bash专业笔记(五十四)</title>
      <link>http://blog.huaifufeng.com/2019/03/post/bash-section-54.html</link>
      <pubDate>Fri, 22 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>http://blog.huaifufeng.com/2019/03/post/bash-section-54.html</guid>
      <description>处理系统提示    转义符 含义     \a 响铃字符   \d 日期，&amp;rdquo;Weekday Month Date&amp;rdquo;这种格式的(像&amp;rdquo;Tue May 26&amp;rdquo;)   \D{FORMAT} 这个FORMAT是传给strftime(3)，并且结果插入提示字符串。一个空的FORMAT导致特定于区域设置的时间表示。花括号是必须的   \e 转义符。\ 033当然也可以。   \h 主机名，知道第一个.(就是没有域的部分)   \H 带有域部分的主机名称   \j 这个shell当前关联的任务数量   \l shell的终端设备名称的根目录   \n 新行   \r 回车符   \s shell的名称，基名是&amp;rdquo;$0&amp;rdquo;(最后一个斜杠后面的部分)   \t 24小时格式的时间，HH:MM:SS   \T 12小时格式的时间，HH:MM:SS   @ 12小时格式的时间， am/pm   \A 24小时的时间，HH:MM   \u 当前用户的用户名   \v Bash的版本(2.</description>
    </item>
    
    <item>
      <title>Git专业笔记（五十九）</title>
      <link>http://blog.huaifufeng.com/2019/03/post/git-section-59.html</link>
      <pubDate>Fri, 22 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>http://blog.huaifufeng.com/2019/03/post/git-section-59.html</guid>
      <description>git标签 像大多数的版本控制工具，git可以把历史中某个提交定义为重要的。特别是用户使用这个功能来标记发版点(v1.0等)。
列出所有的tag 使用git tag可以列出所有有效的tag：
$ git tag &amp;lt;output follows&amp;gt; v0.1 v1.3   注意：这里tag是按照字符顺序输出的。
 也可以搜索指定的tag：
$ git tag -l &amp;quot;v1.8.5*&amp;quot; &amp;lt;output follows&amp;gt; v1.8.5 v1.8.5-rc0 v1.8.5-rc1 v1.8.5-rc2 v1.8.5-rc3 v1.8.5.1 v1.8.5.2 v1.8.5.3 v1.8.5.4 v1.8.5.5  创建并push标签 创建标签  在当前分支创建tag
git tag &amp;lt;tagname&amp;gt;   这将在当前分支的当前状态创建一个tag
 在某些提交上创建tag
git tag tag-name commit-identifier   这将在commit-identifier的提交上创建tag。
push tag  push单独的标签
git push origin tag-name  一次push所有的tag
git push origin --tags   参考：Git® Notes for Professionals book</description>
    </item>
    
    <item>
      <title>Bash专业笔记(五十三)</title>
      <link>http://blog.huaifufeng.com/2019/03/post/bash-section-53.html</link>
      <pubDate>Thu, 21 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>http://blog.huaifufeng.com/2019/03/post/bash-section-53.html</guid>
      <description>特定时间的任务 在特定时间执行一次任务 注意：at默认没有在大多数的发行版中安装。
想要只当前时间之外的某个时间执行一些任务，在例子中是下午5点，你可以向下面这样：
echo &amp;quot;somecommand &amp;amp;&amp;quot; | at 5pm  如果你想要获取命令的输出，你可以像往常一样：
echo &amp;quot;somecommand &amp;gt; out.txt 2&amp;gt;err.txt &amp;amp;&amp;quot; | at 5pm  at理解非常多的时间格式，所以你也可以像下面这样：
echo &amp;quot;somecommand &amp;amp;&amp;quot; | at now + 2 minutes echo &amp;quot;somecommand &amp;amp;&amp;quot; | at 17:00 echo &amp;quot;somecommand &amp;amp;&amp;quot; | at 17:00 Jul 7 echo &amp;quot;somecommand &amp;amp;&amp;quot; | at 4pm 12.03.17  如果没有指定年月日的话，这将会在下次遇到这个时间的时候执行。所以如果你提供了一个之前的时间，将会在明天执行。如果你提供了之前的月份，那将会在下一年才会执行。
这也会和nohup联合使用，想你期望的一样：
echo &amp;quot;nohup somecommand &amp;gt; out.txt 2&amp;gt;err.txt &amp;amp;&amp;quot; | at 5pm  有更多的控制命令执行时间的命令:
 atq列出所有的时间任务 atrm移除一个时间任务 batch像at命令一样，但是只在系统的负载在0.</description>
    </item>
    
    <item>
      <title>Git专业笔记（五十八）</title>
      <link>http://blog.huaifufeng.com/2019/03/post/git-section-58.html</link>
      <pubDate>Thu, 21 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>http://blog.huaifufeng.com/2019/03/post/git-section-58.html</guid>
      <description>修改git仓库名称 如果你在远端修改了仓库的名称，就像在github或bitbucket。当你推送已经存在的代码时，将会出现错误：Fatal error, repository not found**.
修改本地仓库 在终端中：
cd projectFolder git remote -v (it will show previous git url) git remote set-url origin https://username@bitbucket.org/username/newName.git git remote -v (double check, it will show new git url) git push (do whatever you want.)  参考：Git® Notes for Professionals book</description>
    </item>
    
    <item>
      <title>Bash专业笔记(五十二)</title>
      <link>http://blog.huaifufeng.com/2019/03/post/bash-section-52.html</link>
      <pubDate>Wed, 20 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>http://blog.huaifufeng.com/2019/03/post/bash-section-52.html</guid>
      <description>变量类型 声明弱类型变量 declare是bash的内部变量。经常用来显示和定义变量或显示函数体。
语法：`declare [options] [name[=value]]&amp;hellip;
# options are used to define # an integer declare -i myInteger declare -i anotherInt=10 # an array with values declare -a anArray=( one two three) # an assoc Array declare -A assocArray=( [element1]=&amp;quot;something&amp;quot; [second]=anotherthing ) # note that bash recognizes the string context within [] # some modifiers exist # uppercase content declare -u big=&#39;this will be uppercase&#39; # same for lower case declare -l small=&#39;THIS WILL BE LOWERCASE&#39; # readonly array declare -ra constarray=( eternal true and unchangeable ) # export integer to environment declare -xi importantInt=42  也可以使用+来移除给定的属性。基本没有用处，只是为了完整性。</description>
    </item>
    
    <item>
      <title>Git专业笔记（五十七）</title>
      <link>http://blog.huaifufeng.com/2019/03/post/git-section-57.html</link>
      <pubDate>Wed, 20 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>http://blog.huaifufeng.com/2019/03/post/git-section-57.html</guid>
      <description>git重排 rerere(重复使用记录解决方案)允许你告诉git记住你是如何解决一个大块冲突的。这允许当下次遇到同样的冲突是可以自动的解决这个冲动。
启用rerere 可以使用下面的命令启用rerere:
$ git config --global rerere.enabled true  这个可以在指定仓库中运行，也可以在全局配置中。
参考：Git® Notes for Professionals book</description>
    </item>
    
    <item>
      <title>Bash专业笔记(五十一)</title>
      <link>http://blog.huaifufeng.com/2019/03/post/bash-section-51.html</link>
      <pubDate>Tue, 19 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>http://blog.huaifufeng.com/2019/03/post/bash-section-51.html</guid>
      <description>协同进程 Hello World # create the co-process coproc bash # send a command to it (echo a) echo &#39;echo Hello World&#39; &amp;gt;&amp;amp;&amp;quot;${COPROC[1]}&amp;quot; # read a line from its output read line &amp;lt;&amp;amp;&amp;quot;${COPROC[0]}&amp;quot; # show the line echo &amp;quot;$line&amp;quot;  输出&amp;rdquo;Hello World&amp;rdquo;
参考：Bash Notes for Professionals book</description>
    </item>
    
    <item>
      <title>Git专业笔记（五十六）</title>
      <link>http://blog.huaifufeng.com/2019/03/post/git-section-56.html</link>
      <pubDate>Tue, 19 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>http://blog.huaifufeng.com/2019/03/post/git-section-56.html</guid>
      <description>git客户端的hooks 和很多其他的版本控制系统一样，Git有一种当某些重要行为发生的时候执行自定义脚本的功能。有两种这样的hooks：客户端的和服务器端的。客户端的hook通常当提交和合并的时候触发执行，而服务器端的hook通常当遇到网络操作(如接收到push的提交)触发。你可以出于各种原因使用这些钩子。
pre-push hook pre-push脚本会在git push调用并且检查远端状态之后执行，但是在任何东西push之前。如果脚本存在，并且返回了一个非零的值，那么什么都不会push。
这个hook使用下面的参数被调用：
$1 -- Name of the remote to which the push is being done (Ex: origin) $2 -- URL to which the push is being done (Ex: https://://.git)  有关正在推送的提交的信息以行的形式提供给表单中的标准输入：
 &amp;lt;local_ref&amp;gt; &amp;lt;local_sha1&amp;gt; &amp;lt;remote_ref&amp;gt; &amp;lt;remote_sha1&amp;gt;  例子：
local_ref = refs/heads/master local_sha1 = 68a07ee4f6af8271dc40caae6cc23f283122ed11 remote_ref = refs/heads/master remote_sha1 = efd4d512f34b11e3cf5c12433bbedd4b1532716f  下面的示例是从默认的pre-push.sample中获取的pre-push脚本，该脚本是在使用git init初始化新存储库时自动创建的。
# This sample shows how to prevent push of commits where the log message starts # with &amp;quot;WIP&amp;quot; (work in progress).</description>
    </item>
    
    <item>
      <title>Bash专业笔记(五十)</title>
      <link>http://blog.huaifufeng.com/2019/03/post/bash-section-50.html</link>
      <pubDate>Mon, 18 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>http://blog.huaifufeng.com/2019/03/post/bash-section-50.html</guid>
      <description>脚本输出修改格式 color-output.sh 在bash脚本的开头部分，可以定义一些变量，这些变量在脚本运行期间充电帮助器来对终端的输出进行着色或格式化。
不同的平台使用不同的字符序列来表示颜色。然而有一个叫做tput的工具：在任何类Unix的系统上面，返回指定系统的终端颜色字符串通过一个跨平台的API。
例如，获取终端文本红色或绿色的字符串序列到变量中：
 red=$(tput setaf 1) green=$(tput setaf 2)  或者，要存储将文本重置为默认外观的字符序列：
reset=$(tput sgr0)  然后，当BASH脚本想要显示不同的颜色和输出是，可以像下面这样：
echo &amp;quot;${green}Success!${reset}&amp;quot; echo &amp;quot;${red}Failure.${reset}&amp;quot;  参考：Bash Notes for Professionals book</description>
    </item>
    
    <item>
      <title>Git专业笔记（五十五）</title>
      <link>http://blog.huaifufeng.com/2019/03/post/git-section-55.html</link>
      <pubDate>Mon, 18 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>http://blog.huaifufeng.com/2019/03/post/git-section-55.html</guid>
      <description>Bash显示分支名 这个文档解决git的分支名称在Bash终端显示的问题。开发者经常需要查看当前的分支名称。我们可以显示当前目录中的git分支名称。
终端的分支名 什么是PS1 PS1表示提示字符串1(Prompt String 1)。这是Linux/UNIX中shell的一个提示字符串。当你打开终端的时候，将会在你的bash提示中显示PS1中的内容。为了在bash提示中增加分支名称，我们需要修改PS1变量(在~/.bash_profile中设置PS1的值)。
显示分支名 在~/.bash_profile中添加下面的内容：
git_branch() { git branch 2&amp;gt; /dev/null | sed -e &#39;/^[^*]/d&#39; -e &#39;s/* \(.*\)/ (\1)/&#39; } export PS1=&amp;quot;\u@\h \[\033[32m\]\w\[\033[33m\]\$(git_branch)\[\033[00m\] $ &amp;quot;  这个git_branch方法或拿到我们当前的分支名称。一但我们做了这个修改，我们切换到一个git仓库，我们就可以看到仓库当前的分支名称。
参考：Git® Notes for Professionals book</description>
    </item>
    
    <item>
      <title>Bash专业笔记(四十九)</title>
      <link>http://blog.huaifufeng.com/2019/03/post/bash-section-49.html</link>
      <pubDate>Sun, 17 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>http://blog.huaifufeng.com/2019/03/post/bash-section-49.html</guid>
      <description>shell类型 开启一个交互shell bash  检查shell类型 shopt -q login_shell &amp;amp;&amp;amp; echo &#39;login&#39; || echo &#39;not-login&#39;  点文件 在Unix中，以.开头的文件或目录包含了指定程序或一系列程序的配置选项。点文件通常对用户是隐藏的，所以你需要使用ls -a来查看这些文件。
一个点文件的例子是.bash_history，假设用户使用Bash，包含了最近执行的命令。
当你在Bash中时，有各种文件是被source的。下面的图片来自这个站点，显示了在启动时选择要源文件的决策过程。
参考：Bash Notes for Professionals book</description>
    </item>
    
    <item>
      <title>Git专业笔记（五十四）</title>
      <link>http://blog.huaifufeng.com/2019/03/post/git-section-54.html</link>
      <pubDate>Sun, 17 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>http://blog.huaifufeng.com/2019/03/post/git-section-54.html</guid>
      <description>修改引用中对象名称 修改引用中对象名称 使用 修改引用中的对象名称
语法 git update-ref [-m &amp;lt;reason&amp;gt;] (-d &amp;lt;ref&amp;gt; [&amp;lt;oldvalue&amp;gt;] | [--no-deref] [--create-reflog] &amp;lt;ref&amp;gt; &amp;lt;newvalue&amp;gt; [&amp;lt;oldvalue&amp;gt;] | --stdin [-z])  普通语法  取消符合引用，修改分支头到新的对象
git update-ref HEAD &amp;lt;newvalue&amp;gt;  验证引用中当前只和oldvalue匹配后，修改newvalue到引用中
git update-ref refs/head/master &amp;lt;newvalue&amp;gt; &amp;lt;oldvalue&amp;gt;   上面的语法只有咱当前的值是oldvalue的时候，修改master分支的头到newvalue。
在验证引用还包含&amp;lt;oldvalue&amp;gt;之后，使用-d标识删除到命名的引用&amp;lt;ref&amp;gt;。
使用—create-reflog之后，更新引用将会为每个引用创建一个reflog，即使通常不会创建reflog。
使用-z标志以nul终止格式指定，该格式具有更新、创建、删除、验证等值。
update 如果提供了，在验证&amp;lt;oldvalue&amp;gt;之后，修改引用&amp;lt;ref&amp;gt;的值为&amp;lt;newvalue&amp;gt;。指定零值&amp;lt;newvalue&amp;gt;确保引用更新之后不存在，或者一个零值&amp;lt;oldvalue&amp;gt;确保引用更新之前不存在。
create 验证不存在之后使用&amp;lt;newvalue&amp;gt;创建&amp;lt;ref&amp;gt;。这个&amp;lt;newvalue&amp;gt;不能为0
delete 如果提供，验证&amp;lt;oldvalue&amp;gt;存在之后，删除&amp;lt;ref&amp;gt;。这时，&amp;lt;oldvalue&amp;gt;不能是0
verify 使用&amp;lt;oldvalue&amp;gt;验证&amp;lt;ref&amp;gt;中存在，但是不做修改。如果&amp;lt;oldvalue&amp;gt;为0或缺失，引用必须不存在。
参考：Git® Notes for Professionals book</description>
    </item>
    
    <item>
      <title>Bash专业笔记(四十八)</title>
      <link>http://blog.huaifufeng.com/2019/03/post/bash-section-48.html</link>
      <pubDate>Sat, 16 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>http://blog.huaifufeng.com/2019/03/post/bash-section-48.html</guid>
      <description>命令和操作链 有多种方法比命令连接在一起使用。简单的就像;，复杂的像逻辑链(根据条件使用不同的命令)。第三种就是管道命令：在链条中，下一个命令处理上一个命令的输出结果。
统计字符串出现次数 使用管道把上一个命令的输出结果作为下个命令的输入值：
ls -l | grep -c &amp;quot;.conf&amp;quot;  这个例子中，ls命令的输出结果作为grep命令的输入。结果是文件名中包含.conf的文件的数量。
这个可以用组织尽量长的命令队列：
ls -1 | grep &amp;quot;.conf&amp;quot; | grep -c .  传输root命令输出到用户文件 有时候想要把root命令的执行结果给其他的用户。tee命令很简单的以用户的权限把root命令的输出结果放入一个文件中。
su -c ifconfig | tee ~/results-of-ifconfig.txt  只有ifconfig是以root的身份运行的。
逻辑命令链 &amp;amp;&amp;amp; || &amp;amp;&amp;amp;连接两个命令，第二个命令只有在第一个命令执行成功的情况下才会执行。||的两个命令只有第一个命令失败的情况下第二个命令才会执行。
[ a = b ] &amp;amp;&amp;amp; echo &amp;quot;yes&amp;quot; || echo &amp;quot;no&amp;quot; # if you want to run more commands within a logical chain, use curly braces # which designate a block of commands # They do need a ; before closing bracket so bash can diffentiate from other uses # of curly braces [ a = b ] &amp;amp;&amp;amp; { echo &amp;quot;let me see.</description>
    </item>
    
    <item>
      <title>Git专业笔记（五十三）</title>
      <link>http://blog.huaifufeng.com/2019/03/post/git-section-53.html</link>
      <pubDate>Sat, 16 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>http://blog.huaifufeng.com/2019/03/post/git-section-53.html</guid>
      <description>外部合并和diff工具 设置KDiff3作为合并工具 下面的配置添加到.gitconfig文件中：
[merge] tool = kdiff3 [mergetool &amp;quot;kdiff3&amp;quot;] path = D:/Program Files (x86)/KDiff3/kdiff3.exe keepBackup = false keepbackup = false trustExitCode = false  注意设置path属性为你安装KDiff3的目录。
设置KDiff3为diff工具 [diff] tool = kdiff3 guitool = kdiff3 [difftool &amp;quot;kdiff3&amp;quot;] path = D:/Program Files (x86)/KDiff3/kdiff3.exe cmd = \&amp;quot;D:/Program Files (x86)/KDiff3/kdiff3.exe\&amp;quot; \&amp;quot;$LOCAL\&amp;quot; \&amp;quot;$REMOTE\&amp;quot;  设置IntelliJ IDE为合并工具(Windows) [merge] tool = intellij [mergetool &amp;quot;intellij&amp;quot;] cmd = cmd \&amp;quot;/C D:\\workspace\\tools\\symlink\\idea\\bin\\idea.bat merge $(cd $(dirname &amp;quot;$LOCAL&amp;quot;) &amp;amp;&amp;amp; pwd)/$(basename &amp;quot;$LOCAL&amp;quot;) $(cd $(dirname &amp;quot;$REMOTE&amp;quot;) &amp;amp;&amp;amp; pwd)/$(basename &amp;quot;$REMOTE&amp;quot;) $(cd $(dirname &amp;quot;$BASE&amp;quot;) &amp;amp;&amp;amp; pwd)/$(basename &amp;quot;$BASE&amp;quot;) $(cd $(dirname &amp;quot;$MERGED&amp;quot;) &amp;amp;&amp;amp; pwd)/$(basename &amp;quot;$MERGED&amp;quot;)\&amp;quot; keepBackup = false keepbackup = false trustExitCode = true  这里需要注意的一点是，这个cmd属性不接受路径中任何奇怪的字符。如果您的IDE安装位置中有奇怪的字符（例如，它安装在Program Files (x86)中），则必须创建一个软连。</description>
    </item>
    
    <item>
      <title>Bash专业笔记(四十七)</title>
      <link>http://blog.huaifufeng.com/2019/03/post/bash-section-47.html</link>
      <pubDate>Fri, 15 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>http://blog.huaifufeng.com/2019/03/post/bash-section-47.html</guid>
      <description>使用trap响应信号和系统事件    参数 详情     -p 列出当前按照的traps   -l 列出信号的名称和相应编号    清理临时文件 你可以使用trap命令来&amp;rdquo;trap&amp;rdquo;信号：这是shell中等同于C中调用signal()或sigaction()，或者其他的编程语言中捕捉信号的方法。
trap的一个常用的地方是清理希望或不希望存在的临时文件。
不幸的是没有足够的脚本实现这个功能：
#!/bin/sh #定义清理函数 cleanup() { rm --force -- &amp;quot;${tmp}&amp;quot; } # 捕捉特殊的EXIT组， shell存在时会一直运行 trap cleanup EXIT #创建临时文件 tmp=&amp;quot;$(mktemp -p /tmp tmpfileXXXXX)&amp;quot; echo &amp;quot;Hello World!&amp;quot; &amp;gt;&amp;gt; &amp;quot;${tmp}&amp;quot; # No rm -f &amp;quot;$tmp&amp;quot; needed. The advantage of using EXIT is that it still works # even if there was an error or if you used exit.</description>
    </item>
    
    <item>
      <title>Git专业笔记（五十二）</title>
      <link>http://blog.huaifufeng.com/2019/03/post/git-section-52.html</link>
      <pubDate>Fri, 15 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>http://blog.huaifufeng.com/2019/03/post/git-section-52.html</guid>
      <description>TortoiseGit 合并提交 简单方法 这将不会有效，当你选择的分支包含合并的分支时：
高级方法 开启rebase：
假设不变 如果一个文件修改了，但是你不想提交这个文件，把这个文件设置为&amp;rdquo;假设不变&amp;rdquo;：
恢复假设不变 忽略文件和目录 使用TortioseGit UI 可以在文件或目录上面使用鼠标右键，想要忽略文件TortoiseGit -&amp;gt; Delete and add to ignore list，这里你可以选择忽略所有的某个类型的文件或者指定的文件，然后在弹窗中选择ok就可以了。
分支 使用UI来选择分支，在仓库上面鼠标右键，然后Tortoise Git -&amp;gt; Create Branch…
新的窗口会打开open -&amp;gt; Give branch a name -&amp;gt; Tick the box Switch to new branch(可能你希望在分支之后使用它)。点击&amp;rdquo;确定&amp;rdquo;，就可以完成操作。
参考：Git® Notes for Professionals book</description>
    </item>
    
    <item>
      <title>Bash专业笔记(四十六)</title>
      <link>http://blog.huaifufeng.com/2019/03/post/bash-section-46.html</link>
      <pubDate>Thu, 14 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>http://blog.huaifufeng.com/2019/03/post/bash-section-46.html</guid>
      <description>printf输出日期 在Bash4.2，提供了printf内建的时间规则：%(datefmt)T可以让printf输出datefmt指定格式的时间字符串。其中datefmt需要是strftime识别的格式。
获取当前时间 $ printf &#39;%(%F)T\n&#39; 2019-03-14  设置当前时间变量 $ printf -v now &#39;%(%T)T&#39; $ echo &amp;quot;$now&amp;quot; 21:00:04  参考：Bash Notes for Professionals book</description>
    </item>
    
    <item>
      <title>Git专业笔记（五十一）</title>
      <link>http://blog.huaifufeng.com/2019/03/post/git-section-51.html</link>
      <pubDate>Thu, 14 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>http://blog.huaifufeng.com/2019/03/post/git-section-51.html</guid>
      <description>git reflog 从坏rebase修复 假设你开启了一个交互rebase：
git rebase --interactive HEAD~20  但是你犯了错误，你合并或丢掉了一些你不想要失去的提交。然后完成了rebase操作。想要修复的话，使用git reflog，你可以看到类似下面的内容：
aaaaaaa HEAD@{0} rebase -i (finish): returning to refs/head/master bbbbbbb HEAD@{1} rebase -i (squash): Fix parse error ... ccccccc HEAD@{n} rebase -i (start): checkout HEAD~20 ddddddd HEAD@{n+1} ... ...  在这个例子里面，上个提交dddddd或(HEAD@{n+1})是你开始rebase的分支。因此想要恢复这个提交(和所有的父提交，包括那些合并或丢失的)：
$ git checkout HEAD@{n+1}  然后你可以使用下面的命令git checkout -b [branch]来创建一个新分支。
参考：Git® Notes for Professionals book</description>
    </item>
    
    <item>
      <title>Bash专业笔记(四十五)</title>
      <link>http://blog.huaifufeng.com/2019/03/post/bash-section-45.html</link>
      <pubDate>Wed, 13 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>http://blog.huaifufeng.com/2019/03/post/bash-section-45.html</guid>
      <description>单词拆分    参数 详情     IFS 内部的字段分隔符   -x 打印执行的命令和他们的参数    what，when和why 当shell执行参数扩展，命令替换，变量或算术扩展时，它会扫描结果中的字边界。如果找到了字符边界，就会在这个位置把结果分成多个单词。这个单词的边界是被IFS定义的。如果没有显示指明的话，IFS的默认值是空白，tab和新行。当遇到这三个字符的时候，会进行单词的拆分。
set -x var=&#39;I am a multiline string&#39; fun() { echo &amp;quot;-$1-&amp;quot; echo &amp;quot;*$2*&amp;quot; echo &amp;quot;.$3.&amp;quot; } fun $var  在上面的例子中线上了fun是怎么执行的
fun I am a multiline string   $var被分成5个单词，但是只有I，am，a被输出。
 单词拆分的坏处 $ a=&#39;I am a string with spaces&#39; $ [ $a = $a ] || echo &amp;quot;didn&#39;t match&amp;quot; bash: [: too many arguments didn&#39;t match   [ $a = $a ]被解析为[ I am a string with spaces = I am a string with spaces ]。[是一个test命令，然而I am a string with spaces是6个参数不是一个参数。</description>
    </item>
    
    <item>
      <title>Git专业笔记（五十）</title>
      <link>http://blog.huaifufeng.com/2019/03/post/git-section-50.html</link>
      <pubDate>Wed, 13 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>http://blog.huaifufeng.com/2019/03/post/git-section-50.html</guid>
      <description>git可视客户端 gitk和git-gui 当你按照git的时候，也可以按照可视化的工具：gitk和git-gui。
gitk是一个图形历史查看工具。把它想象成git log和git grep的强大GUI工具。这在你想要查看仓库历史发送的修改，或者查看仓库的历史很有用。
Gitk很容易从命令行启动。只要cd到仓库的目录，然后输入：
$ gitk [git log options]  Gitk接收很多的命令行选项，启动大部分是传给底层git log操作的。可能其中最有用的：—all标识，通知gitk显示所有引用的提交，不仅仅是HEAD。Gitk的界面可能想下面这样：
上面图像中上部分就像是使用git log —graph的输出。每个点代表一个提交，每条线代表父关系，引用显示在带颜色的块内。黄点标识HEAD，红点表示还没有提交的修改。下部分就是显示指定提交的展示，注释和补丁在左边，右边是摘要视图。中间是一系列用来搜索历史的。
你可以在分支名或提交信息上右键，可以使用很多git的方法。例如签出不同的分支或cherry pick一个提交，只要一个点击。
git-gui主要是用于构建提交的工具，它也很容易从命令行启动：
$ git gui  它的界面就像下面这样：
左边是索引，上边是未暂存的修改，暂存的修改在下吧。你可以点击文件的标识来交互文件的状态，或者选择一个文件点击查看它的名称。
右上角是文件的diff，用来显示选择文件的修改。你可以在这个区域使用右键来暂存单独的块或者行。
右下角是提交信息和操作的地方。在文本框中输入提交信息，然后点击Commit按键做和git commit一样的事情。你也可以使用Amend来提交，将会把暂存的修改提交到上次提交。然后，你可以暂存或取消暂存修改，添加提交信息，然后提交Commit来重新提交。
gitk和git-gui是面向任务的例子。它们中的每一个都是为特定目的而定制的（分别查看历史和创建提交），并且省略了该任务不需要的特性。
查看介绍。
Github桌面 站点：https://git-scm.com/book/en/v2/Git-in-Other-Environments-Graphical-Interfaces
价格：免费
平台：OS X和Windows
开发者：https://github.com/
Git Kraken 站点：https://www.gitkraken.com/
价格：$60/每年(免费为开源、教育、非营利、初创企业或个人使用)
平台：Linux, OS X, Windows
开发者：Axosoft
SourceTree 站点：https://www.sourcetreeapp.com/
价格：免费(需要账户)
平台：OS X 和 Windows
开发者：Atlassian
Git扩展 站点：https://gitextensions.github.io
价格：免费
平台：Windows
SmartGit 站点：https://www.syntevo.com/smartgit/
价格：免费仅限非商业用途。永久许可费99美元
平台：Linux，OS X 和Windows
开发者：syntevo
参考：Git® Notes for Professionals book</description>
    </item>
    
    <item>
      <title>Bash专业笔记(四十四)</title>
      <link>http://blog.huaifufeng.com/2019/03/post/bash-section-44.html</link>
      <pubDate>Tue, 12 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>http://blog.huaifufeng.com/2019/03/post/bash-section-44.html</guid>
      <description>管理PATH环境变量 添加一个path到PATH环境变量 PATH环境变量通常定义在.bashrc或者.bash_profile或者/etc/profile或者.profile或者/etc/bash.bashrc(不同的bash配置文件)。
$ echo $PATH /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin: /usr/lib/jvm/jdk1.8.0_92/bin:/usr/lib/jvm/jdk1.8.0_92/db/bin:/usr/lib/jvm/jdk1.8.0_92/jre/bin  现在，如果我们想在PATH中添加一个路径(例如~/bin):
PATH=~/bin:$PATH # or PATH=$PATH:~/bin  但是这只会在当前的shell(或它的子shell中生效)。一旦你退出了这个shell，这个修改就会失效。
想要让修改永久话的话，我们需要在~/.bashrc中添加这些代码，并重新加载这个文件。
如果你在终端中运行下面的命令，将会把~/bin添加到PATH中：
echo &#39;PATH=~/bin:$PATH&#39; &amp;gt;&amp;gt; ~/.bashrc &amp;amp;&amp;amp; source ~/.bashrc  命令解释：
 echo &#39;PATH=~/bin:$PATH&#39; &amp;gt;&amp;gt; ~/.bashrc在文件~/.bashrc的末尾添加PATH=~/bin:$PATH这行代码，你也可以在编辑器中添加 source ~/.bashrc重新加载~/.bashrc文件  下面这个代码将会检查路径是否存在，只有在不存在的时候才会添加：
path=~/bin # path to be included bashrc=~/.bashrc # bash file to be written and reloaded # run the following code unmodified echo $PATH | grep -q &amp;quot;\(^\|:\)$path\(:\|/\{0,1\}$\)&amp;quot; || echo &amp;quot;PATH=\$PATH:$path&amp;quot; &amp;gt;&amp;gt; &amp;quot;$bashrc&amp;quot;; source &amp;quot;$bashrc&amp;quot;  从PATH环境变量移除路径 要从PATH中移除一个路径，需要编辑~/.</description>
    </item>
    
    <item>
      <title>Git专业笔记（四十九）</title>
      <link>http://blog.huaifufeng.com/2019/03/post/git-section-49.html</link>
      <pubDate>Tue, 12 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>http://blog.huaifufeng.com/2019/03/post/git-section-49.html</guid>
      <description>git发送邮件 使用Gmail 背景：如果你工作在像Linux内核这样的项目上面，你不是使用pull reques，而是要提交你到提交到服务器上等待review。这里介绍怎么使用git发送Gmail邮件。
在.gitconfig中添加下面的配置：
[sendemail] smtpserver = smtp.googlemail.com smtpencryption = tls smtpserverport = 587 smtpuser = name@gmail.com  然后在网页上面：Go to Google -&amp;gt; My Account -&amp;gt; Connected Apps &amp;amp; Sites -&amp;gt; Allow less secure apps -&amp;gt; Switch ON
创建一个补丁集合：
git format-patch HEAD~~~~ --subject-prefix=&amp;quot;PATCH &amp;lt;project-name&amp;gt;&amp;quot;  发送补丁到listserv:
git send-email --annotate --to project-developers-list@listserve.example.com 00*.patch  创建并发送补丁已经更新的版本：
git format-patch -v 2 HEAD~~~~ ...... git send-email --to project-developers-list@listserve.example.com v2-00*.patch  组合 --from * Email From: --[no-]to * Email To: --[no-]cc * Email Cc: --[no-]bcc * Email Bcc: --subject * Email &amp;quot;Subject:&amp;quot; --in-reply-to * Email &amp;quot;In-Reply-To:&amp;quot; --[no-]xmailer * Add &amp;quot;X-Mailer:&amp;quot; header (default).</description>
    </item>
    
    <item>
      <title>Bash专业笔记(四十三)</title>
      <link>http://blog.huaifufeng.com/2019/03/post/bash-section-43.html</link>
      <pubDate>Mon, 11 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>http://blog.huaifufeng.com/2019/03/post/bash-section-43.html</guid>
      <description>管道 使用|&amp;amp; |&amp;amp;连接一命令的标准输出和标准错误到二命令，而|命令连接一命令的标准输出到二命令。
在这个例子中，使用curl命令加下载这个页面，使用-v选项写一些内容到标准错误中，这个页面被输出到标准输出中。这个页面的标题在&amp;lt;title&amp;gt;和&amp;lt;/tilte&amp;gt;之间。
curl -vs &#39;http://www.google.com/&#39; |&amp;amp; awk &#39;/Host:/{print} /&amp;lt;title&amp;gt;/{match($0,/&amp;lt;title&amp;gt;(.*)&amp;lt;\/title&amp;gt;/,a);print a[1]}&#39;  这将会输出：
&amp;gt; Host: www.google.com Google  但是使用|的话，会输出更多的内容：即哪些被输出到标准错误中的信息，因为只有标准输出被管道到下一个命令。在这个例子中除了最后一行，其他的都是输出到标准错误中的：
* Hostname was NOT found in DNS cache * Trying 172.217.20.228... * Connected to www.google.com (172.217.20.228) port 80 (#0) &amp;gt; GET / HTTP/1.1 &amp;gt; User-Agent: curl/7.35.0 &amp;gt; Host: www.google.com &amp;gt; Accept: */* &amp;gt; * HTTP 1.0, assume close after body &amp;lt; HTTP/1.0 200 OK &amp;lt; Date: Sun, 24 Jul 2016 19:04:59 GMT &amp;lt; Expires: -1 &amp;lt; Cache-Control: private, max-age=0 &amp;lt; Content-Type: text/html; charset=ISO-8859-1 &amp;lt; P3P: CP=&amp;quot;This is not a P3P policy!</description>
    </item>
    
    <item>
      <title>Git专业笔记（四十八）</title>
      <link>http://blog.huaifufeng.com/2019/03/post/git-section-48.html</link>
      <pubDate>Mon, 11 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>http://blog.huaifufeng.com/2019/03/post/git-section-48.html</guid>
      <description>git统计    参数 详情     -n, —numbered 按照作者的提交数量排序而不是按照字母顺序排序   -s, --summary 仅提供提交计数摘要   -e, --email 线上每个作者的邮件地址   --format[=&amp;lt;format&amp;gt;] 不使用提交对象，使用其他的信息来描述提交。&amp;lt;format&amp;gt;是git log的—format选项使用的字符   -w[&amp;lt;width&amp;gt;[,&amp;lt;indent1&amp;gt;[,&amp;lt;indent2&amp;gt;]]] 通过以宽度包装每一行来对输出进行换行。每个条目的第一行缩进1个空格，后续行缩进1个空格。   &amp;lt;revision range&amp;gt; 显示指定版本范围内的提交。默认是直到当前的提交的所有历史   [—] &amp;lt;path&amp;gt; 只显示说明文件匹配路径的提交。路径可能需要以“-”作为前缀，以将其与选项或修订范围分开。    每个开发者的行 git ls-tree -r HEAD | sed -Ee &#39;s/^.{53}//&#39; | \ while read filename; do file &amp;quot;$filename&amp;quot;; done | \ grep -E &#39;: .*text&#39; | sed -E -e &#39;s/: .</description>
    </item>
    
    <item>
      <title>Bash专业笔记(四十二)</title>
      <link>http://blog.huaifufeng.com/2019/03/post/bash-section-42.html</link>
      <pubDate>Sun, 10 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>http://blog.huaifufeng.com/2019/03/post/bash-section-42.html</guid>
      <description>scp传输文件 scp传输文件 想要安全的传输一个文件到另一台机器上面：
scp file1.txt tom@server2:$HOME  这个例子将会把file1.txt从我们的机器上面传输到server2的用户tom的家目录内。
scp传输多个文件 scp也可以用来从一个服务器到一个服务器传输多个文件。下面的例子是从my_folder目录传输所有后缀为.txt的文件到server2。下面的例子所有的文件传输到用户的home目录：
scp /my_folder/*.txt tom@server2:$HOME  使用scp下载文件 从远端机器下载文件到本地机器：
scp tom@server2:$HOME/file.txt /local/machine/path/  这里例子展示了如果从tom的家目录下载文件file.txt到本地机器的当前目录。
参考：Bash Notes for Professionals book</description>
    </item>
    
    <item>
      <title>Git专业笔记（四十七）</title>
      <link>http://blog.huaifufeng.com/2019/03/post/git-section-47.html</link>
      <pubDate>Sun, 10 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>http://blog.huaifufeng.com/2019/03/post/git-section-47.html</guid>
      <description>git补丁    参数 详情     `( )`&amp;hellip;   -s, —signoff 使用自己的提交者标识，在提交消息中添加一个签名人   -q, —quiet 安静模式。值打印错误信息   -u, -utf8 git mailinfo使用-u标识。这表明从邮箱获取的提交日志信息使用UTF-8重新编码(如果不是UTF-8的话，i18n.commitencoding可以用来指定项目的编码)。你可以使用—no-utf8来覆盖这个选项   —no-utf8 git mailinfo使用-n标识。   -3, —3way 如果补丁不干净地应用，那么如果补丁记录了它应该应用到的blob的标识，并且我们在本地有这些blob可用，那么返回到3路合并。   —ingore-date, —ignore-space-change, —ignore-whitespace, —whitespace=&amp;lt;option&amp;gt;, -C&amp;lt;n&amp;gt;, -p&amp;lt;n&amp;gt;, —directory=&amp;lt;dir&amp;gt;, —exclude=&amp;lt;path&amp;gt;, —include=&amp;lt;path&amp;gt;, —reject 这些标识传递给git apply来应用补丁   —patch-format 默认命令会试着自动进行补丁格式的解析。这个选项允许用户跳过自动解析，指定补丁的格式。有效的格式包括mbox, stgit stgit-series hg   -i, —interactive 运行交互模式   —committer-date-is-author-date 默认命令使用邮件信息的提交作者日期，使用提交创建时间作为提交者的时间。这允许用户使用和作者日期一样的值来假装提交者日期。   —ignore-date 默认命令使用邮件信息的提交作者日期，使用提交创建时间作为提交者的时间。这允许用户使用和提交者日期一样的值来假装作者日期。   —skip 跳过当前补丁。这只在重启一个终端的补丁时有意义。   -S[&amp;lt;keyid&amp;gt;], —gpg-sign[=&amp;lt;keyid&amp;gt;] GPG签名提交   —continue, -r, —resolved 修补程序失败后（例如尝试应用冲突的修补程序），用户已手动应用该修补程序，索引文件存储应用程序的结果。使用从电子邮件和当前索引文件中提取的作者身份和提交日志进行提交，然后继续。   —resolvemsg=&amp;lt;msg&amp;gt; 当补丁失败的时候，在退出之前，&amp;lt;msg&amp;gt;将会被输出到屏幕。这将会覆盖你使用—continue或—skip的时候的标准信息。这只限于git rebase和git am之间使用   —abort 终端补丁操作，返回原本的分支。    创建补丁 创建一个补丁，有两个步骤：</description>
    </item>
    
    <item>
      <title>Bash专业笔记(四十一)</title>
      <link>http://blog.huaifufeng.com/2019/03/post/bash-section-41.html</link>
      <pubDate>Sat, 09 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>http://blog.huaifufeng.com/2019/03/post/bash-section-41.html</guid>
      <description>拆分文件 有时候把一个文件分成多个文件时很有用的。如果你有一个大文件，把它分成多个小块是很有用的。
拆分一个文件 直接不带参数的运行spilt命令，将会把一个文件分为1个或多个文件，每个文件最多包含1000行。
split file  这将会创建文件xaa xab xac …，每个文件最多1000行。这里你注意到，所有的文件都是x开头的。如果文件没有1000行，只有创建一个这样的文件。
想要修改文件名前缀的话，在命令的后面添加你想要的文件前缀：
split file customprefix  现在将会创建customprefixaa, customprefixab, customprefixac...这些文件。
指定每个文件的行数，可以使用-l选项。下面的命令将会拆分文件，每个文件最多5000行。
split -l5000 file  或者
split --lines=5000 file  另外你可以指定文件的最大大小而不是行数。这可以通过使用-b或—bytes选项来实现。例如，每个文件最大1M：
split --bytes=1MB file  参考：Bash Notes for Professionals book</description>
    </item>
    
    <item>
      <title>Git专业笔记（四十六）</title>
      <link>http://blog.huaifufeng.com/2019/03/post/git-section-46.html</link>
      <pubDate>Sat, 09 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>http://blog.huaifufeng.com/2019/03/post/git-section-46.html</guid>
      <description>git大文件存储 声明额外存储的文件类型 一个通常使用Git LFS的方式是声明一个使用系统规则处理指定文件，就像.gitingnore这个文件一样。
很多时候，通配符用于选择某些文件类型以覆盖跟踪。
git lfs track &amp;quot;*.psd&amp;quot;  当一个匹配上面规则的文件被添加到提交中，当被推送到远端的时候，它将会被单独上次，使用一个指针替换远端仓库中的文件。
使用LFS追踪文件之后，你的.gitattributes文件也会被更新。Github建议你提交自己仓库本地的.gitattributes文件，而不是修改全局的.gitattributes文件，这样就不会再处理多个仓库时出现问题。
为所有的副本设置LFS配置 想要设置在所有仓库副本都有效的LFS配置选项，要在仓库的根目录添加并提交一个.lfsconfig的文件。这个文件用来指定和.git/config中一样的配置文件。
例如：要从LFS中排查某个文件，请创建并提交.lfsconfig文件，并添加下面的内容提交：
[lfs] fetchexclude = ReallyBigFile.wav  按照LFS 下载和安装LFS，既可以使用Homebrew，也可以从这个网址。
homebrew  brew install git-lfs git lfs install  通常你需要对托管的远端服务器进行一些设置，用来允许它和LFS一起使用。这对于每个主机是不同的，但很可能只是勾选了一个框，说明你想要使用git lfs。
参考：Git® Notes for Professionals book</description>
    </item>
    
    <item>
      <title>Bash专业笔记(四十)</title>
      <link>http://blog.huaifufeng.com/2019/03/post/bash-section-40.html</link>
      <pubDate>Fri, 08 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>http://blog.huaifufeng.com/2019/03/post/bash-section-40.html</guid>
      <description>文件执行顺序 .bash_profile，.bash_login，.bashrc和.profile做这相同的事情：设置和定义函数，变量和排序。
主要的不同是.bashrc在开启一个非登录的交互窗口是调用，.bash_profile和其他文件在登录的shell中执行。无论如何很多人都拥有.bash_profile和相似的.bashrc。
.profile VS .bash_profile(和.bash_login) .profile在很多shell启动的时候读取，包括bash。然后.bash_profile是指定bash的配置。对于通用的初始化代码，放在.profile中，但是指定bash的代码，放到.bash_profile中。
.profile并不是专门为bash设计的，但是.bash_profile是。(.profile是用于Bourne和其他类似的shell的，bash基于这个创作的。)如果找不到.bash_profile，就会去寻找.profile。
如果找不到.bash_profile的话，就会寻找.bash_login，但是最好是使用.bash_profile或.profile。
参考：Bash Notes for Professionals book</description>
    </item>
    
    <item>
      <title>Git专业笔记（四十五）</title>
      <link>http://blog.huaifufeng.com/2019/03/post/git-section-45.html</link>
      <pubDate>Fri, 08 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>http://blog.huaifufeng.com/2019/03/post/git-section-45.html</guid>
      <description>git远端    参数 详情     -v, —verbos 冗长模式运行   -m  设置远端分支的头   —mirror=fetch 引用将不会保存在efs/remotes，而是保存在本地仓库内   —mirror=push git push表现的像--mirror被设置了   —no-tags git fetch &amp;lt;name&amp;gt;不会从远端仓库导入tag   -t  指定远端只追踪   -f 远端设置之后立即执行git fetch &amp;lt;name&amp;gt;   &amp;ndash;tags git fetch &amp;lt;name&amp;gt;从远端仓库导入每个tag   -a, —auto 符号引用的HEAD设置为远端HEAD的相同的分支。   -d, —delete 所有列出的引用都会从远端仓库删除   &amp;ndash;add 将添加到当前跟踪的分支列表（设置分支）   &amp;ndash;add 不是修改某些URL，而是添加一些URL(设置URL)   &amp;ndash;all 推送所有的分支。   &amp;ndash;delete 所有匹配的将会被删除。   —push 推送URL而不是拉取URL   -n 远端HEAD不是首先使用git ls-remote &amp;lt;name&amp;gt;，而是使用缓存信息   —dry-run 报告将修剪哪些分支，但不要实际修剪它们   —prune 删除没有本地对应的远端分支    显示远端仓库 使用git remote列出所有配置的远端仓库。</description>
    </item>
    
    <item>
      <title>Bash专业笔记(三十九)</title>
      <link>http://blog.huaifufeng.com/2019/03/post/bash-section-39.html</link>
      <pubDate>Thu, 07 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>http://blog.huaifufeng.com/2019/03/post/bash-section-39.html</guid>
      <description>读取文件    参数 详情     IFS 内部字段分隔符   file 文件名或路径   -r 当使用read时，防止反斜杠解析   -t 从readarray读取的每一行中删除尾部换行符   -d DELIM 读取到DELIM的第一个字符中断，而不是换行符    一行一行循环 while IFS= read -r line; do echo &amp;quot;$line&amp;quot; done &amp;lt;file  如果没有包含新行符号的话：
while IFS= read -r line || [ -n &amp;quot;$line&amp;quot; ]; do echo &amp;quot;$line&amp;quot; done &amp;lt;file  逐个字段循环 我们假设字段分隔符是:：
while IFS= read -d : -r field || [ -n &amp;quot;$field&amp;quot; ];do echo &amp;quot;**$field**&amp;quot; done &amp;lt; &amp;lt;(ping google.</description>
    </item>
    
    <item>
      <title>Git专业笔记（四十四）</title>
      <link>http://blog.huaifufeng.com/2019/03/post/git-section-44.html</link>
      <pubDate>Thu, 07 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>http://blog.huaifufeng.com/2019/03/post/git-section-44.html</guid>
      <description>git工作树    参数 详情     -f —force 默认情况下，当&amp;lt;branch&amp;gt;被另外的工作树使用，add拒绝添加新的工作树。这个选项将会强制创建。   -b  -B  当在添加或创建一个名字为&amp;lt; new-branch&amp;gt;的分支，将会在新的工作树上签出分支。如果忽略的话，默认是HEAD。默认-b当分支存在时，将不会创建新分支，但是-B会创建新的分支   &amp;ndash;detach 使用add，分类工作树中的HEAD   —[no-] checkout 默认add将会签出，然而—no-将会禁止签出，而使用自定义例如配置   -n —dry-run 使用prunce，这个选项将不会删除任何东西， 只是说明将会删除的内容。   &amp;ndash;porcelain 使用list，以易于解析的格式输出。无论用户怎么配置，都会在git中保持一致。   -v &amp;ndash;verbose 使用prune,的说明所有删除   —expire  使用prune，只会使早于的未使用的工作树过期。    使用工作树 你正在某个特性的开发工作中，这是你的老板来让你先修复一个问题。你通常会使用git stash来临时存储你的本地修改。然而，这时你的工作树处于混乱状态(新文件，移动文件，删除文件以及其他的一些文件)，你不想干扰你的进度。
通过添加一个临时的工作树，你可以创建一个临时关联的工作树来保存这个紧急修改，然后在功能完成之后移出这个工作树，恢复之前的修改：
$ git worktree add -b emergency-fix ../temp master $ pushd ../temp # .</description>
    </item>
    
    <item>
      <title>Bash专业笔记(三十八)</title>
      <link>http://blog.huaifufeng.com/2019/03/post/bash-section-38.html</link>
      <pubDate>Wed, 06 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>http://blog.huaifufeng.com/2019/03/post/bash-section-38.html</guid>
      <description>case语句 简单语句 在所有bash版本支持的最简单格式中，case语句执行与模式匹配的case。如果有的话，;;在第一次匹配后中断。
#!/bin/bash var=1 case $var in 1) echo &amp;quot;Antartica&amp;quot; ;; 2) echo &amp;quot;Brazil&amp;quot; ;; 3) echo &amp;quot;Cat&amp;quot; ;; esac  输出：
Antartica  贯穿语句 Version&amp;gt;=4.0
从4.0开始，引入了新的操作符;&amp;amp;，支持贯穿操作。
#!/bin/bash var=1 case $var in 1) echo &amp;quot;Antartica&amp;quot; ;&amp;amp; 2) echo &amp;quot;Brazil&amp;quot; ;&amp;amp; 3) echo &amp;quot;Cat&amp;quot; ;&amp;amp; esac  输出：
Antartica Brazil Cat  子模式匹配贯穿 Version&amp;gt;=4.0
4.0开始，另一个操作符;;&amp;amp;，只有子语句匹配才贯穿的操作。
#!/bin/bash var=abc case $var in a*) echo &amp;quot;Antartica&amp;quot; ;;&amp;amp; xyz) echo &amp;quot;Brazil&amp;quot; ;;&amp;amp; *b*) echo &amp;quot;Cat&amp;quot; ;;&amp;amp; esac  输出：</description>
    </item>
    
    <item>
      <title>Git专业笔记（四十三）</title>
      <link>http://blog.huaifufeng.com/2019/03/post/git-section-43.html</link>
      <pubDate>Wed, 06 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>http://blog.huaifufeng.com/2019/03/post/git-section-43.html</guid>
      <description>git revisions的语法 通过对象名指定revision $ git show dae86e1950b1277e545cee180551750029cfe735 $ git show dae86e19  你可以使用SHA-1对象名称（完整的40位16进制字符串，或者在仓库中唯一的部分字符串）指定revision(或者任何的对象：tag，tree等待。目录内容，blob等等文件内容)。
象征的引用名称：分支，tag，远端分支 $ git log master #指定分支 $ git show v1.0 #指定tag $ git show HEAD #指定当前分支 $ git show origin #指定远端Origin默认追踪的分支  你可以使用象征名称指定一个revision：例如分支(如 master next 等)，tag(如v1.0 v2.0等)，如远端追踪分支(例如 origin，origin/master等)，或者当前分支的特定名称HEAD。
如果符号引用名称不明确，例如，如果同时具有名为“fix”的分支和标记（不建议使用同名的分支和标记），则需要指定要使用的引用类型：
$ git show heads/fix #或者 refs/heads/fix $ git show tags/fix #或者 refs/tags/fix  默认的revision:HEAD $ git show #等价于git show HEAD  HEAD是你当前工作树基于的提交所在的分支，通常是当前分支。很多(但不是全部)命令如果没有蚕食时都会使用HEAD作为默认的值。
Reflog references: @{} $ git show @{1} #显示当前分支的reflog $ git show master@{1} #显示分支master的reflog $ git show HEAD@{1} #显示HEAD的reflog  一个引用(通常是一个分支或HEAD)后面跟着@之后一个{}包围的数字，指定当前仓库向前数第n个的提交。你可以使用git reflog命令或者使用git log的—walk-reflogs/ -g选项。</description>
    </item>
    
    <item>
      <title>Bash专业笔记(三十七)</title>
      <link>http://blog.huaifufeng.com/2019/03/post/bash-section-37.html</link>
      <pubDate>Tue, 05 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>http://blog.huaifufeng.com/2019/03/post/bash-section-37.html</guid>
      <description>任务管理 显示后台进程 $ jobs [1] Running sleep 500 &amp;amp; (wd: ~) [2]- Running sleep 600 &amp;amp; (wd: ~) [3]+ Running ./Fritzing &amp;amp;  第一个字段是任务的id。+和-表示当前任务结束时的默认任务和下一个候选任务。当在没有任何参数的情况下使用fg或bg命令时，将使用默认作业。
第二个字段是当前任务的状态。第三个字段时用来启动这个进程的命令。
最后一个字段（wd：~）表示sleep命令是从工作目录（home）启动的。
从后台取一个进程到前台  $ fg %2 sleep 600  %2意味着第2个进程。如果fg命令没有带参数，将会把最后一个命令取到前台。
 $ fg %?sle sleep 500  ?sle意味着取出包含sle的命令。如果有多个后台命令匹配，将会出现一个错误。
重启以停止的命令 $ bg [8]+ sleep 600 &amp;amp;  运行后台命令  $ sleep 500 &amp;amp; [1] 7582  把sleep命令放到后台执行。7582就是这个进程的id。
终止一个前台进程 Ctrl+Z终止前台进程，并放入到后台执行。
$ sleep 600 ^Z [8]+ Stopped sleep 600  参考：Bash Notes for Professionals book</description>
    </item>
    
    <item>
      <title>Git专业笔记（四十二）</title>
      <link>http://blog.huaifufeng.com/2019/03/post/git-section-42.html</link>
      <pubDate>Tue, 05 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>http://blog.huaifufeng.com/2019/03/post/git-section-42.html</guid>
      <description>blame    参数 详情     filename 需要显示详情的文件名称   -f 在详情中显示文件的名称   -e 使用作者的邮箱地址代替作者的名称   -w 当在父子版本之间比较时忽略掉空格   -L start,end 显示指定行范围内的详情，行从1开始。例如 git blame -L 1,2 [filename]   —show-stats 在详情末尾输出额外的统计信息   -l 输出长的hash值(默认不输出)   -t 输出时间戳(默认输出时间格式)   -reverse 反向输出详情信息   -p,—porcelain 输出机器理解的格式   -M 检查文件中移动或复制的行   -C 除了想-M一样，还检查统一提交中其他文件中移动或复制的行   -h 显示帮助信息   -c 使用和git annotate相同格式的输出(默认off)   -n 输出在原来提交中的行号(默认off)    只显示指定的行 输出可以被限定在指定的行区间内：</description>
    </item>
    
    <item>
      <title>Bash专业笔记(三十六)</title>
      <link>http://blog.huaifufeng.com/2019/03/post/bash-section-36.html</link>
      <pubDate>Mon, 04 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>http://blog.huaifufeng.com/2019/03/post/bash-section-36.html</guid>
      <description>内部变量 简单介绍一下Bash的内部变量，并说明在什么地方，怎么使用以及何时使用这些变量。
Bash内部变量一览    变量 详情      函数/脚本可以选择的变量或参数。   $* $@ $*和$@和$1 $2..这样的内容是一样的(注意：通常不引用这些内容是没有意义的) &amp;quot;$*&amp;quot; 和 &amp;quot;$1 $2 … 一样。&amp;quot;$@&amp;quot;和&amp;quot;$1&amp;quot; &amp;quot;$2&amp;quot; …一样。&amp;quot;$*&amp;quot;是由$IFS的第一个字符分割的，不一定是空格   $# 传个脚本或者函数的参数的数量   $! 最后放入后台工作(管道的最右边那个)的job的id。(注意：当启用作业控制时，它不一定和作业的组id相同)   $$ bash正在执行的进程的id   $? 最后一个命令的退出状态   $n 指定位置的参数 n=1,2,3,4…9   ${n} 和上面一样，但是n可以大于9   $0 在执行脚本时，是脚本的路径。bash -c &#39;printf &amp;quot;%s\n&amp;quot; &amp;quot;$0&amp;quot;&#39; name。name(内部脚本的第一个参数)或者，argv[0]会获得bash   $_ 命令的最后一个字段   $IFS 内建的字段分隔符   $PATH 用来寻找可执行脚本的路径地址   $OLDPWD 前一个工作目录   PWD 当前的工作目录   FUNCNAME 调用栈内的函数名称数组   BASH_SOURCE 包含FUNCNAME数组中函数的地址的数组。可以用来寻找脚本路径。   $BASH_ALIAS 当前定义别名的管理数组   BASH_REMATCH 上一个正则表达式匹配的结果   BASH_VERSION bash版本的字符串   BASH 到当前执行的bash的绝对路径。(由bash根据argv[0]和$path的值以启发式方式确定；在某些情况下可能是错误的)   BASH_SUBSHELL bash subshell的等级   $UID 运行bash的进程的实际（如果不同则无效）用户ID   $PS1 主进程的命令提示   $PS2 辅助命令行提示（用于附加输入）   PS3 三级命令行提示（用于select循环）   PS4 第四级命令行提示（用于附加详细输出的信息）   RANDOM 0-32767之间的伪随机整数   $REPLY 当变量没有指定时，默认为read的使用的变量。SELECT还用于用户返回的值   PIPESTATUS 数组变量，保存最近执行的前台管道中每个命令的退出状态值。     变量赋值的时候等号前后不能有空格。a=123而不是a = 123。后者（由空格包围的等号）单独表示使用参数=和123运行命令a，尽管在字符串比较运算符（从语法上讲，它是[或[[或使用的任何测试]的参数）中也可以看到。</description>
    </item>
    
    <item>
      <title>Git专业笔记（四十一）</title>
      <link>http://blog.huaifufeng.com/2019/03/post/git-section-41.html</link>
      <pubDate>Mon, 04 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>http://blog.huaifufeng.com/2019/03/post/git-section-41.html</guid>
      <description>搜索/查找错误提交 二进制搜索(git bisect) git bisect允许你使用二进制搜索查找哪个提交引入了错误。
首先通过两个提交的引用来搜索：一个在bug之前的提交，一个在bug之后的提交。一般来说，错误的提交时HEAD。
# start the git bisect session $ git bisect start # give a commit where the bug doesn&#39;t exist $ git bisect good 49c747d # give a commit where the bug exist $ git bisect bad HEAD  这里git开启了一个二进制搜索：这里把修订分为两个部分，并把仓库切换到中间的修订。检查代码确定这个修订是好的还是坏的：
# tell git the revision is good, # which means it doesn&#39;t contain the bug $ git bisect good # if the revision contains the bug, # then tell git it&#39;s bad $ git bisect bad  git会根据你的操作对没有改包含错误修改的部分进行二进制的搜索。git最后只会有一个修改版本，除非你标记错误了，否则这个版本就是包含错误的版本。</description>
    </item>
    
    <item>
      <title>Bash专业笔记(三十五)</title>
      <link>http://blog.huaifufeng.com/2019/03/post/bash-section-35.html</link>
      <pubDate>Sun, 03 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>http://blog.huaifufeng.com/2019/03/post/bash-section-35.html</guid>
      <description>修改shell 查找当前的shell 有好几种方式获取当前的shell：
echo $0 ps -p $$ echo $SHELL  列出所有有效shell 列出所有有效的shell
cat /etc/shells  例如：
$ cat /etc/shells # /etc/shells: valid login shells /bin/sh /bin/dash /bin/bash /bin/rbash  修改shell 修改当前的shell可以使用下面的命令：
 export SHELL=/bin/bash exec /bin/bash  修改.profile文件，添加上面的内容。
参考：Bash Notes for Professionals book</description>
    </item>
    
    <item>
      <title>Git专业笔记（四十）</title>
      <link>http://blog.huaifufeng.com/2019/03/post/git-section-40.html</link>
      <pubDate>Sun, 03 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>http://blog.huaifufeng.com/2019/03/post/git-section-40.html</guid>
      <description>使用gitk图形化显示提交历史 显示一个文件的提交历史 gitk path/to/myfile  显示两个提交之间的提交 假设你有d9e1db9和5651067两个提交，然后想要看这两个提交之间的提交。d9e1db9是老提交，5651067是提交链上的末尾提交。
gitk --ancestry-path d9e1db9 5651067  显示tag之后的提交 如果你有v2.3的tag，你可以获取这个tag之后的所有提交
gitk v2.3..  参考：Git® Notes for Professionals book</description>
    </item>
    
    <item>
      <title>Bash专业笔记(三十四)</title>
      <link>http://blog.huaifufeng.com/2019/03/post/bash-section-34.html</link>
      <pubDate>Sat, 02 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>http://blog.huaifufeng.com/2019/03/post/bash-section-34.html</guid>
      <description>模式匹配和正则表达式 获取字符串正则匹配的内容 a=&#39;I am a simple string with digits 1234&#39; pat=&#39;(.*) ([0-9]+)&#39; [[ &amp;quot;$a&amp;quot; =~ $pat ]] echo &amp;quot;${BASH_REMATCH[0]}&amp;quot; echo &amp;quot;${BASH_REMATCH[1]}&amp;quot; echo &amp;quot;${BASH_REMATCH[2]}&amp;quot;  输出：
I am a simple string with digits 1234 I am a simple string with digits 1234  glob未匹配时的行为 $ mkdir globbing $ cd globbing $ mkdir -p folder/{sub,another}folder/content/deepfolder/ touch macy stacy tracy &amp;quot;file with space&amp;quot; folder/{sub,another}folder/content/deepfolder/file .hiddenfile $ shopt -u nullglob $ shopt -u failglob $ shopt -u dotglob $ shopt -u nocaseglob $ shopt -u extglob $ shopt -u globstar  在这个例子里面，使用nullglob和failglob时将没有匹配任何内容。无论使用了哪一个，如果没有匹配的时候，bash将会返回glob本身。</description>
    </item>
    
    <item>
      <title>Git专业笔记（三十九）</title>
      <link>http://blog.huaifufeng.com/2019/03/post/git-section-39.html</link>
      <pubDate>Sat, 02 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>http://blog.huaifufeng.com/2019/03/post/git-section-39.html</guid>
      <description>bundles 在本地创建一个bundle并应用到另一个 如果你想保持没有网络的机器上面的仓库的版本信息。 bundle允许你打包一台机器上这个仓库的对象和引用，然后应用到另一台机器的仓库上。
git tag 2016_07_04 git bundle create changes_between_tags.bundle [some_previous_tag]..2016_07_24  以某种方式把changes_between_tags.bundle传到远端的机器上，例如：thumb drive。一旦你有了这个文件：
git bundle verify changes_between_tags.bundle # make sure bundle arrived intact git checkout [some branch] # in the repo on the remote machine git bundle list-heads changes_between_tags.bundle # list the references in the bundle git pull changes_between_tags.bundle [reference from the bundle, e.g. last field from the previous output]  反过来也是可能的。一旦对远程存储库进行了更改，您就可以将增量放入bundle里面；将更改放在（例如）一个拇指驱动器上，然后将它们合并回本地存储库，这样两个存储库就可以保持同步，而不需要在计算机之间直接访问git、ssh、rsync或http协议。
参考：Git® Notes for Professionals book</description>
    </item>
    
    <item>
      <title>Bash专业笔记(三十三)</title>
      <link>http://blog.huaifufeng.com/2019/03/post/bash-section-33.html</link>
      <pubDate>Fri, 01 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>http://blog.huaifufeng.com/2019/03/post/bash-section-33.html</guid>
      <description>debug调试 使用-n检查脚本语法 使用-n允许你在不执行脚本的情况下检查这个脚本：
~&amp;gt; $ bash -n testscript.sh testscript.sh: line 128: unexpected EOF while looking for matching `&amp;quot;&#39; testscript.sh: line 130: syntax error: unexpected end of file  使用bashdb调试 bashdb是一个和gdb雷士的工具，使用这个工具你可以实现某行或者某个方法的中断，输出变量的内容，或者重启脚本等等。
通常可以使用包管理器按照这个工具，像在Fedroa中：
sudo dnf install bashdb  你可以从首页上获取这个工具。然后可以使用它像参数一样运行这个脚本：
bashdb &amp;lt;YOUR SCRIPT&amp;gt;  下面是一些你可以使用的命令：
l - show local lines, press l again to scroll down s - step to next line print $VAR - echo out content of variable restart - reruns bashscript, it re-loads it prior to execution.</description>
    </item>
    
    <item>
      <title>Git专业笔记（三十八）</title>
      <link>http://blog.huaifufeng.com/2019/03/post/git-section-38.html</link>
      <pubDate>Fri, 01 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>http://blog.huaifufeng.com/2019/03/post/git-section-38.html</guid>
      <description>解决冲突 手动解决 当你在执行一个git merge命令的时候，你可能会发现一个“merge conflict”的错误。这将会告诉你哪些文件冲突了，你需要解决这些冲突。
一个git status不管在什么时候都可以给你提供一个帮助信息，帮助你查看你需要做什么事情。
On branch master You have unmerged paths. (fix conflicts and run &amp;quot;git commit&amp;quot;) Unmerged paths: (use &amp;quot;git add &amp;lt;file&amp;gt;...&amp;quot; to mark resolution) both modified: index.html no changes added to commit (use &amp;quot;git add&amp;quot; and/or &amp;quot;git commit -a&amp;quot;)  Git在冲突文件中添加了一些标识来告诉你哪些地方发生冲突了：
&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt; HEAD: index.html #indicates the state of your current branch &amp;lt;div id=&amp;quot;footer&amp;quot;&amp;gt;contact : email@somedomain.com&amp;lt;/div&amp;gt; ========= #indicates break between conflicts &amp;lt;div id=&amp;quot;footer&amp;quot;&amp;gt; please contact us at email@somedomain.</description>
    </item>
    
    <item>
      <title>Bash专业笔记(三十二)</title>
      <link>http://blog.huaifufeng.com/2019/02/post/bash-section-32.html</link>
      <pubDate>Thu, 28 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>http://blog.huaifufeng.com/2019/02/post/bash-section-32.html</guid>
      <description>getopts:智能位置-参数分析    参数 详情     optstring 要识别的选项字符串   name 然后命名存储解析选项的位置    pingmap #!/bin/bash # Script name : pingnmap # Scenario : The systems admin in company X is tired of the monotonous job # of pinging and nmapping, so he decided to simplify the job using a script. # The tasks he wish to achieve is # 1. Ping - with a max count of 5 -the given IP address/domain.</description>
    </item>
    
    <item>
      <title>Git专业笔记（三十七）</title>
      <link>http://blog.huaifufeng.com/2019/02/post/git-section-37.html</link>
      <pubDate>Thu, 28 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>http://blog.huaifufeng.com/2019/02/post/git-section-37.html</guid>
      <description>show 简介 git show显示各种git对象。
显示Commit: 显示提交信息和其中包含的修改信息。
   Command Description     git show 显示之前的提交   git show @~3 显示最后提交之前第3个提交    显示tree和blob：    Command Description     git show @~3 显示项目的根目录，显示3个提交之前的（tree）   git show @~3:src/program.js 显示3个提交之前src/program.js的信息（blob）   git show @:a.txt @:b.txt 现在当前提交中a.txt和b.txt的拼接    显示tags: 显示tag的信息和引用的对象。
参考：Git® Notes for Professionals book</description>
    </item>
    
    <item>
      <title>Bash专业笔记(三十一)</title>
      <link>http://blog.huaifufeng.com/2019/02/post/bash-section-31.html</link>
      <pubDate>Wed, 27 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>http://blog.huaifufeng.com/2019/02/post/bash-section-31.html</guid>
      <description>花括号扩展 修改文件名扩展 $ mv filename.{jar,zip}  这个将会执行mv filename.jar filename.zip这个命令
创建按照年月分组文件的目录 $ mkdir 20{09..11}-{01-12}  执行ls命令，将会看到下面的目录被创建了：
2009-01 2009-04 2009-07 2009-10 2010-01 2010-04 2010-07 2010-10 2011-01 2011-04 2011-07 2011-10 2009-02 2009-05 2009-08 2009-11 2010-02 2010-05 2010-08 2010-11 2011-02 2011-05 2011-08 2011-11 2009-03 2009-06 2009-09 2009-12 2010-03 2010-06 2010-09 2010-12 2011-03 2011-06 2011-09 2011-12  在9前面加上0确保当个数字有一个0。你也可以在数字前面使用多个0，例如：
$ echo {001..10} 001 002 003 004 005 006 007 008 009 010  创建.文件的备份 $ cp .</description>
    </item>
    
    <item>
      <title>Git专业笔记（三十六）</title>
      <link>http://blog.huaifufeng.com/2019/02/post/git-section-36.html</link>
      <pubDate>Wed, 27 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>http://blog.huaifufeng.com/2019/02/post/git-section-36.html</guid>
      <description>迁移到git subGit subGit可以用来把SVN仓库一次性导入到git仓库内。
$ subgit import --non-interactive --svn-url http://svn.my.cm/repos/myproject myproject.git  使用Atlassian转换工具迁移SVN到GIT 从这里下载Atlassian转换工具。这个工具依赖于java，所以在你计划迁移之前确保你的本地安装有java运行环境JRE。
使用java -jar svn-migration-scripts.jar verify命令来检查你是否缺少完成迁移工作必须的程序。特别是这个命令会检查Git，subversion，git-svn工具。也会检查你的系统是否区分大小写。迁移到Git的工作应该在区分大小写的系统上进行，避免毁坏仓库。
接下来你需要生成一个作者文件。Subversion只追踪提交者做的修改。然而Git使用两种信息来区分一个用户：真实名称和邮箱地址。下面的命令会生成一个txt文件，会把Subversion的用户名和Git等价起来：
java -jar svn-migration-scripts.jar authors &amp;lt;svn-repo&amp;gt; authors.txt  这里是你想要进行转换的Subversion仓库的地址。运行这个命令只会，贡献者的身份信息会把映射到authors.txt中。邮箱地址会是下面这样的格式：@mycompany.com。在作者文件里面，你需要手动修改每一个人的默认名称（默认是他们的用户名）为他们的实际名称。在使用之前确保所有的邮箱地址是正确的。
下面的命令会克隆一个SVN库到Git仓库：
git svn clone --stdlayout --authors-file=authors.txt &amp;lt;svn-repo&amp;gt; &amp;lt;git-repo-name&amp;gt;  是像上面一样的仓库地址，是当前目录中用来克隆仓库的目录名称。在执行这个命令之前有一些需要注意的地方：
 —stdlayout选项告诉Git使用trunk，branches，tags目录的标准布局。非标准的Subversion仓库的布局要求你指定trunk目录，branch目录，tag目录的本地路径。这可以使用下面的例子：git svn clone --trunk=/trunk --branches=/branches --branches=/bugfixes --tags=/tags --quthors-file=authors.txt &amp;lt;svn-repo&amp;gt; &amp;lt;git-repo-name&amp;gt; 这个命令执行多长时间依赖于你仓库的大小 要减少大仓库的转换时间，这个转换过程可以在Subversion仓库的服务器上运行，减少网络传输时间  git svn clone将Subversion的分支（包括trunk）导入为远端的分支，包括Subversion的tags（远端分支前缀为tags/）。要将它们转换为实际的分支和标记，请在Linux机器上按提供的顺序运行以下命令。运行这个命令之后，git branch -a显示所有正确的分支名称，git tag -l显示仓库的标记。
git for-each-ref refs/remotes/origin/tags | cut -d / -f 5- | grep -v @ | while read tagname; do git tag $tagname origin/tags/$tagname; git branch -r -d origin/tags/$tagname; done git for-each-ref refs/remotes | cut -d / -f 4- | grep -v @ | while read branchname; do git branch &amp;quot;$branchname&amp;quot; &amp;quot;refs/remotes/origin/$branchname&amp;quot;; git branch -r -d &amp;quot;origin/$branchname&amp;quot;; done  这样从svn到Git的转换过程就完成了。可以使用push把本地的仓库推送到服务器。并且可以继续使用git来更新仓库，这个仓库包括svn的所有提交历史。</description>
    </item>
    
    <item>
      <title>Bash专业笔记(三十)</title>
      <link>http://blog.huaifufeng.com/2019/02/post/bash-section-30.html</link>
      <pubDate>Tue, 26 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>http://blog.huaifufeng.com/2019/02/post/bash-section-30.html</guid>
      <description>定制化PS1 修改终端的颜色和提示 gitPS1(){ gitps1=$(git branch 2&amp;gt;/dev/null | grep &#39;*&#39;) gitps1=&amp;quot;${gitps1:+ (${gitps1/#\* /})}&amp;quot; echo &amp;quot;$gitps1&amp;quot; } #Please use the below function if you are a mac user gitPS1ForMac(){ git branch 2&amp;gt; /dev/null | sed -e &#39;/^[^*]/d&#39; -e &#39;s/* \(.*\)/ (\1)/&#39; } timeNow(){ echo &amp;quot;$(date +%r)&amp;quot; } if [ &amp;quot;$color_prompt&amp;quot; = yes ]; then if [ x$EUID = x0 ]; then PS1=&#39;\[\033[1;38m\][$(timeNow)]\[\033[00m\] \[\033[1;31m\]\u\[\033[00m\]\[\033[1;37m\]@\[\033[00m\]\[\033[1;33m\]\h\[\033[00m\] \[\033[1;34m\]\w\[\033[00m\]\[\033[1;36m\]$(gitPS1)\[\033[00m\] \[\033[1;31m\]:/#\[\033[00m\] &#39; else PS1=&#39;\[\033[1;38m\][$(timeNow)]\[\033[00m\] \[\033[1;32m\]\u\[\033[00m\]\[\033[1;37m\]@\[\033[00m\]\[\033[1;33m\]\h\[\033[00m\] \[\033[1;34m\]\w\[\033[00m\]\[\033[1;36m\]$(gitPS1)\[\033[00m\] \[\033[1;32m\]:/$\[\033[00m\] &#39; fi else PS1=&#39;[$(timeNow)] \u@\h \w$(gitPS1) :/$ &#39; fi  下面就是配置终端的显示样式：</description>
    </item>
    
    <item>
      <title>Git专业笔记（三十五）</title>
      <link>http://blog.huaifufeng.com/2019/02/post/git-section-35.html</link>
      <pubDate>Tue, 26 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>http://blog.huaifufeng.com/2019/02/post/git-section-35.html</guid>
      <description>filter-branch修改提交历史 修改提交作者 你可以使用环境筛选器修改提交的作者。只需要在修改提交作者的脚本中修改并导出$GIT_AUTHOR_NAME。
创建一个包含下面内容的filter.sh脚本：
if [ &amp;quot;$GIT_AUTHOR_NAME&amp;quot; = &amp;quot;Author to Change From&amp;quot; ] then export GIT_AUTHOR_NAME=&amp;quot;Author to Change To&amp;quot; export GIT_AUTHOR_EMAIL=&amp;quot;email.to.change.to@example.com&amp;quot; fi  然后在命令行中运行这个命令：
chmod +x ./filter.sh git filter-branch --env-filter ./filter.sh  修改提交人为提交作者 下面的命令修改commit1..commit2之间提交的提交人为提交的作者。
git filter-branch -f --commit-filter \ &#39;export GIT_COMMITER_NAME=\&amp;quot;$GIT_AUTHOR_NAME\&amp;quot;; export GIT_COMMITER_EMAIL=\&amp;quot;$GIT_AUTHOR_EMAIL\&amp;quot;; export GIT_COMMITER_DATE=\&amp;quot;$GIT_AUTHOR_DATE\&amp;quot;; git commit-tree $@&#39; \ -- commit1..commit2  参考：Git® Notes for Professionals book</description>
    </item>
    
    <item>
      <title>Bash专业笔记(二十九)</title>
      <link>http://blog.huaifufeng.com/2019/02/post/bash-section-29.html</link>
      <pubDate>Mon, 25 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>http://blog.huaifufeng.com/2019/02/post/bash-section-29.html</guid>
      <description>可编程补全 函数实现补全 _mycompletion(){ local command_name=&amp;quot;$1&amp;quot; local current_word=&amp;quot;$2&amp;quot; local previous_word=&amp;quot;$3&amp;quot; # COMPREPLY is an array which has to be filled with the possible completions # compgen is used to filter matching completions COMPREPLY==( $(compgen -W &#39;hello world&#39; -- &amp;quot;$current_word&amp;quot;) ) } complette -F _mycompletion mycommand  使用例子：
$ mycommand [TAB][TAB] hello world $ mycommand h[TAB][TAB] $ mycommand hello  选项和文件名的简单补全 # The following shell function will be used to generate completions for # the &amp;quot;nuance_tune&amp;quot; command.</description>
    </item>
    
    <item>
      <title>Git专业笔记（三十四）</title>
      <link>http://blog.huaifufeng.com/2019/02/post/git-section-34.html</link>
      <pubDate>Mon, 25 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>http://blog.huaifufeng.com/2019/02/post/git-section-34.html</guid>
      <description>Archive    参数 详情     —format= 归档结果的格式：tar或zip。如果没有这个选项，并且提供了文件名称，可能的话就会从文件名中解析。否则就是tar。   -l,—list 列出所有有效的归档   -v,—verbose 将详细的进度输出到stderr   —prefix=/ 在归档的每个文件前面添加/   -o file, —output file 把归档写入某个文件，而不是stdout   —worktree-abttributes 寻找工作树中gitattributes中的属性    可以是任何归档后台程序理解的选项。对zip来说，使用-0是不降低质量，使用-1到-9调整压缩速度和比率   —remote= 从远端仓库获取归档而不是从本地仓库   —exec= 使用—remote来指定远端上的路径    用来归档的tree或者提交    如果没有一个选项，本地工作目录的所有文件和目录都会被包含在归档中。如果一个或多个路径制定了，只会把这些文件包含到归档内。    创建git仓库的归档 使用git archive命令可以创建仓库的压缩归档文件，例如用来分发版本。
创建一个当前HEAD修订的归档文件：
git archive --format tar HEAD | cat &amp;gt; archive-HEAD.</description>
    </item>
    
    <item>
      <title>Bash专业笔记(二十八)</title>
      <link>http://blog.huaifufeng.com/2019/02/post/bash-section-28.html</link>
      <pubDate>Sun, 24 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>http://blog.huaifufeng.com/2019/02/post/bash-section-28.html</guid>
      <description>过程替换 比较web文件 下面的例子用diff命令执行过程替换来比较两个文件，而不是创建两个临时文件。
diff &amp;lt;(curl http://www.example.com/page1) &amp;lt;(curl http://www.example.com/page2)  while循环从命令输出获取 下面使用grep命令的输出作为while循环的输出参数：
while IFS=&amp;quot;:&amp;quot; read -r user _ do #&amp;quot;$user&amp;quot; 有/etc/passwd中的密码 done &amp;lt; &amp;lt;(grep &amp;quot;hello&amp;quot; /etc/passwd)  拼接文件 总所周知，你不能在一个命令里面把一个文件既当做输入文件也当做输出文件，例如：
$ cat header.txt body.txt &amp;gt;body.txt  不会产生你希望的结果。当cat命令读取body.txt文件的内容时，这个文件已经被重定向截断，并且内容是空。最后body.txt只会有header.txt的内容。
某些人可能相应使用进程替换来避免这个效果，就是下边这样：
$ cat header.txt &amp;lt;(cat body.txt) &amp;gt; body.txt  将强制在重定向截断文件之前，将body.txt的原始内容以某种方式保存在某个缓冲区中。但是这并没有作用。括号中的cat只有在所有文件描述符都设置好之后才开始读取文件，就像外部的描述符一样。在这种情况下，尝试使用流程替换是没有意义的。
将文件预处理到另一个文件的唯一方法是创建中间文件：
$ cat header.txt body.txt &amp;gt; body.txt.new $ mv body.txt.new body.txt  当使用交互编辑选项-i调用sed、perl或类似的命令时，会在后台默默执行这些命令。
同时通过多个程序传输文件 下面的命令使用wc -l计算同时使用gzip压缩大文件的行数，两者同时运行：
$ tee &amp;gt;(wc -l &amp;gt;&amp;amp;2) &amp;lt; bigfile | gzip &amp;gt; bigfile.</description>
    </item>
    
    <item>
      <title>Git专业笔记（三十三）</title>
      <link>http://blog.huaifufeng.com/2019/02/post/git-section-33.html</link>
      <pubDate>Sun, 24 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>http://blog.huaifufeng.com/2019/02/post/git-section-33.html</guid>
      <description>git-svn 克隆一个SVN仓库 你需要使用下面的命令创建一个仓库的本地新副本。
git svn clone SVN_REPO_ROOT_URL [DEST_FOLDER_PATH] -T TRUNK_REPO_PATH -t TAGS_REPO_PATH -b BRANCHES_REPO_PATH  如果你的SVN仓库在标准的模式下面（trunk，branchs，tags目录），你可以使用下面的命令。
git svn clone -s SVN_REPO_ROOT_URL [DEST_FOLDER_PATH]  git svn clone命令一个接一个的切换成SVN的修改，在你的本地仓库新建一个Git提交来重建历史的提交。如果SVN仓库有很多的提交，这将会花费很多的时间。
当命令执行完毕之后，你会获得一个仓库的完整信息，本地的git分支名称叫做master，也就是SVN仓库的trunk分支。
推送修改到SVN 下面的命令
git svn dcommit  将会为你本地的每一个git提交创建一个SVN的修订历史。和svn一样，你的本地git仓库必须同步svn仓库的全部修改，所以如果这个命令失败了，就先尝试运行git svn rebase。
在本地工作 就像git仓库一样使用本地的git仓库，使用git常用的命令：
 git add FILE和git checkout — FILE暂存或取消暂存一个文件 git commit来提交修改。这些提交都是本地的，不会推送到SVN仓库，像普通的git仓库一样。 git stash和git stash pop暂存和应用暂存修改 git reset HEAD —hard恢复本地所有的修改 git log访问仓库的所有历史 git rebase -i可以自由的修改提交历史 git branch和git checkout -b创建新的本地分支  就像git-svn描述的：Subversion是一个远没有git复杂的系统。所以你不能在不毁坏Subversion服务的情况下使用过全部的git功能。幸运的是规则非常简单：保持线性的提交历史。
这意味着你可以做几乎所有的git操作：创建分支，删除/重拍/压缩提交，改变提交历史，删除提交等等。除了merge操作。如果你要整合本地提交的历史，使用git rebase命令。
当你进行merge操作的时候，一个merge提交就建立了。一个特别需要注意的事：merge提交拥有两个父提交，这样提交历史就不是线性的了。当你推送一个merge提交到这个仓库的时候，SVN会非常糊涂。</description>
    </item>
    
    <item>
      <title>Bash专业笔记(二十七)</title>
      <link>http://blog.huaifufeng.com/2019/02/post/bash-section-27.html</link>
      <pubDate>Sat, 23 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>http://blog.huaifufeng.com/2019/02/post/bash-section-27.html</guid>
      <description>Scoping 动态作用域 动态作用域的含义是：动态范围是指变量查找发生在调用函数的范围内，而不是在定义函数的范围内。
$ x=3 $ func1 () { echo &amp;quot;in func1: $x&amp;quot;;} $ func2 () { local x=9; func1;} $ func2 in func1 9 $ func1 in func1: 3  在词汇范围语言中，func1总是在全局范围中查找x的值，因为func1是在本地范围中定义的。
在动态范围语言中，func1查找调用它的范围。当从func2中调用它时，它首先在func2的主体中查找值x。如果没有在那里定义它，它将在全局范围中查找，其中func2是从全局范围调用的。
参考：Bash Notes for Professionals book</description>
    </item>
    
    <item>
      <title>Git专业笔记（三十二）</title>
      <link>http://blog.huaifufeng.com/2019/02/post/git-section-32.html</link>
      <pubDate>Sat, 23 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>http://blog.huaifufeng.com/2019/02/post/git-section-32.html</guid>
      <description>空目录 假设你用下面的目录结构初始化了一个项目：
/build app.js  然后你添加所有的文件并且提交：
git init git add . git commit -m &amp;quot;Initial commit&amp;quot;  git将会值追踪app.js文件。
假设你想应用程序添加了一个构建步骤，并依赖“构建”目录作为输出目录（你不想让它成为每个人都必须遵循的安装命令），惯例是在目录中包含一个“.gitkeep”文件，并让git跟踪该文件。
/build .gitkeep app.js  然后添加这个新文件：
git add build/.gitkeep git commit -m &amp;quot;Keep the build directory around&amp;quot;  git现在追踪文件build/.gitkeep，因此build目录讲座签出时有效。同时这只是一个月的，而不是git的特性。
参考：Git® Notes for Professionals book</description>
    </item>
    
    <item>
      <title>Bash专业笔记(二十六)</title>
      <link>http://blog.huaifufeng.com/2019/02/post/bash-section-26.html</link>
      <pubDate>Fri, 22 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>http://blog.huaifufeng.com/2019/02/post/bash-section-26.html</guid>
      <description>Bash算法    参数 详情     EXPRESSION 执行的表达式    (())算法 #!/bin/bash echo $((2 + 1))  输出3。
#!/bin/bash var1=4 var2=5 ((output=$var1 * $var2)) printf &amp;quot;%d\n&amp;quot; &amp;quot;$output&amp;quot;  输出20
算法命令  let
let num=1+2 let num=&amp;quot;1+2&amp;quot; let &#39;num= 1 + 2&#39; let num=1 num+=2   如果有空格或者填充字符，你就需要引号了。所有下面会出现错误：
 let num= 1 + 2 //错误 let &#39;num = 1 + 2&#39; //正确 let a[1] = 1 + 1 //错误 let &#39;a[1] = 1 + 1&#39; //正确   (())</description>
    </item>
    
    <item>
      <title>Git专业笔记（三十一）</title>
      <link>http://blog.huaifufeng.com/2019/02/post/git-section-31.html</link>
      <pubDate>Fri, 22 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>http://blog.huaifufeng.com/2019/02/post/git-section-31.html</guid>
      <description>git-tfs git-tfs克隆 这将创建一个和项目名一样的目录，/My.Project.Name：
$ git tfs clone http://tfs:8080/tfs/DefaultCollection/ $/My.Project.Name  从裸Git仓库克隆 从git仓库克隆比直接从TFV仓库克隆快10倍，并且在团队中工作的很好。至少有一个团队成员必须首先通过执行常规的git-tfs克隆来创建裸露的git存储库。然后可以引导新的存储库使用TFV。
$ git clone x:/fileshare/git/My.Project.Name.git $ cd My.Project.Name $ git tfs bootstrap $ git tfs pull  通过Chocolatey安装 下面假设你使用kdiff3来进行文件差异，虽然不是必须的但是这是给好主意：
C:\&amp;gt; choco install kdiff3  可以先安装Git，这样就可以说出你想要的任何参数。这里还安装了所有Unix工具，&amp;rsquo;NoAutoCrlf&amp;rsquo;表示按原样切换，按原样提交。
C:\&amp;gt; choco install git -params &#39;&amp;quot;/GitAndUnixToolsOnPath /NoAutoCrlf&amp;quot;&#39;  这是所有你使用Chocolatey安装git-tfs的所有事情：
C:\&amp;gt; choco install git-tfs  签入 启动TFVS的“检入”对话框。
$ git tfs checkintool  这将占用您所有的本地提交并创建一个单一的check-in。
推送 推送本地的所有提交到TFVS远端。
$ git tfs rcheckin  注意：如果需要签入备注，这将失败。 可以通过将git-tfs-force：rcheckin添加到提交消息来绕过这些。
参考：Git® Notes for Professionals book</description>
    </item>
    
    <item>
      <title>Bash专业笔记(二十五)</title>
      <link>http://blog.huaifufeng.com/2019/02/post/bash-section-25.html</link>
      <pubDate>Thu, 21 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>http://blog.huaifufeng.com/2019/02/post/bash-section-25.html</guid>
      <description>Math dc是Unix系统中最古老的命令之一。
它使用reverse polish notation，这意味着：你首先存在数字，然后提供操作符。例如1+1就写成1 1 +。
打印前面存储的数据，使用p命令：
$ echo &#39;2 3 + p&#39; | dc 5 # 或者 $ dc &amp;lt;&amp;lt;&amp;lt; &#39;2 3 + p&#39; 5  你可以多次打印顶层元素：
$ dc &amp;lt;&amp;lt;&amp;lt; &#39;1 1 + p 2 + p&#39; 2 4  负数使用_前缀：
$ dc &amp;lt;&amp;lt;&amp;lt; &#39;_1 p&#39; -1  你可以使用A到F之前的字符标识10到15之间的数字。.表示小数符合。
$ dc &amp;lt;&amp;lt;&amp;lt; &#39;A.4 p&#39; 10.4  dc是任意精度的，这意味着只要内存许可精度是不收限制的。默认情况下精度是0：
$ dc &amp;lt;&amp;lt;&amp;lt; &#39;4 3 / p&#39; 1  我们可以提升之前命令的精度使用k命令。像下面这样：</description>
    </item>
    
    <item>
      <title>Git专业笔记（三十）</title>
      <link>http://blog.huaifufeng.com/2019/02/post/git-section-30.html</link>
      <pubDate>Thu, 21 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>http://blog.huaifufeng.com/2019/02/post/git-section-30.html</guid>
      <description>内部概念 仓库 一个git repository就是硬盘上面存储了一系列的文件和目录信息的数据结构。
这些信息在你的.git/目录下面。每一次你使用git提交数据，它都会把数据存储在这里。反过来说，.git/目录保存了每一个单独提交。
它基本的结构像下面一样：
.git/ objects/ refs/  对象 Git从根本上说是一个键值存储。当你向git添加数据的时候，将会构建一个对象，并且使用对象内容的SHA-1值作为键值。
因此，任何git里面的内容都可以通过hash值找到：
git cat-file -p 4bb6f98  有四种类型的对象：
 blob tree commit tag  HEAD引用 HEAD是一个特殊的ref。它将会一直指向当前的对象。
你可以查看.git/HEAD文件当前指向的内容。
一般来说，HEAD指向另一个ref：
$ cat .git/HEAD ref: refs/heads/mainline  但是它也可以指向另外的对象：
$ cat .git/HEAD 4bb6f98a223abc9345a0cef9200562333  这就是所谓的“分离的头部”——因为HEAD不连接（指向）任何引用，而是直接指向一个对象。
引用 一个ref本质是一个指针，指向对象的名称。例如：
&amp;quot;master&amp;quot; --&amp;gt; 1a410e...  他们都存储在.git/refs/heads/这个文本文件内。
$ cat .git/refs/heads/mainline 4bb6f98a223abc9345a0cef9200562333  这通常被叫做分支。但是你要注意在Git里面没有分支，只有引用。
现在完全可以通过hash值来跳转到不同的对象。但这会非常不方便。引用提供了一个便捷的名称来引用对象。要求Git按名称而不是哈希去特定的地方要容易得多。
提交对象 提交可能是用户最熟悉的对象类型。因为这是他们使用git命令创建的对象类型。
然后提交没有直接包含任何修改过的文件或数据。相反，它主要包括元数据和指向其他对象的指针，这些对象包含提交的实际内容。
一个提交对象包含下面的内容：
 一个tree的hash值 父commit的hash值 作者的名称/邮箱，提交者的名称/邮箱 提交信息  你可以像下面一样查看任何提交的内容：
$ git cat-file commit 5bac93 tree 04d1daef.</description>
    </item>
    
    <item>
      <title>Bash专业笔记(二十四)</title>
      <link>http://blog.huaifufeng.com/2019/02/post/bash-section-24.html</link>
      <pubDate>Wed, 20 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>http://blog.huaifufeng.com/2019/02/post/bash-section-24.html</guid>
      <description>Bash的历史替换 快速引用 操作历史记录 #列出所有之前的命令 history #如果你不小心输入了命令，这时候清除所有的历史是很有用的 history -c  事件指示符 #执行历史中第n行的命令 !n #执行最后的命令 !! #执行最后以&#39;text&#39;文本开始的命令 !text #执行最后包含&#39;text&#39;的命令 !?text #执行n行之前的命令 !-n #执行最后一个以&#39;foo&#39;开头的并将&#39;foo&#39;替换为&#39;bar&#39;的命令 ^foo^bar^ #执行当前的命令 !#  单词指示符 它们由:与它们所引用的事件指示符分开。如果事件指示符不是数字开始的，可以省略冒号：!^和!:^是一样的。
#获取最后命令的第一个参数 !^ #获取最后命令的最后参数(!!:$的短格式) !$ #获取最后命令的第3个参数 !:3 #获取最后命令从x到y之间的参数，可以是数字，也可以是 $ ^ !:x-y #获取最后命令处理第0个之外的所有参数，等价于 :^-$ !*  修改 这些会修改前面的事件或单词指示符。
#使用sed语法替换。允许标记在s和可选分隔符之前 :s/foo/bar/ #替换最开始的foo为bar :gs|foo|bar| #替换所有的foo为bar #从最后一个参数删除前导路径(tail) :t #从最后一个参数删除尾随路径(head) :h #删除最后一个参数的文件扩展名 :r  如果Bash变量HISTCONTROL包含ignorrespace或ignoreboth（或者包含模式[ ]*）,这样你不想把你的命令添加到history的时候，可以在命令前面添加空格：
#不保存 foo #保存 bar  以sudo权限执行之前的命令 $ apt-get install r-base E: Could not open lock file /var/lib/dpkg/lock - open (13: Permission denied) E: Unable to lock the administration directory (/var/lib/dpkg/), are you root?</description>
    </item>
    
    <item>
      <title>Git专业笔记（二十九）</title>
      <link>http://blog.huaifufeng.com/2019/02/post/git-section-29.html</link>
      <pubDate>Wed, 20 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>http://blog.huaifufeng.com/2019/02/post/git-section-29.html</guid>
      <description>push    参数 详情     &amp;ndash;force 强制重命名或移动一个文件，哪怕目标已经存在   —verbose 运行详细信息    将要push到的远端仓库   &amp;hellip; 指明将要使用本地ref或对象更新的远端引用    在Git修改，暂存和提交代码之后，接下来就需要push操作来把你本地的修改分享给其他人，把你本地的修改推送到仓库服务器。这个主题主要介绍如果使用Git来推送代码。
推送指定对象到远端分支 一般语法 git push &amp;lt;remottename&amp;gt; &amp;lt;object&amp;gt;:&amp;lt;remotebranchname&amp;gt;  例子 git push origin master:wip-yourname  这个例子将会推送你本地的master分支到origin的wip-yourname分支上面（一般是你克隆的仓库）。
删除远端分支 删除远端分支就等价于推送一个空对象到远端。
git push &amp;lt;remotename&amp;gt; :&amp;lt;remotebranchname&amp;gt;  例子 git push origin :wip-yourname  将会删除你的远端分支wip-yourname。
除了使用冒号，你可以使用—delete选项来代替，在一些情况下是更加可读的。
例子 git push origin --delete wip-yourname  推送单独提交 如果你本地有一个单独的提交，你想要推送到远端不推送其他的内容，你可以使用下面的命令：
git push &amp;lt;remotename&amp;gt; &amp;lt;commit SHA&amp;gt;:&amp;lt;remotebrranchname&amp;gt;  例子 假设存在一个像下面一样的提交历史：</description>
    </item>
    
    <item>
      <title>Bash专业笔记(二十三)</title>
      <link>http://blog.huaifufeng.com/2019/02/post/bash-section-23.html</link>
      <pubDate>Tue, 19 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>http://blog.huaifufeng.com/2019/02/post/bash-section-23.html</guid>
      <description>脚本变量 多变量解析 解析很多变量，最好的办法就是使用while循环，加上case语句和shift。
shift是从一系列变量中回去第一个变量，比如当前是$1，使用这个你将会获得$2。这在一次处理多个变量的时候非常有用。
#!/bin/bash #加载用户定义的变量 while [[ $# &amp;gt; 0 ]] do case &amp;quot;$1&amp;quot; in -a|--valueA） valA=&amp;quot;$2&amp;quot; shift ;; -b|--valueB) valB=&amp;quot;$2&amp;quot; shift ;; --help|*) echo &amp;quot;Usage:&amp;quot; echo &amp;quot; --valueA \&amp;quot;value\&amp;quot;&amp;quot; echo &amp;quot; --valueB \&amp;quot;\value&amp;quot;&amp;quot; echo &amp;quot; --help&amp;quot; exit 1 ;; esac shift done echo &amp;quot;A: $valA&amp;quot; echo &amp;quot;B: $valB&amp;quot;  输入和输出：
$ ./multipleParams.sh --help Usage: --valueA &amp;quot;value&amp;quot; --valueB &amp;quot;value&amp;quot; --help $ ./multipleParams.sh A: B: $ ./multipleParams.sh --valueB 2 A: B: 2 $ .</description>
    </item>
    
    <item>
      <title>Git专业笔记（二十八）</title>
      <link>http://blog.huaifufeng.com/2019/02/post/git-section-28.html</link>
      <pubDate>Tue, 19 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>http://blog.huaifufeng.com/2019/02/post/git-section-28.html</guid>
      <description>重命名    参数 详情     -f 或者&amp;ndash;force 强制重命名或移动一个文件，哪怕目标已经存在    重命名目录 重命名一个目录，从oldname到newname：
git mv directoryToFolder/oldName directoryToFolder/newName  然后就可以git commit和git push了。
如果出现了错误：
 fatal: renaming &amp;lsquo;directoryToFolder/oldName&amp;rsquo; failed: Invalid argument
 使用下面的命令：
git mv directoryToFolder/oldName temp &amp;amp;&amp;amp; git mv temp directoryToFolder/newName  重命名本地和远端分支 最简单的方式是切换出本地的分支：
git checkout old_branch  然后重命名本地分支，删除老分支，设置上游的新分支名称：
git branch -m new_branch git push origin :old_branch git push --set-upstream origin new_branch  重命名本地分支 你可以使用下面的命令重命名本地分支：</description>
    </item>
    
    <item>
      <title>Bash专业笔记(二十二)</title>
      <link>http://blog.huaifufeng.com/2019/02/post/bash-section-22.html</link>
      <pubDate>Mon, 18 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>http://blog.huaifufeng.com/2019/02/post/bash-section-22.html</guid>
      <description>条件表达式 文件类型检查 -e检查文件是否存在，包括所有的文件类型（如：括号，文件。。。）
if [[ -e $filename ]]; then echo &amp;quot;$filename exists&amp;quot; fi  也可以对指定类型的文件格式进行检查：
if [[ -f $filename ]]; then echo &amp;quot;$filename is a regular file&amp;quot; elif [[ -d $filename ]]; then echo &amp;quot;$filename is a directory&amp;quot; elif [[ -p $filename ]]; then echo &amp;quot;$filename is a named pipe&amp;quot; elif [[ -S $filename ]]; then echo &amp;quot;$filename is a named socket&amp;quot; elif [[ -b $filename ]]; then echo &amp;quot;$filename is a block device&amp;quot; elif [[ -c $filename ]]; then echo &amp;quot;$filename is a character device&amp;quot; fi if [[ -L $filename ]]; then echo &amp;quot;$filename is a symbolic link (to any file type)&amp;quot; fi  对于符号链接，使用-L这些测试应用到目标上，当时坏链接的时候返回false。</description>
    </item>
    
    <item>
      <title>Git专业笔记（二十七）</title>
      <link>http://blog.huaifufeng.com/2019/02/post/git-section-27.html</link>
      <pubDate>Mon, 18 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>http://blog.huaifufeng.com/2019/02/post/git-section-27.html</guid>
      <description>子树 创建、拉入和反向端口子树 创建子树 添加一个新的远端plugin指向组件的远端仓库：
git remote add plugin https://path.to/remotes/plugin.git  然后创建一个子树指定一个plugins/demo前缀的新目录。plugin是远端的名称，master是引用的子树仓库的master分支名。
git subtree add --prefix=plugins/demo plugin master  子树更新 pull拉取plugin中正常的提交：
git subtree pull --prefix=plugins/demo plugin master  反向端口子树更新  指定在超级项目中进行的要进行反向移植的提交：
git commit -am &amp;quot;new changes to be backported&amp;quot;  签出要合并的新分支，设置为跟踪子树存储库
git checkout -b backport plugin/master  Cherry-pick backports
git cherry-pick -x --strategy=subtree master  推送修改到远端的plugin
git push plugin backport:master   参考：Git® Notes for Professionals book</description>
    </item>
    
    <item>
      <title>Bash专业笔记(二十一)</title>
      <link>http://blog.huaifufeng.com/2019/02/post/bash-section-21.html</link>
      <pubDate>Sun, 17 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>http://blog.huaifufeng.com/2019/02/post/bash-section-21.html</guid>
      <description>引号 变量和命令替换的双引号 变量的个替换只能够被用在双引号中。
calculation=&#39;2 * 3&#39; echo &amp;quot;$calculation&amp;quot; # prints 2 * 3 echo $calculation # prints 2, the list of files in the current directory, and 3 echo &amp;quot;$(($calculation))&amp;quot; # prints 6  在双引号之外，$var使用变量var的值，然后用空格分隔这个值的每一部分，并将每一部分解析为一个(通配符)模式。除非你需要这种方式，否则每次都把$var放到双引号里面&amp;quot;$var&amp;quot;。
这也适用于命令的方式，&amp;quot;$(mycommand)&amp;quot;输出mycommand的值。mycommand将会输出空格分隔之后的结果。
echo &amp;quot;$var&amp;quot; # good echo &amp;quot;$(mycommand)&amp;quot; # good another=$var # also works, assignment is implicitly double-quoted make -D THING=$var # BAD! This is not a bash assignment. make -D THING=&amp;quot;$var&amp;quot; # good make -D &amp;quot;THING=$var&amp;quot; # also good  命令替换有它自己的上下文环境。编写任意嵌套替换很容易，因为解析器将跟踪嵌套深度，而不是贪婪地搜索第一个“字符”。不过，StackOverflow语法高亮分析错误。例如：</description>
    </item>
    
    <item>
      <title>Git专业笔记（二十六）</title>
      <link>http://blog.huaifufeng.com/2019/02/post/git-section-26.html</link>
      <pubDate>Sun, 17 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>http://blog.huaifufeng.com/2019/02/post/git-section-26.html</guid>
      <description>暂存    参数 详情     show 线上暂存区中处于暂存状态的文件和原始父文件的不同，当没有时，显示最新的一个。   list 列出当前拥有的暂存内容。每一个列出的暂存有名称（stash@{0}是最新的，stash@{1}是上一个），暂存创建是处于的分支名称，暂存基于的提交的简单描述   pop 从暂存列表中删除一个暂存，并把修改应用到当前工作树状态内   apply 和pop类似，但是不会删除暂存列表中的新   clear 删除所有的暂存信息。注意这些状态都会被删除，并且无法修复   drop 从暂存列表删除一个暂存状态。当没有给出时，会删除最新的一个stash@{0}。否则是stash列表中指向stash@{}中的有效信息   create 创建一个stash（它是一个常规提交对象）并返回其对象名，而不将其存储在ref命名空间的任何位置。这对脚本很有用。它可能不是您想要使用的命令；请参见上面的“save”。   store 将通过git stash create创建的给定存储（这是一个悬空合并提交）存储在stash ref中，更新stash reflog。这对脚本很有用。它可能不是您想要使用的命令；请参见上面的“save”。    什么是暂存 当在一个项目上面做开发，你目前在一个特性分支上做修改做了一半，但是现在master分支出现了一个bug。你还没有准备好提交你的信息，但是你也不想丢掉你的修改。这个就到git stash出马的时候了。
运行git status查看你当前分支没有提交的修改：
(master) $ git status On branch master Your branch is up-to-date with &#39;origin/master&#39;. Changes not staged for commit: (use &amp;quot;git add &amp;lt;file&amp;gt;.</description>
    </item>
    
    <item>
      <title>Bash专业笔记(二十)</title>
      <link>http://blog.huaifufeng.com/2019/02/post/bash-section-20.html</link>
      <pubDate>Sat, 16 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>http://blog.huaifufeng.com/2019/02/post/bash-section-20.html</guid>
      <description>Here语法 here文档执行命令 ssh -p 21 example@example.com &amp;lt;&amp;lt;EOF echo &#39;printing pwd&#39; echo &amp;quot;\${pwd}&amp;quot; ls -a find &#39;*.txt&#39; EOF  $这里是被逃脱的，因为我们不想让这个变量在当前shell中解析。$(pwd)应该在远端的shell中执行。
另外一种方式：
ssh -p 21 example@example.com &amp;lt;&amp;lt;&#39;EOF&#39; echo &#39;printing pwd&#39; echo &amp;quot;$(pwd)&amp;quot; ls -a find &#39;*.txt&#39; EOF  注意：这个结束的EOF标识需要在一行的最开始（前面没有任何空格）。如果需要缩进的话，当你的hera语法是以&amp;lt;&amp;lt;-开头的话，可以使用tab。查看here文档的缩进和限制字符串来获取更多信息。
here缩进 你可以在here文档中使用tab来进行缩进操作，但是这个时候你就需要使用&amp;lt;&amp;lt;-来代替&amp;lt;&amp;lt;符号了：
$ cat &amp;lt;&amp;lt;- EOF This is some content indented with tabs `\t`. You cannot indent with spaces you __have__ to use tabs. Bash will remove empty space before these lines. __Note__: Be sure to replace spaces with tabs when copying this example.</description>
    </item>
    
    <item>
      <title>Git专业笔记（二十五）</title>
      <link>http://blog.huaifufeng.com/2019/02/post/git-section-25.html</link>
      <pubDate>Sat, 16 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>http://blog.huaifufeng.com/2019/02/post/git-section-25.html</guid>
      <description>clone 浅克隆 克隆一个大项目（像已经有多年历史的项目）可能会花费很长的时间，或者因为需要传输太多的数据而出现问题。因此你不需要获取所有有效的历史，你可以使用一个浅克隆：
git clone [repo_url] --depth 1  上面的命令只会获取远端仓库的最新提交。
注意你可能无法在浅克隆仓库中解析merge提交。获取足够解析merge提交的提交数是个好的主意。例如，获取至少50个提交：
git clone [rrepo_url] --depth 50  之后如果需要的话，你可以fetch仓库其他的提交：
Version &amp;gt;= 1.8.3
git fetch --unshallow # equivalent of git fetch -–depth=2147483647 # fetches the rest of the repository  Version &amp;lt; 1.8.3
git fetch --depth=1000 # fetch the last 1000 commits  普通克隆 下载整个仓库包括所有的历史和所有的分支，输入：
git clone &amp;lt;url&amp;gt;  上面的例子将会把仓库的信息放到一个和仓库名称一致的目录内。
下载一个仓库，并且把仓库的信息放到指定的目录内：
git clone &amp;lt;url&amp;gt; [directory]  克隆指定分支 克隆一个仓库指定的分支，可以在仓库地址前面加上--branch选项：
git clone --branch &amp;lt;branch_name&amp;gt; &amp;lt;url&amp;gt; [directory]  也可以使用—branch选项的简写格式-b。这个命令会下载整个仓库，并且切换到&amp;lt;branch_name&amp;gt;分支。</description>
    </item>
    
    <item>
      <title>Bash专业笔记(十九)</title>
      <link>http://blog.huaifufeng.com/2019/02/post/bash-section-19.html</link>
      <pubDate>Fri, 15 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>http://blog.huaifufeng.com/2019/02/post/bash-section-19.html</guid>
      <description>Source source一个文件和执行命令是不同的，因为所有的命令都是在当前bash会话的上下文环境中执行的—这就意味着所有的变量、函数或别名在整个会话中是保持不变的。
创建一个你想要source的文件sourcename.sh：
#!/bin/bash export A=&amp;quot;hello_world&amp;quot; alias sayHi=&amp;quot;echo Hi&amp;quot; sayHello() { echo Hello }  在你当前的bash会话中，source这个文件：
$ source sourcename.sh  从这时开始，在当前的会话中你拥有了被source文件内的所有变量：
$ echo $A hello_world $ sayHi Hi $ sayHello Hello  另外注意：.命令是source命令的简称，所以你可以简单的使用下面的命令：
. sourcename.sh  source虚拟环境 当在一个机器上面开发多个应用的时候，把不同的依赖分别放入不同的虚拟环境是很有用的。
通过使用virtualenv命令，这些环境变量被source到你的shell环境中。这样当你执行一个命令的时候，它是被运行在一个虚拟环境中。
下面是使用pip按照软件的常用方法：
pip install https://github.com/pypa/virtualenv/tarball/15.0.2  创建一个新的环境变量：
virtualenv --python=python3.5 my_env  激活这个环境：
source my_env/bin/activate  参考：Bash Notes for Professionals book</description>
    </item>
    
    <item>
      <title>Git专业笔记（二十四）</title>
      <link>http://blog.huaifufeng.com/2019/02/post/git-section-24.html</link>
      <pubDate>Fri, 15 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>http://blog.huaifufeng.com/2019/02/post/git-section-24.html</guid>
      <description>钩子 pre-push 在Git1.8.2及以上是有效的。
Version&amp;gt;=1.8
Pre-push钩子可以用来避免过度推送。这很有用，这是其中的一些原因：阻止意外的手动推送到指定分支，或者当遇到错误时阻止推送（单元检测，语法等）。
创建一个Pre-push钩子是很贱的，只需要在.git/hooks/目录下面创建一个名为pre-push的文件，（警戒），并且确保这个文件有执行的权限：chmod +x ./git/hooks/pre-push。
下面是Hannah Wolfe提供的一个阻止推送到master分支的钩子：
#!/bin/bash protected_branch=&#39;master&#39; current_branch=$(git symbolic -ref HEAD | sed -e &#39;s,.*/\(.*\),\1,&#39;) if [$protected_branch = $current_branch] then read -p &amp;quot;You&#39;re about to push master, is that what you intended? [y|n] &amp;quot; -n 1 -r &amp;lt; /dev/tty echo if echo $REPLY | grep -E &#39;^[Yy]$&#39; &amp;gt; /dev/null then exit 0 #push 将会执行 fi exit 1 #push 将不会执行 else exit 0 #push 执行 fi  下面是Volkan Unsal提供的要求在push之前需要确保通过了RSpec的测试的例子：</description>
    </item>
    
    <item>
      <title>Bash专业笔记(十八)</title>
      <link>http://blog.huaifufeng.com/2019/02/post/bash-section-18.html</link>
      <pubDate>Thu, 14 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>http://blog.huaifufeng.com/2019/02/post/bash-section-18.html</guid>
      <description>Sort    Option meaning     -u 每行输出都唯一    sort是一个Unix命令，用来按顺序对文件中的数据进行排序。
命令输出 sort用来排序一列行。
输入一个文件 sort file.txt  排序另个命令的输出 你可以排序任何输出命令的输出。在下面的例子中，会排序一列符合条件的文件：
find * -name pattern | sort  输出唯一 如果想要输出的行保持唯一，可以使用-u选项。
输出目录中文件的所有者：
ls -l | awk &#39;{print $3}&#39; | sort -u  数字排序 假设我们有下面的文件：
$ cat file 10.Gryffindor 4.Hogwarts 2.Harry 3.Dumbledore 1.The sorting hat  想要按数字排序这些内容，使用-n选项：
sort -n file  这个命令会输出下面的内容：
1.The sorting hat 2.Harry 3.Dumbledore 4.Hogwarts 10.</description>
    </item>
    
    <item>
      <title>Git专业笔记（二十三）</title>
      <link>http://blog.huaifufeng.com/2019/02/post/git-section-23.html</link>
      <pubDate>Thu, 14 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>http://blog.huaifufeng.com/2019/02/post/git-section-23.html</guid>
      <description>Pull    Parameter Details     &amp;ndash;quiet 没有文本输出   -q —-quiet的短格式   &amp;ndash;verbose 详细文本输出。可以分别传给merge/rebase命令   -v —verbos的短格式   &amp;ndash;[no-]recurse-submodules[=yes|on-demand|no] 获取子模块的新提交？（注意这个不是pull/checkout）    不像push是把你本地的修改推到集中版本关联服务器，而是从代码仓库服务器获取服务器上当前的代码，并且把代码从远端服务器拉取到本地机器。本主题说明了使用Git从代码库中提取代码的过程，以及将不同代码提取到本地副本时可能遇到的情况。
获取修改到本地代码库 简单pull 当你和其他人在一个远端仓库（例如Github）协同工作时，某些时候你想和其他人分享你的修改。当他们已经把自己的修改推送到这个仓库时，你可以使用pull命令从这个仓库获取这些修改。
git pull  在大多数的情况下，这都会正常工作的。
从不同的远端或分支获取 你可以通过指定远端或分支的名字来从远端仓库获取这些修改：
git pull origin feature-A  将会从origin拉取分支feature-A的修改到本地分支。注意你可以直接使用远端url来代替远端名称，使用提交的SHA来代替分支名称。
手动pull 你可以使用git fetch和git merge模拟pull命令的行为：
git fetch origin # retrieve objects and update refs from origin git merge origin/feature-A # actually perform the merge  这给与你更多的控制器，允许你在合并分支之前检查分支的内容。实际上，在fetch代码之后，你可以使用git branch -a命令来查看远端的分支，然后切换到这个分支：</description>
    </item>
    
    <item>
      <title>访问本地服务</title>
      <link>http://blog.huaifufeng.com/2019/02/post/localhost.html</link>
      <pubDate>Thu, 14 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>http://blog.huaifufeng.com/2019/02/post/localhost.html</guid>
      <description>本地访问 我们在访问本地服务的时候，有的时候使用的是localhost，有的时候用的是127.0.0.1。这在大多数的情况下都是可以互换的，可以使用一种方法换另一种方法。但是在某些情况下localhost可以访问，但是127.0.0.1不可以访问。这说明两者还是有不同存在的。
127.0.0.1 这个地址一般是分配给loopback接口的，这是一种特殊的接口，用于本机应用的相互通信。只要本机的网络组件正常，这个接口就可以使用。实际上整个127.*的网段都是可以使用的，只不过127.0.0.1是默认的设置而已。ping 127.0.0.2也是可以访问的。
因为数据的传输通过网卡，所以受到网络防火墙和网卡设置的限制。这个在访问的过程中就涉及到网络用户权限的问题。
localhost localhost是一个域名，默认指向127.0.0.1。现在支持IPv6，同时也指向[::1]。
可以设置localhost指向的ip地址，一般是在操作系统的hosts文件中进行配置。在这个配置文件中，可以把不同的ip地址设置到localhost上面。
因为localhost的访问不走网卡，所以不收网络防火墙和网卡的限制。
访问这个地址也是使用本地用户权限去访问的。
其他 所以访问本地程序时，使用localhost比较好，不占用网卡和网络资源。</description>
    </item>
    
    <item>
      <title>Bash专业笔记(十七)</title>
      <link>http://blog.huaifufeng.com/2019/02/post/bash-section-17.html</link>
      <pubDate>Wed, 13 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>http://blog.huaifufeng.com/2019/02/post/bash-section-17.html</guid>
      <description>Find find是一个用于在目录中递归搜索与条件匹配的文件（或目录）的命令，然后对所选文件执行某些操作。
find search_path selection_criteria action  按照文件名或扩展名搜索文件 使用指定的文件名在pwd指向的本地目录内搜索文件或目录：
$ find . -name &amp;quot;myFile.txt&amp;quot; ./myFile.txt  使用通配符查找有指定扩展名的文件或目录：
$ find . -name &amp;quot;*.txt&amp;quot; ./myFile.txt ./myFile2.txt  想要搜索包含多个扩展的文件或目录，使用or选项：
$ find . -name &amp;quot;*.txt&amp;quot; -o -name &amp;quot;*.sh&amp;quot;  想要搜索以abc开头，后面跟着一个字符，之后跟着一个数字使用下面的模式：
$ find . -name &amp;quot;abc[a-z][0-9]&amp;quot;  获取指定目录下所有的文件：
$ find /opt  只显示目录下面的文件，使用-type f：
$ find /opt -type f  只显示目录下面的目录，使用-type d:
$ find /opt -type d  对找到的文件执行命令 有时候我们需要在一批文件上面运行命令。这里就可以使用xargs命令。
find . -type d -print | xargs -r chmod 770  上面的命令将会在.</description>
    </item>
    
    <item>
      <title>Git专业笔记（二十二）</title>
      <link>http://blog.huaifufeng.com/2019/02/post/git-section-22.html</link>
      <pubDate>Wed, 13 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>http://blog.huaifufeng.com/2019/02/post/git-section-22.html</guid>
      <description>工作流的类型 集中工作流 使用这种基础工作流程，master分支包含所有进行中的开发分支。在继续开发前，贡献者需要特别确定他们能够获取最新的修改，因为这个分支会迅速变化。每个可以访问这个仓库的人都可以把提交修改到master分支上面。
这种模型的图形展示：
这是经典的版本控制范例，旧的版本管理系统Subversion和CVS就是基于这种模型。以这种方式工作的软件成为集中版本控制系统或者CVCS。虽然Git可以以这种方式工作，但是存在的名下的缺点，例如在每次拉取之前都要进行合并操作。团队可以按这种方式工作，但不断的合并解决冲突最终会占用大量的宝贵时间。
这就是为什么Linus Torvalds创建Git不是按照CVCS模式，而是DVCS（分布式版本控制系统），类似于Mercurial。这种模式的优点是本章其他示例展示的灵活性。
Gitflow工作流 最初由Vincent Driessen提出的，Gitflow是使用Git和几个预定义的分支的开发流程。这可以看做是特性分支工作流的一种特例。
这种想法是为开发中的特定部分保留在单独的分支上面：
 master分支一直包含最新的生产代码，实验性代码不能包含到这个分支上面。 develop包含所有最新的开发内容。这些最新的修改可以包含基本所有的内容，但是大的特性应该包含在自己的分支内。这里的代码在发布/部署之前要合并到release分支上面。 hotfix分支代表一些小的bug修复功能，这些修复功能等不到代码发布了。hotfix从master分支上切出来，并且要合并到master和develop分支上面。 release分支用来把最新的开发从develop分支发布到master分支上。任何最后一分钟的修改（像版本号冲突）都在release分支修改，然后合并到master和develop分支上。部署新版本时，master应标记当前版本号（例如，使用语义版本），以供将来参考和轻松回滚。 feature分支包含大的特性的修改。这些修改都在专门的分支中进行，开发结束之后合并到develop分支。专门的feature分支可以把开发工作分库，对于每个特性可以单独部署。  这种模型的图形展示：
这种模型的原始展现形式是：
特性分支工作流 特性分支工作流的核心思想是把所有的特性放到不同的分支中进行开发，而不是统统放到master分支。这种封装使得多个开发人员可以在不干扰主代码库的情况下轻松地完成特定功能的开发。这还意味着主分支永远不会包含损坏的代码，对于持续集成环境来说是一个巨大的优势。
封装特性开发可以利用pull request的优势，这也是围绕分支讨论的一种方法。这给了其他开发者在特性合并到主线之前进行确认的机会。或者，你可以在一个特性分支的开发中，你可以打开一个pull request来请求同时的建议。最关键的是，pull request使您的团队非常容易对彼此的工作进行评论。
基于Atlassian Tutorials。
Github工作流 这在很多开源项目中是很有名的，但不仅仅这样。特定位置的master分支（Github,Gitlab,BitBucket,本地服务器）包含最新的可发布版本。
对于每个新特性/错误修复/体系结构更改，每个开发人员都创建一个分支。所有的修改都在这个分支上进行，并且可以在pull request或code review中进行讨论。一旦这些修改都被接受了，可以合并到master主分支。
Scott Chacon提供的全部流程：
 master分支上的任何信息都是可以发布的 要处理新的功能，请从master创建一个描述性命名的分支（即：new-oauth2-scopes） 在本地提交该分支，并定期将您的工作推送到服务器上的同一个命名分支 当您需要反馈或帮助时，或者您认为分支已准备好进行合并时，请建立一个pull request。 在其他人查看并且接受了这个分支之后，你就可以把这个分支合并到master了。 一旦这个分支被合并到master并且push到远端的master分支，你应该立即把这个master分支发布。  Scott Chacon私人站点表述的原始流程：
图片由Github Flow reference提供。
Fork工作流 这种工作流和其他提到的工作流有着根本的不同。每个人都有一个他/她自己从主库fork的新库，而不是所有人使用一个集中主库。这样做的好处是开发人员可以将修改发布到自己的存储库而不是共享存储库，维护人员可以在适当的时候将其他人存储库中的更改集成到原始存储库中。
下面是这种工作流的一种图形展示：
参考：Git® Notes for Professionals book</description>
    </item>
    
    <item>
      <title>Bash专业笔记(十六)</title>
      <link>http://blog.huaifufeng.com/2019/02/post/bash-section-16.html</link>
      <pubDate>Tue, 12 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>http://blog.huaifufeng.com/2019/02/post/bash-section-16.html</guid>
      <description>复制    Option Description     -a,-archive 和选项d，p，r一起使用   -b,-backup 在删除之前，建立一个备份   -d,&amp;ndash;no-deference 保存连接   -f,&amp;ndash;force 在不提醒用户的情况下删除目标地址存在的文件   -i,&amp;ndash;interactive 在覆盖前进行提示   -l,&amp;ndash;link 不复制文件，而是使用文件连接   -p,&amp;ndash;preserve 尽可能保留文件的属性   -R,&amp;ndash;recursive 递归复制目录的文件    复制一个文件 把文件foo.txt从/path/to/source/复制到/path/to/target/folder/。
cp /path/to/source/foo.txt /path/to/target/folder/  把文件foo.txt从/path/to/source/复制到/path/to/target/folder/，并且修改文件名称为bar.txt。
cp /path/to/source/foo.txt /path/to/target/folder/bar.txt  复制目录 把目录foo复制到目录bar里面：
cp -r /path/to/foo /path/to/bar  如果目录bar在执行命令之前存在，目录foo和它的内容将会被复制到目录bar中。但是如果执行命令之前bar目录不存在的话，会创建目录bar，并且把目录foo的内容存放到bar中。
参考：Bash Notes for Professionals book</description>
    </item>
    
    <item>
      <title>Git专业笔记（二十一）</title>
      <link>http://blog.huaifufeng.com/2019/02/post/git-section-21.html</link>
      <pubDate>Tue, 12 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>http://blog.huaifufeng.com/2019/02/post/git-section-21.html</guid>
      <description>.mailmap文件 按别名合并贡献者以在短日志中显示提交计数 当贡献者从不同的机器或操作系统添加到一个项目中时，他们可能会为此使用不同的电子邮件或名称，这将分割贡献者列表和统计信息。
git shortlog -sn命令可以获取贡献者的列表和他们各自的提交数量，具体的结果像下面这样：
Patrick Rothfuss 871 Elizabeth Moon 762 E. Moon 184 Rothfuss, Patrick 90  可以通过提供包含电子邮件映射的纯文本文件.mailmap来调整此碎片/解除关联。
一行中列出的所有名称和电子邮件地址将分别与第一个命名实体关联。
像上面的例子，一个map邮件像下面这样：
Patrick Rothfuss &amp;lt;fussy@kingkiller.com&amp;gt; Rothfuss, Patrick &amp;lt;fussy@kingkiller.com&amp;gt; Elizabeth Moon &amp;lt;emoon@marines.mil&amp;gt; E. Moon &amp;lt;emoon@scifi.org&amp;gt;  如果这个文件在项目的根目录，运行git shortlog -sn命令将会返回缩减之后的结果：
Patrick Rothfuss 961 Elizabeth Moon 946  参考：Git® Notes for Professionals book</description>
    </item>
    
    <item>
      <title>Bash专业笔记(十五)</title>
      <link>http://blog.huaifufeng.com/2019/02/post/bash-section-15.html</link>
      <pubDate>Mon, 11 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>http://blog.huaifufeng.com/2019/02/post/bash-section-15.html</guid>
      <description>bash参数扩展 $字符引入了参数扩展、命令替换或算术扩展。要扩展的参数名称或符号可以用大括号括起来，大括号是可选的，但可以将变量从紧跟在其后面的字符扩展中选取出来，不然这些字符可以被解释为名称的一部分。
查看更多。
修改字母字符的大小写 Version&amp;gt;=4.0
修改为大写字母：
$ v=&amp;quot;hello&amp;quot; # Just the first character $ printf &#39;%s\n&#39; &amp;quot;${v^}&amp;quot; Hello # All characters $ printf &#39;%s\n&#39; &amp;quot;${v^^}&amp;quot; HELLO # Alternative $ v=&amp;quot;hello world&amp;quot; $ declare -u string=&amp;quot;$v&amp;quot; $ echo &amp;quot;$string&amp;quot; HELLO WORLD  转换字符为小写：
$ v=&amp;quot;BYE&amp;quot; # Just the first character $ printf &#39;%s\n&#39; &amp;quot;${v,}&amp;quot; bYE # All characters $ printf &#39;%s\n&#39; &amp;quot;${v,,}&amp;quot; bye # Alternative $ v=&amp;quot;HELLO WORLD&amp;quot; $ declare -l string=&amp;quot;$v&amp;quot; $ echo &amp;quot;$string&amp;quot; hello world  大写修改为小写，小写修改为大写：</description>
    </item>
    
    <item>
      <title>Git专业笔记（二十）</title>
      <link>http://blog.huaifufeng.com/2019/02/post/git-section-20.html</link>
      <pubDate>Mon, 11 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>http://blog.huaifufeng.com/2019/02/post/git-section-20.html</guid>
      <description>.gitattributes文件 自动行结束符标准化 在项目的更目录创建.gitattributes文件，里面添加下面的内容：
* text=auto  这将导致所有文本文件（由Git标识的）使用LF提交，但根据操作系统的不同默认检出合适的格式。
这等价于core.autocrlf配置项使用下面的配置：
 Linux/macOS里面是input Windows里面是true  识别二进制文件 Git非常擅长识别二进制文件，但是你可以指明哪些文件时二进制的。在项目的根目录创建.gitattributes文件，并添加下面的配置：
*.png binary  binary是内建的宏命令，等价于-diff -merge -text。
.gitattributes模板 如果你确定你的.gitattributes文件是否少了某些规则，或者你只是想给你的项目添加一个通用的配置，你可以在下面的地址中选择或生成一个.gitattributes文件：
 https://gitattributes.io/ https://github.com/alexkaratarakis/gitattributes  进制行结束符标准化 在项目的根目录创建.gitattributes文件，并在里面添加：
* -text  这个配置等价于下面的配置core.autocrlf = false。
参考：Git® Notes for Professionals book</description>
    </item>
    
    <item>
      <title>Bash专业笔记(十四)</title>
      <link>http://blog.huaifufeng.com/2019/02/post/bash-section-14.html</link>
      <pubDate>Sun, 10 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>http://blog.huaifufeng.com/2019/02/post/bash-section-14.html</guid>
      <description>函数 带参数函数 在helloJohn.sh文件里面有下面的代码：
#!/bin/bash greet() { local name=&amp;quot;$1&amp;quot; echo &amp;quot;Hello, $name&amp;quot; } greet &amp;quot;John Doe&amp;quot;  执行这个文件：
$ bash helloJohn.sh Hello, John Doe   如果你没有修改参数，可以不用把这个参数放到本地变量中，可以直接使用`echo &amp;ldquo;Hello, $1&amp;rdquo;
 你可以在函数中使用$1，$2，$3等等的变量访问函数的参数。
   注意：对于超过9个的参数，使用$10是没有用的，因为这将被解析成为$10，所以你需要使用${10}、${11}这样的变量。
  在函数中，$@引用所有的参数：
#!/bin/bash foo() { echo &amp;quot;$@&amp;quot; } foo 1 2 3 # output =&amp;gt; 1 2 3    注意：你应该像这里展示的一样，在$@周围使用双引号。
 省略引号将导致shell扩展通配符（即使用户为避免这种情况而专门引用通配符），并且通常会引入不受欢迎的行为，甚至潜在的安全问题。
 foo &amp;quot;string with spaces;&amp;quot; &#39;$HOME&#39; &amp;quot;*&amp;quot; # output =&amp;gt; string with spaces; $HOME *   想要使用默认值的话，用${1:-default_val}的格式：</description>
    </item>
    
    <item>
      <title>Git专业笔记（十九）</title>
      <link>http://blog.huaifufeng.com/2019/02/post/git-section-19.html</link>
      <pubDate>Sun, 10 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>http://blog.huaifufeng.com/2019/02/post/git-section-19.html</guid>
      <description>Git清理    Parameter Details     -d 除了未追踪的文件外，删除未追踪的文件夹。如果未追踪的文件夹由不同的Git仓库管理，默认是不删除的。如果你一定要删除，使用两次-f选项。   -f,&amp;ndash;force 如果Git的配置clean. requireForce配置为false，Git将不会删除任何文件或目录，除了提供-f，-n或-i选项。除非给出第二个-f，否则Git将拒绝删除有.git子目录的目录或文件。   -i,&amp;ndash;interactive 交互式操作删除每个文件   -n,&amp;ndash;dry-run 只显示将要被删除的文件列表，而不实际删除这些内容   -q,&amp;ndash;quiet 只显示删除出错的文件，不显示成功的文件    交互式清理 git clean -i  打印出将要被清理的文件，使用下面的命令进行确认：
Would remove the following items: folder/file1.py folder/file2.py *** Commands *** 1: clean 2: filter by pattern 3: select by numbers 4: ask each 5: quit 6: help What now&amp;gt;  交互式选项-i可以和其他的选项-X，-d一起添加。</description>
    </item>
    
    <item>
      <title>Bash专业笔记(十三)</title>
      <link>http://blog.huaifufeng.com/2019/02/post/bash-section-13.html</link>
      <pubDate>Sat, 09 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>http://blog.huaifufeng.com/2019/02/post/bash-section-13.html</guid>
      <description>关联数组 操作关联数组 以下代码段显示了所有需要的用法：
#!/usr/bin/env bash declare -A assoc_array=([key_string]=value \ [one]=&amp;quot;something&amp;quot; \ [two]=&amp;quot;another thing&amp;quot; \ [ three ]=&#39;mind the blanks!&#39; \ [ &amp;quot; four&amp;quot; ]=&#39;count the blanks of this key later!&#39; \ [IMPORTANT]=&#39;SPACES DO ADD UP!!!&#39; \ [1]=&#39;there are no integers!&#39; \ [info]=&amp;quot;to avoid history expansion &amp;quot; \ [info2]=&amp;quot;quote exclamation mark with single quotes&amp;quot; \ ) echo # just a blank line echo now here are the values of assoc_array: echo ${assoc_array[@]} echo not that useful, echo # just a blank line echo this is better: declare -p assoc_array # -p == print echo have a close look at the spaces above\!</description>
    </item>
    
    <item>
      <title>Git专业笔记（十八）</title>
      <link>http://blog.huaifufeng.com/2019/02/post/git-section-18.html</link>
      <pubDate>Sat, 09 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>http://blog.huaifufeng.com/2019/02/post/git-section-18.html</guid>
      <description>恢复 恢复reset操作 使用Git，你总是（几乎）可以把时钟倒转。
不要害怕尝试重写历史的命令。Git默认不会删除你90天内的提交，在此期间你可以使用reflog轻松的恢复这些修改：
$ git reset @~3 # go back 3 commits $ git reflog c4f708b HEAD@{0}: reset: moving to @~3 2c52489 HEAD@{1}: commit: more changes 4a5246d HEAD@{2}: commit: make important changes e8571e4 HEAD@{3}: commit: make some changes ... earlier commits ... $ git reset 2c52489 ... and you&#39;re back where you started  *注意像--hard和—force这样的选项：他们会丢弃修改
*另外，避免在协助的分支上面修改提交历史。
恢复stash 获取你在执行git stash命令之后你最新的暂存修改，使用下面命令：
git stash apply  查看你暂存的信息列表：
git stash list  你可以获取像下面这样的修改：</description>
    </item>
    
    <item>
      <title>Bash专业笔记(十二)</title>
      <link>http://blog.huaifufeng.com/2019/02/post/bash-section-12.html</link>
      <pubDate>Fri, 08 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>http://blog.huaifufeng.com/2019/02/post/bash-section-12.html</guid>
      <description>数组 数组赋值 列表赋值 如果你熟悉Perl，C或者Java的话，你可能会认为Bash使用逗号来分隔数组的元素，然而不是这样的，Bash使用空格来分隔元素：
# Perl中的数组 my @array = (1, 2, 3, 4); #Bash中的数组 array=(1 2 3 4)  使用新元素创建数组：
array=(&#39;first element&#39; &#39;second element&#39; &#39;third element&#39;)  下标赋值 使用明确的元素索引创建一个数组：
array=([3]=&#39;fourth element&#39; [4]=&#39;fifth element&#39;)  索引赋值 array[0]=&#39;first element&#39; array[1]=&#39;second element&#39;  关联数组 Version&amp;gt;= 4.0
decalare -A array array[first]=&#39;First element&#39; array[second]=&#39;Second elemet&#39;  动态赋值 从其他命令的输出结果创建一个数组，例如使用seq获取1到10的值：
array=(`seq 1 10`)  从脚本的输入参数赋值给数组：
array=(&amp;quot;$@&amp;quot;)  使用循环赋值：
while read -r; do #array+=(&amp;quot;$REPLY&amp;quot;) #数组追加 array[$i]=&amp;quot;$REPLY&amp;quot; #索引赋值 let i++ #索引增加 done &amp;lt; &amp;lt;(seq 1 10) #?</description>
    </item>
    
    <item>
      <title>Git专业笔记（十七）</title>
      <link>http://blog.huaifufeng.com/2019/02/post/git-section-17.html</link>
      <pubDate>Fri, 08 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>http://blog.huaifufeng.com/2019/02/post/git-section-17.html</guid>
      <description>随意选取    Parameter Details     -e,&amp;ndash;edit 选择这个选项，使用git cherry-pick命令允许你在提交信息之前编辑提交信息   -x 记录提交时，在原始提交消息中附加一行（cherry picked from commit&amp;hellip;），以指示从哪个提交中挑选出这个更改。这个只适用于没有冲突的选取。   &amp;ndash;ff 如果当前的HEAD和cherry的提交的父提交同级，将会执行此提交的快进。   &amp;ndash;continue 使用.git/sequencer里面的信息继续进行当前的操作。可以在解决失败的挑选或恢复中的冲突后继续使用   &amp;ndash;quit 忘记当前的操作。在选取或恢复失败后，可以用来清除sequencer的信息   &amp;ndash;abort 取消当前操作，恢复之前的状态    一个随意选取获取提交中引入的补丁，并尝试在您当前所在的分支上重新应用它。
Source：Git SCM Book
从一个分支复制提交到另一个分支 git cherry-pick &amp;lt;commit-hash&amp;gt;会应用另一个分支上的已经存在的提交修改，将会记录一个新的修改。实际上，你可以把提交从分支复制到另一个分支。
已经有下面的提交树(source)：
dd2e86 - 946992 - 9143a9 - a6fd86 - 5a6057 [master] \ 76cada - 62ecb3 - b886a0 [feature]  我们想把b886a0这个分支的修改复制到master上（5a6057之上）：
我们使用下面的命令：
 git checkout master git cherry-pick b886a0  下面我们的提交树就变成下面这样：</description>
    </item>
    
    <item>
      <title>Bash专业笔记(十一)</title>
      <link>http://blog.huaifufeng.com/2019/02/post/bash-section-11.html</link>
      <pubDate>Thu, 07 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>http://blog.huaifufeng.com/2019/02/post/bash-section-11.html</guid>
      <description>true，false和：命令 无限循环 while true; do echo ok done  或者
while :; do echo ok done  或者
until false; do echo ok done  函数返回 function positive() { return 0 } function negative() { return 1 }  一直或从不执行的代码 if true; then echo Always executed fi if false; then echo Never executed fi  参考：Bash Notes for Professionals book</description>
    </item>
    
    <item>
      <title>Git专业笔记（十六）</title>
      <link>http://blog.huaifufeng.com/2019/02/post/git-section-16.html</link>
      <pubDate>Thu, 07 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>http://blog.huaifufeng.com/2019/02/post/git-section-16.html</guid>
      <description>压缩 不使用rebase压缩提交 如果你想把之前的x个提交压缩到一个提交，你可以使用下面的命令：
$ git reset --soft HEAD~x $ git commit  这里，你可以替换x为你想要压缩到一个提交的多个提交的数量。
请记住这将会创建一个新的提交，基本上会丢掉之前x个提交包含的提交人，提交信息和提交日期。你可能需要首先复制粘贴现有的提交消息。
merge时压缩提交 你可以使用git merge —squash命令把这个分支的修改压缩到一个提交。并不是实际的提交被创建了。
 git merge --squash &amp;lt;branch&amp;gt; git commit  这或多或少相当于使用git reset命令，但当合并更改具有符号名时更方便。比较：
git checkout &amp;lt;branch&amp;gt; git reset --soft $(git merge-base master &amp;lt;branch&amp;gt;) git commit  rebase时压缩提交 在git rebase命令执行的时候可以压缩多个提交。建议您在尝试以这种方式压缩提交之前了解rebase命令。
 确定要从哪个提交中rebase，并注意其提交的hash值。
 执行git rebase -i [commit hash]
  或者，你可以使用HEAD~4来代替提交的hash值，来查看最新的提交和最新之前4个提交
 在运行这个命令打开的编辑器中，选择哪些提交你想要合并。替换这些行之前的pick为squash来吧这些提交压缩的签名的提交中。
 在选择了压缩的提交之后，你需要编辑提交的信息
  查看提交并且决定哪些提交要rebase:
&amp;gt; git log --oneline 612f2f7 This commit should not be squashed d84b05d This commit should be squashed ac60234 Yet another commit 36d15de Rebase from here 17692d1 Did some more stuff e647334 Another Commit 2e30df6 Initial commit &amp;gt; git rebase -i 36d15de  这时你选择的编辑器就会打开，在这里你可以描述你想要这些提交做什么。Git在注释中提供了帮助信息。如果你退出了这个编辑器，什么都不会发生，因为每个提交都会保持和之前一样的顺序。在这个例子中，我们应用下面的命令：</description>
    </item>
    
    <item>
      <title>Bash专业笔记(十)</title>
      <link>http://blog.huaifufeng.com/2019/02/post/bash-section-10.html</link>
      <pubDate>Wed, 06 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>http://blog.huaifufeng.com/2019/02/post/bash-section-10.html</guid>
      <description>控制结构    Parameter to [ or test Details     File Operators Details   -e &amp;ldquo;$file&amp;rdquo; 如果文件存在，返回true   -d &amp;ldquo;$file&amp;rdquo; 如果文件存在并且是一个目录的话，返回true   -f &amp;ldquo;$file&amp;rdquo; 如果文件存在并且是一个普通文件的话，返回true   -h &amp;ldquo;$file&amp;rdquo; 如果文件存在并且是一个符号链接的话，返回true   String Comparators Details   -z &amp;ldquo;$str&amp;rdquo; 字符串长度为0时为true   -n &amp;ldquo;$str&amp;rdquo; 字符串长度不为0时为true   &amp;rdquo;$str&amp;rdquo; = &amp;ldquo;$str2&amp;rdquo; 如果字符串$str等于字符串$str2。对整数是不合适的，虽然可以工作，但是结果可能不符合预期。   &amp;rdquo;$str&amp;rdquo; != &amp;ldquo;$str2&amp;rdquo; 如果字符串$str不等于$str2时返回true   Integer Comparators Details   &amp;rdquo;$int1&amp;rdquo; -eq &amp;ldquo;$int2&amp;rdquo; 如果整数相等返回true   &amp;rdquo;$int1&amp;rdquo; -ne &amp;ldquo;$int2&amp;rdquo; 如果整数不相等返回true   &amp;rdquo;$int1&amp;rdquo; -gt &amp;ldquo;$int2&amp;rdquo; 如果整数$int1大于$int2返回true   &amp;rdquo;$int1&amp;rdquo; -ge &amp;ldquo;$int2&amp;rdquo; 如果整数$int1大于等于$int2返回true   &amp;rdquo;$int1&amp;rdquo; -lt &amp;ldquo;$int2&amp;rdquo; 如果整数$int1小于$int2返回true   &amp;rdquo;$int1&amp;rdquo; -le &amp;ldquo;$int2&amp;rdquo; 如果整数$int1小于等于$int2返回true    命令列表的条件执行 如何使用命令列表的条件执行 任何内建的命令、表达式或函数，以及外部的命令或脚本都可以使用&amp;amp;&amp;amp;或||运算符有条件的执行。</description>
    </item>
    
    <item>
      <title>Git专业笔记（十五）</title>
      <link>http://blog.huaifufeng.com/2019/02/post/git-section-15.html</link>
      <pubDate>Wed, 06 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>http://blog.huaifufeng.com/2019/02/post/git-section-15.html</guid>
      <description>Rev-List    Parameter Detals     &amp;ndash;online 将提交显示为带有标题的单行。    列出在master不在远端master提交 git rev-list --oneline master ^origin/master  git rev-list命令会列出在一个分支不在另一个分支的提交。当您试图弄清楚代码是否已合并到分支中时，它是一个很好的工具。
 使用--oneline选项显示每个提交的标题 ^操作符会在列表中过滤指定的分支 如果需要，可以传递两个以上的分支。git rev-list foo bar ^baz将会列出foo和bar的提交，不包括baz。  参考：Git® Notes for Professionals book</description>
    </item>
    
    <item>
      <title>Bash专业笔记(九)</title>
      <link>http://blog.huaifufeng.com/2019/02/post/bash-section-9.html</link>
      <pubDate>Tue, 05 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>http://blog.huaifufeng.com/2019/02/post/bash-section-9.html</guid>
      <description>重定向    Parameter Details     内部文件标识 整形   重定向 &amp;gt;或&amp;lt;或&amp;lt;&amp;gt;   外部文件标识或路径 文件标识或路径后面加&amp;amp;    重定向标准输出 &amp;gt;重定向当前命令的标准输出（STDOUT）到一个文件或者另外的描述符。
下面的例子会把ls命令的标准输出，输出到一个文件file.txt：
$ ls &amp;gt;file.txt $ &amp;gt; file.txt ls  如果目标文件不存在的话，就会创建这个文件，否则就会重置这个文件。
默认的文件标识符是标准输出，或者没有提供的话就是1。下面的命令和之前的一样，只是指定了标准输出：
$ ls 1&amp;gt;file.txt  注意：重定向是执行的shell初始化的，而不是由执行的命令初始化的，因此在命令执行前，初始化工作就已经完成了。
追加 Vs 重置 重置 &amp;gt;  文件不存在创建指定文件 重置（删除文件内容） 向文件写入内容
$ echo &amp;quot;first line&amp;quot; &amp;gt; /tmp/lines $ echo &amp;quot;second line&amp;quot; &amp;gt; /tmp/lines $ cat /tmp/lines second line   追加 &amp;gt;&amp;gt;  不存在创建文件 追加文件（向文件末尾写入内容）</description>
    </item>
    
    <item>
      <title>Git专业笔记（十四）</title>
      <link>http://blog.huaifufeng.com/2019/02/post/git-section-14.html</link>
      <pubDate>Tue, 05 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>http://blog.huaifufeng.com/2019/02/post/git-section-14.html</guid>
      <description>分支    Parameter Detals     -d,&amp;ndash;delete 删除分支。这个分支必须合并到它的远端分支，如果设置了--track或--set-upstream的话，就需要在HEAD中   -D --delete --force强制删除的简称   -m,&amp;ndash;move 移动/重命名分支和相应的reflog   -M --move —force命令的简称   -r,&amp;ndash;remotes 列出或删除（使用-d）远端追踪的分支   -a,&amp;ndash;all 列出远端追踪分支和本地分支   &amp;ndash;list 激活列表模式。git branch &amp;lt;pattern&amp;gt;会试着新建分支。git branch -- list &amp;lt;pattern&amp;gt;列出所有匹配的分支   &amp;ndash;set-upstream 如果指定的分支不存在或者指定了--force参数，行为会和--track一样。否则在创建分支时设置像--track那样的配置，除了分支指向的地方没有改变    创建和切换新分支 创建一个新分支，并且保留在当前分支，执行下面的命令：
$ git branch &amp;lt;name&amp;gt;  通常，分支名称不得包含空格，并且符合列出的这里列出的其他规范。切换到已经存在的分支：
$ git checkout &amp;lt;name&amp;gt;  创建并且切换到新分支：
$ git checkout -b &amp;lt;name&amp;gt;  在指定索引创建一个分支，而不是在当前分支的最后提交（就是HEAD），可以使用下面任何一个命令：</description>
    </item>
    
    <item>
      <title>Bash专业笔记(八)</title>
      <link>http://blog.huaifufeng.com/2019/02/post/bash-section-8.html</link>
      <pubDate>Mon, 04 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>http://blog.huaifufeng.com/2019/02/post/bash-section-8.html</guid>
      <description>任务和进程 任务处理 创建任务 要创建一个任务，可以在命令后面添加&amp;amp;符号：
$ sleep 10 &amp;amp; [1] 20024  你也可以创建一个运行任务进程，可以按下Ctrl+z：
前后台进程 想要把一个后台进程获取到前台执行，可以使用fg命令加上%和进程数：
$ sleep 10 &amp;amp; [1] 20024 $ fg %1 sleep 10  现在你可以控制流程，想要把进程放回到后台运行的话，使用bg命令。因为终端的缓存，你需要使用Ctrl+z来终端进行。
$ sleep 10 ^Z [1]+ Stopped sleep 10 $ bg %1 [1]+ sleep 10 &amp;amp;  因为程序员的&amp;rdquo;惰性&amp;rdquo;，当只有一个进程或者想要处理列表中第一个进程，可以只适使用一个%。
$ sleep 10 &amp;amp; [1] 20024 $ fg % # to bring a process to foreground &#39;fg %&#39; is also working. sleep 10  或者：</description>
    </item>
    
    <item>
      <title>Git专业笔记（十三）</title>
      <link>http://blog.huaifufeng.com/2019/02/post/git-section-13.html</link>
      <pubDate>Mon, 04 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>http://blog.huaifufeng.com/2019/02/post/git-section-13.html</guid>
      <description>配置    Parameter Detals     &amp;ndash;system 编辑为每个人使用的系统配置（在linux上，配置文件在$(prefix)/etc/gitconfig）   &amp;ndash;global 修改为你的每个仓库使用的全局配置文件（在linux上，配置文件在~/.gitconfig）   &amp;ndash;local 编辑指定仓库的配置文件，在你仓库的.git/config这个文件内，这个是默认的配置    配置编辑器 有多个方式来配置你commit和rebase的时候使用的编辑器：
 修改core.editor配置项：
$ git config --global core.editor nano  设置GIT_EDITOR环境变量：
  举个例子，应用到一个命令：
 $ GIT_EDITOR=nano git commit  或者为终端执行的所有git命令。注意：直到你关闭了终端，这个配置才会生效：
 $ export GIT_EDITOR=nano   想要修改终端所有程序的编辑器，不仅仅是git，可以VISUAL或EDITOR环境变量（可以查看VISUAL vs EDITOR）:
$ export EDITOR=nano   注意：像上面一样，这个命令只会应用到当前的终端页面。你的shell通常会有一个配置文件，允许你永远的设置你的配置。（比如在bash时，可以添加上面的配置到~/.bashrc获取~/.bash_profile配置文件）。
一些文本编辑器（主要是GUI编辑器）一次只运行一个实例，如果你已经打开了一个实例，通常会退出。如果您的文本编辑器就是这种情况，Git将打印Aborting commit due to empty commit message。不允许你先编辑你的提交信息。如果你遇到了这种情况，检查你的编辑器文档是否有--wait这个配置项。允许你在文档关闭之前终端提交。
自动纠正错别字 $ git config --global help.</description>
    </item>
    
    <item>
      <title>Bash专业笔记(七)</title>
      <link>http://blog.huaifufeng.com/2019/02/post/bash-section-7.html</link>
      <pubDate>Sun, 03 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>http://blog.huaifufeng.com/2019/02/post/bash-section-7.html</guid>
      <description>别名 shell的别名是一种创建新命令或者在已有命令添加自己代码的方式。这和shell的函数有重叠的地方，但是shell函数更加通用，最好优先使用。
绕过别名 有时候你想临时绕过一个别名，而不是让别名不能使用了。下面就是一个例子：
alias ls=&#39;ls --color=auto&#39;  如果我们想要使用ls命令而不是ls别名，有下面几种方法：
 使用内建的command命令：command ls 使用命令的完整路径：/bin/ls 在命令名的任何地方添加一个\：\ls或l\s 把命令引用起来：&amp;rdquo;ls&amp;rdquo;或&amp;rsquo;ls&amp;rsquo;  创建别名 alias word=&#39;command&#39;  使用word就是运行命令command。任何追加到别名后面的参数就会添加到命令后面：
 alias myAlias=&#39;some command --with --options&#39; myAlias foo bar baz  上面的别名将会执行下面的命令：
some command --with --options foo bar baz  想要在一行中执行多个命令，可以使用&amp;amp;&amp;amp;连接多个命令字符串。李润：
alias print_things=&#39;echo &amp;quot;foo&amp;quot; &amp;amp;&amp;amp; echo &amp;quot;bar&amp;quot; &amp;amp;&amp;amp; echo &amp;quot;baz&amp;quot;&#39;  删除别名 删除别名使用下面的命令：
unalias {alias_name}  例如：
# create an alias $ alias now=&#39;date&#39; # preview the alias $ now Thu Jul 21 17:11:25 CEST 2016 # remove the alias $ unalias now # test if removed $ now -bash: now: command not found  BASH_ALIASES 别名是一些命令的快捷方式，可以在交互式bash实例中定义和使用。这些别名被保存在一个名字文件BASH_ALIASES的关联数组文件。想要在脚本中使用这些别名的话，必须在交互式的shell中：</description>
    </item>
    
    <item>
      <title>Git专业笔记（十二）</title>
      <link>http://blog.huaifufeng.com/2019/02/post/git-section-12.html</link>
      <pubDate>Sun, 03 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>http://blog.huaifufeng.com/2019/02/post/git-section-12.html</guid>
      <description>rebase    Parameter Detals     &amp;ndash;continue 在解决完merge冲突之后，重新开始执行rebase命令   &amp;ndash;abort 中断rebase操作之后，重新吧HEAD定位到原有分支上。如果在使用rebase命令的时候提供了分支名，HEAD将会被设置到这个分支上。否则HEAD将会重新设置到rebase操作开始的位置。   &amp;ndash;keep-empty 保留那些没有修改的提交   &amp;ndash;skip 重新开始rebase命令，忽略掉当前的补丁   -m,&amp;ndash;merge 在rebase的时候使用megre策略。当使用递归(默认)合并策略的话，这允许rebase知道上游的重命名。注意rebase合并的工作方式是从上游分支顶部的工作分支重放每个提交。因此，当合并冲突发生时，报告为我们的一方是迄今为止重新定位的系列，从上游开始，他们是工作分支。换句话说，双方交换。   &amp;ndash;stat 显示上次rebase之后，上游做的修改。这些不同将会有rebase.stat配置项控制   -x, &amp;ndash;exec command 执行交互式rebase，在每个提交和执行command之间暂停    本地分支rebase rebase在另外提交的顶部应用一系列的提交。rebase一个分支的话，首先切换到这个分支，然后rebase到另一个分支的顶部：
$ git checkout topic $ git rebase master  这会导致：
	A---B---C topic / D---E---F---G master  变成：
 A&#39;--B&#39;--C&#39; topic / D---E---F---G master  这些操作可以合并到一个简单命令上面：切换分支然后执行rebase命令</description>
    </item>
    
    <item>
      <title>Bash专业笔记(六)</title>
      <link>http://blog.huaifufeng.com/2019/02/post/bash-section-6.html</link>
      <pubDate>Sat, 02 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>http://blog.huaifufeng.com/2019/02/post/bash-section-6.html</guid>
      <description>grep 找bar文件中的foo字符：
$ grep foo ~/Desktop/bar  寻找bar文件中不包含foo字符的其他字符串：
$ grep –v foo ~/Desktop/bar  显示所有以foo结尾的字符串：
$ grep &amp;quot;*foo&amp;quot; ~/Desktop/bar  参考：Bash Notes for Professionals book</description>
    </item>
    
    <item>
      <title>Git专业笔记（十一）</title>
      <link>http://blog.huaifufeng.com/2019/02/post/git-section-11.html</link>
      <pubDate>Sat, 02 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>http://blog.huaifufeng.com/2019/02/post/git-section-11.html</guid>
      <description>别名 简单别名 有两种方法来创建Git别名：
 编辑~/.gitconfig文件：
[alias] ci = commit st = status co = checkout  使用命令行：
git config --global alias.ci &amp;quot;commit&amp;quot; git config --global alias.st &amp;quot;status&amp;quot; git config --global alias.co &amp;quot;checkout&amp;quot;   在别名创建之后：
 git ci就是git commit git st就是git status git co就是git checkout  像正常的命令一样，别名也可以使用参数，例如：
 git ci -m &amp;quot;Commit message...&amp;quot; git co -b feature-42  显示搜索别名 你可以使用--get-regexp选项来列出所有的别名：
$ git config --get-regexp &#39;^alias\.&#39;  搜索别名 想要搜索别名的话，在.gitconfig中添加下面的配置：
aliases = !</description>
    </item>
    
    <item>
      <title>Bash专业笔记(五)</title>
      <link>http://blog.huaifufeng.com/2019/02/post/bash-section-5.html</link>
      <pubDate>Fri, 01 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>http://blog.huaifufeng.com/2019/02/post/bash-section-5.html</guid>
      <description>cat    Option Description     -n 输出行号   -v 使用^和M-代替不能打印的字符，除了LFD和TAB   -T 使用^I代替TAB   -E 使用$代替换行符(LF)   -e 和-vE一个含义   -b 输出非空行行号，覆盖-n   -A 等价于-vET   -s 抑制重复输出空行    拼接文件 这是cat命令的主要作用：
$ cat file1 file2 file3 &amp;gt; file_all  cat命令也用来把拼接文件的结果作为管道的一部分：
$ cat file1 file2 file3 | grep foo  输出文件内容 $ cat file.txt  将会输出文件的所有内容。</description>
    </item>
    
    <item>
      <title>Git专业笔记（十）</title>
      <link>http://blog.huaifufeng.com/2019/02/post/git-section-10.html</link>
      <pubDate>Fri, 01 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>http://blog.huaifufeng.com/2019/02/post/git-section-10.html</guid>
      <description>提交    参数 详情     &amp;ndash;message, -m 包含在提交中的信息。这将会打开一个编辑器   &amp;ndash;amend 指定这个参数将会把当前暂存区的信息添加到之前的提交内。请注意，这将会修改之前的提交历史   &amp;ndash;no-edit 使用选择的提交信息但是不打开编辑器，例如：git commit --amend --no-edit追加提交到之前的提交上，并且不修改提交信息。   &amp;ndash;all, -a 提交包括未暂存的文件在内的修改   &amp;ndash;date 手动设置关联到这个提交的日期信息   &amp;ndash;only 只提交指定路径的信息。这将只会提交指定的文件   &amp;ndash;patch,-p 使用交互的补丁选择窗口来选择提交哪些修改   -S[keyid], -S &amp;ndash;gpg- sign[=keyid], -S &amp;ndash;no-gpg-sign Sign commit, GPG-sign commit, 取消 commit.gpgSign 配置变量   -n,&amp;ndash;no-verify 这个参数取消执行预提交和提交信息的钩子。详情看钩子    暂存提交修改 基础 在你修改了你的本地文件之后，在你准备提交这些修改之前，需要把文件暂存起来。
例如，如果你修改README.md和program.py这两文件：
$ git add README.</description>
    </item>
    
    <item>
      <title>Bash专业笔记(四)</title>
      <link>http://blog.huaifufeng.com/2019/01/post/bash-section-4.html</link>
      <pubDate>Thu, 31 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>http://blog.huaifufeng.com/2019/01/post/bash-section-4.html</guid>
      <description>文件列表    Option Description     -a, &amp;ndash;all 列出所有文件，包含.开头的文件   -A, &amp;ndash;almost-all 列出所有文件，处理.和..   -c 按修改时间排序文件   -d, &amp;ndash;directory 列出所有的目录   -h, &amp;ndash;human-readable 使用人可读的单位列出文件的大小（K, M等）   -H 和上面的参数一样，只是使用1000来代替1024   -l 显示文件的详细信息   -o 显示详细信息处理分组信息   -r, &amp;ndash;reverse 倒序显示文件内容   -s, &amp;ndash;size 显示文件的块大小   -S 以文件大小排序   &amp;ndash;sort=WORD 按照某个词排序（size，version，status等）。ps：mac没有这个选项   -t 按照修改时间排序   -u 按照访问时间排序   -v 按照版本排序   -1 每行返回一个文件    列出文件详情 ls命令的-l参数，打印文件长列表格式的详细信息。如果没有指定文件夹，默认列出当前文件夹的内容。</description>
    </item>
    
    <item>
      <title>Git专业笔记（九）</title>
      <link>http://blog.huaifufeng.com/2019/01/post/git-section-9.html</link>
      <pubDate>Thu, 31 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>http://blog.huaifufeng.com/2019/01/post/git-section-9.html</guid>
      <description>submodule clone一个有子模块的仓库 当你克隆了一个有子模块的仓库时，你需要初始化和更新他们：
$ git clone --recursive https://github.com/username/repo.git  这将会克隆关联的子模块，并且把子模块放到合适的位置上面（包括子模块关联的子模块）。这个命令等价于在仓库克隆之后立即执行git submodule update --init --recursive这个命令。
更新子模块 如果一个子模块引用了另一个仓库中的子模块的特定提交。想要切换到所有引用子模块的特定状态的话，可以使用下面的命令：
$ git submodule update --recursive  有时候为了替换引用子模块当前的状态，你想要把本地米宽的分支切换到远端的最新状态。使用下面的命令可以把所有引用的子模块切换到远端最新的分支：
$ git submodule foreach git pull &amp;lt;remote&amp;gt; &amp;lt;branch&amp;gt;  或者使用默认的git pull参数：
$ git submodule foreach git pull  注意：这将只会更新本地工作区副本。如果一个子模块用这个命令更新了，他将会出现在git status命令的文件列表内。如果你想要把你的引用更新到最新的状态，你可以提交这些修改：
 git add &amp;lt;submodule_directory&amp;gt; git commit  如果你使用git pull的话，这写修改可能会造成合并冲突。你可以使用git pull —rebase来把修改到会到最新。大多数情况下这会减少出现冲突的次数。这也会把所有的分支pull到本地：
$ git submodule foreach git pull --rebase  想要把某个分支切换到最新的状态，可以使用：
$ git submodule update --remote &amp;lt;submodule_directory&amp;gt;  添加子模块 你可以把另外的Git仓库当做你自己项目的一个文件夹，使用Git来追踪：</description>
    </item>
    
    <item>
      <title>Bash专业笔记(三)</title>
      <link>http://blog.huaifufeng.com/2019/01/post/bash-section-3.html</link>
      <pubDate>Wed, 30 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>http://blog.huaifufeng.com/2019/01/post/bash-section-3.html</guid>
      <description>导航目录 绝对目录和相对目录 想要切换到一个绝对路径的目录，可以使用/开头的完整目录名称：
$ cd /home/username/project/abc  如果你想到达的目录在这个目录的下级目录，可以使用一个相对路径。例如，你当前在/home/username/project目录，如果想要到这个目录的abc子目录：
$ cd abc  如果你想到当前目录的上级目录，可以使用..符号。比如，如果你当前在/home/username/project/abc这个目录，现在想要到/home/username/project这个目录，可以使用下面的命令：
$ cd ..  这也可以称作“向上”目录。
到之前目录 在当前的shell中，你可以到你之前在的目录，而不用管这个目录在哪：
$ cd -  如果多次执行这个目录，你将会在当前目录和之前的目录之间切换。
home目录 默认的目录是home目录（$HOME，特别是/home/username），所以当没有带目录参数的执行cd命令的时候，将会直接到home目录：
$ cd  或者你可以更加明确的执行：
$ cd $HOME  home目录的简单符合是~，所以也可以这样执行：
$ cd ~  脚本目录 通常，有两种bash脚本：
 在当前目录执行的系统工具。 相对于自己目录修改文件的项目工具。  对第二中脚本来说，到的脚本所在的目录是非常有用的。这可以使用下面的命令：
$ cd &amp;quot;$(dirname &amp;quot;$(readlink -f &amp;quot;$0&amp;quot;)&amp;quot;)&amp;quot;  这个命令运行了3个命令：
 readlink -f &amp;quot;$0&amp;quot;获取当前脚本的目录。 dirname获取脚本的目录。 cd修改当前的目录到dirname返回的目录。  参考：Bash Notes for Professionals book</description>
    </item>
    
    <item>
      <title>Bash专业笔记(二)</title>
      <link>http://blog.huaifufeng.com/2019/01/post/bash-section-2.html</link>
      <pubDate>Wed, 30 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>http://blog.huaifufeng.com/2019/01/post/bash-section-2.html</guid>
      <description>脚本shebang 环境shebang 想要使用bash命令执行一个脚本文件，可以使用可以执行的env来指定PATH环境变量中的bash命令。脚本文件的第一行需要是：带有bash参数的绝对路径的env可执行文件：
#!/usr/bin/env bash  只有在使用下面这样的方式执行脚本的时候，shebang里面的env命令才会被解析：
script.sh  当然，这个脚本必须有执行权限。
当直接指明bash解析器来执行脚本的时候，这个shebang是被忽略的：
bash script.sh  直接shebang 想要用bash来执行一个脚本，也可以定义一个可以执行的bash路径：
#!/bin/bash  当直接执行脚本的时候，shebang将会被解析并执行：
./script.sh  脚本需要可以执行的权限。
当bash解析器直接指明来执行这个脚本的时候，这个shebang不会被执行：
bash script.sh  其他的shebang 操作系统内核能识别的有两种程序：一种是用ELF (ExtenableLoadableFormat)头声明的二进制程序，通常是编译生成的；另一种就是各种的脚本。
如果一个文件的第一行以#!开头，下一个字符串必须是一个解析器的路径。如果操作系统内核读到了这行，会调用路径指向的解析器，然后把后面的字符都传给这个解析器作为参数。如果没有文件焦作something或者wrong：
#!/bin/bash something wrong echo &amp;quot;This line never gets printed&amp;quot;  bash执行的时候，参数something wrong是不存在的。脚本文件的名称也会被添加。下面看下直接声明echo命令的shebang：
#&amp;quot;/bin/echo something wrong # and now call this script named &amp;quot;thisscript&amp;quot; like so: # thisscript one two # the output will be: something wrong ./thisscript one two  一些想awk的程序就用这种技术来运行长时间留在硬盘上的脚本。</description>
    </item>
    
    <item>
      <title>Git专业笔记（八）</title>
      <link>http://blog.huaifufeng.com/2019/01/post/git-section-8.html</link>
      <pubDate>Wed, 30 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>http://blog.huaifufeng.com/2019/01/post/git-section-8.html</guid>
      <description>merge    parameter Details     -m 在merge提交里使用的信息   -v 显示详细的输出   &amp;ndash;abort 中断把文件恢复到之前的状态   &amp;ndash;ff-only 当一个merge提交被要求的话立即中断   &amp;ndash;no-ff 强制创建一个merge提交，即使它不是强制的   &amp;ndash;no-commit 假装merge失败了，允许去检查和调整这个结果   &amp;ndash;stat merge合并之后，展示状态的不同   -n/&amp;ndash;no-stat 不显示状态的不同   &amp;ndash;sqaush 允许对这个分支的merge修改做一个单独的提交    自动合并 当两个分支的提交不冲突的话，Git可以自动的合并他们：
~/Stack Overflow(branch:master) » git merge another_branch Auto-merging file_a Merge made by the &#39;recursive&#39; strategy. file_a | 2 +- 1 file changed, 1 insertion(+), 1 deletion(-)  找到没有merge提交的分支 有时候你有一些已经把修改merge到master上的分支。这将找出来所有不是master分支并且和master分支没有区别提交的分支。这用来查找在PR合并到master之后，没有删除的分支非常有帮助：</description>
    </item>
    
    <item>
      <title>Git专业笔记（七）</title>
      <link>http://blog.huaifufeng.com/2019/01/post/git-section-7.html</link>
      <pubDate>Tue, 29 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>http://blog.huaifufeng.com/2019/01/post/git-section-7.html</guid>
      <description>撤销修改 返回前一个提交 返回前一个提交，首先使用git log找到前一个提交的hash值。然后要临时返回那个提交的话，使用下面的命令：
$ git checkout 789abcd  这将返回hash值为789abcd的提交。现在你可以在不影响你的HEAD的情况下，在这个老提交的基础上建立新的提交。你可以使用branch或checkout -b命令来建立一个分支，然后把这些修改放到这个分支上面。
使用下面的命令返回上一个提交的话，会保留之前的修改：
$ git reset --soft 789abcd  去返回上一个提交，可以使用下面的命令：
$ git reset --soft HEAD~  想要抛弃某个提交之后的修改，可以使用下面的命令：
$ git reset --hard 789abcd  想要抛弃上一个提交之后的修改，使用下面的命令：
$ git reset --hard HEAD~  注意：你可以使用reflog和reset恢复丢弃的提交，但是没有提交的修改是无法恢复的。
撤销修改 撤消对工作副本中文件或目录的更改。
$ git checkout -- file.txt  下面的命令将会递归的应用到当前目录的所有文件和文件夹上面，他将撤销工作区副本的所有修改：
$ git checkout .  想要撤销部分修改的话，可以使用---patch选项。这样对每个修改，你都将被询问，是要撤销还是保留：
$ git checkout --patch -- dir  想要撤销添加到index的修改，使用下面的命令：
$ git reset --hard  如果没有—hard选项的话，这将会执行一个软reset命令。</description>
    </item>
    
    <item>
      <title>Bash专业笔记(一)</title>
      <link>http://blog.huaifufeng.com/2019/01/post/bash-section-1.html</link>
      <pubDate>Mon, 28 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>http://blog.huaifufeng.com/2019/01/post/bash-section-1.html</guid>
      <description>开始Bash Hello World 交互shell Bash shell通常是使用其交互模式：这允许你输入和修改命令，当你按下Return键的时候，就会执行这些命令。大多数基于Unix和类Unix的操作系统都会使用Bash作为它们默认的shell（特别是Linux和macOS）。当终端打开的时候会自动的进入交互模式的Bash shell。
使用下面的方式输出一个Hello World：
$ echo &amp;quot;Hello World&amp;quot; #&amp;gt; Hello World # Output Example  注意点：
 你可以在终端中通过修改shell的名称来修改shell。比如：sh，bash等等 echo是Bash内建的一个命令，会把它接收到的参数输出到标准输出中。默认它会在输出的后面输出一个新行。  非交互shell Bash shell也可以在脚本中被按照非交互模式运行，当shell不需要人工操作时。交互的行为和非交互的行为都是唯一的：Unix V7 Bourne shell和其他的衍生shell 的一项重要设计原则。因此，任何在命令行中可以执行的命令都可以放到脚本中重复使用。
下面的步骤创建了一个Hello World脚本：
 创建一个叫hello-world.sh的文件。
 $ touch hello-world.sh  为文件添加执行权限：chmod +x hello-world.sh
 添加下面的代码：
#!/bin/bash echo &amp;quot;Hello World&amp;quot;   第一行：脚本的第一行必须以字符串#!开始，这被叫做 shebang。这个shebang通知操作系统去允许/bin/bash，并且把文件的路径作为参数传递给这个命令。像：/bin/bash hello-world.sh
第二行：使用echo命令把Hello world输出到标准输出。
 在命令行中执行hello-world.sh这个脚本可以使用下面的人一个方式：
 ./hello-world.sh 最常用的方法，也是最推荐的方法。 /bin/bash hello-world.sh bash hello-world.sh 这里假设/bin在你的$PATH列表内 sh hello-world.sh   当真正在产品环境使用时，你要忽略掉.</description>
    </item>
    
    <item>
      <title>Git专业笔记（六）</title>
      <link>http://blog.huaifufeng.com/2019/01/post/git-section-6.html</link>
      <pubDate>Mon, 28 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>http://blog.huaifufeng.com/2019/01/post/git-section-6.html</guid>
      <description>git diff    parameter details     -p, -u, &amp;ndash;patch 生成补丁。   -s, &amp;ndash;no-patch 取消差异的输出。对于像git diff这样显示补丁的命令非常有用。或者用来取消—patch选项的效果。   &amp;ndash;raw 输出原生格式信息的文件差异信息。   &amp;ndash;diff-algorithm= 选择差异对比的算法。可选的算法有：myers，minimal，patience，histogram   &amp;ndash;summary 输出一个压缩的扩展头信息，包括（创建，重命名和模式修改等）   &amp;ndash;name-only 只展示修改文件的名称   &amp;ndash;name-status 展示已修改文件的名称和状态，常见的状态有：M 修改 A 添加 D 删除   &amp;ndash;check 如果修改出现了标记冲突和空白错误会发出警告。被视作空白错误的信息是由core.whitespace控制的。默认情况下，尾随空格（包括仅由空格组成的行）和空格字符（在行的初始缩进内紧跟制表符）被视为空格错误。如果出现问题就会以非0的退出码退出。不和--exit-code兼容。   &amp;ndash;full-index 当想产生补丁格式的输出时，取代最开始的几个字符，将会把完整的pre-和post-image二进制对象显示在索引行中。   &amp;ndash;binary 除了像--full-index外，还会输出一个可以用于git apply命令的二进制差异文件。   -a, &amp;ndash;text 把所有的文件视作文本。   &amp;ndash;color 设置颜色模式：如果要将diff设置为较小并保持git的颜色，请使用--color=always    展示工作区差异 $ git diff  这将展示当前分支未暂存的修改和之前的提交的差异。这只展示相对于索引的差异，也就是只展示你可以在下次提交的，但是还没有提交的修改。想要添加这些修改，可以使用git add。</description>
    </item>
    
    <item>
      <title>Git专业笔记（五）</title>
      <link>http://blog.huaifufeng.com/2019/01/post/git-section-5.html</link>
      <pubDate>Sun, 27 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>http://blog.huaifufeng.com/2019/01/post/git-section-5.html</guid>
      <description>忽略文件文件夹 这章的主题是介绍怎么避免把不想要的文件（或者文件的修改）添加到Git仓库内。有好几种方式可以实现这个目的：全局或者本地的.gitignore ，.git/exclude，git update-index --assume-unchanged，git update-index --skip-tree。但是请记住Git是用来管理内容的：忽略实际忽略的是文件夹的内容。一个空的文件夹将会被自动忽略，因为它不能不添加到仓库内。
.gitignore 你可以让Git通过添加一个或多个.gitignore文件来忽略某些文件或者文件夹，即不把这些内容通过Git来追踪。
在一些软件项目中，.gitignore文件会包含一列在构建程序或运行时产生的文件或文件夹。在.gitignore中，可能包含指向下面内容的名称或路径：
 临时资源，像缓存，log文件，编译文件等 不应该分享给其他人的配置文件 包含密码、秘钥、证书等隐秘信息的文件  当在顶层目录创建这个文件时，这些规则将会应用到这个仓库所有的文件和子目录。当在子目录创建时，这些规则只会应用到这个目录和这个目录子目录的文件中。
当一个文件或目录被忽略了，这代表：
 不会被Git库追踪。 不会再git status和git diff命令中输出处理。 不会通过git add -A命令暂存这些内容。  在一些特殊的场景下，你需要把已经追踪的文件忽略掉，这时你要特别小心。可以查看下面章节：忽略已提交内容。
例子： 下面是一些.gitignore中比较简单的例子，基于glob file patterns：
# Lines starting with `#` are comments. # Ignore files called &#39;file.ext&#39; file.ext # Comments can&#39;t be on the same line as rules! # The following line ignores files called &#39;file.ext # not a comment&#39; file.ext # not a comment # Ignoring files with full path.</description>
    </item>
    
    <item>
      <title>Git专业笔记（四）</title>
      <link>http://blog.huaifufeng.com/2019/01/post/git-section-4.html</link>
      <pubDate>Thu, 24 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>http://blog.huaifufeng.com/2019/01/post/git-section-4.html</guid>
      <description>暂存区 暂存所有文件 想要删除一个远端的分支：
$ git add -A  在Git 2.0+之后的版本
$ git add .  在版本2.x时，git add .命令将会添加当前目录及其子目录下的所有修改的文件。但是在1.x的版本，只会暂存新建或修改的文件，不会暂存删除的文件。
使用git add -A或者git add --all来存储所有修改的文件，不管在哪个版本都是有效的。
取消存储的修改文件 $ git reset &amp;lt;filePath&amp;gt;  添加大片修改 你可以看到大片的选项是怎么被存储的，通过使用patch选项：
$ git add -p  或者
$ git add --patch  这个命令将会打开一个交互界面，允许你查看修改，并且决定哪些内容去被存储起来：
Stage this hunk [y,n,q,a,d,/,s,e,?]?   y stage this hunk for the next commit n do not stage this hunk for the next commit q quit; do not stage this hunk or any of the remaining hunks a stage this hunk and all later hunks in the file d do not stage this hunk or any of the later hunks in the file g select a hunk to go to / search for a hunk matching the given regex j leave this hunk undecided, see next undecided hunk J leave this hunk undecided, see next hunk k leave this hunk undecided, see previous undecided hunk K leave this hunk undecided, see previous hunk s split the current hunk into smaller hunks e manually edit the current hunk ?</description>
    </item>
    
    <item>
      <title>Git专业笔记（三）</title>
      <link>http://blog.huaifufeng.com/2019/01/post/git-section-3.html</link>
      <pubDate>Mon, 21 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>http://blog.huaifufeng.com/2019/01/post/git-section-3.html</guid>
      <description>操作远端 删除远端分支 想要删除一个远端的分支：
$ git push [remote-name] --delete [branch-name]  或者
$ git push [remote-name] :[branch-name]  修改远端地址 查看已经存在的远端地址：
$ git remote -v # origin https://github.com/username/repo.git (fetch) # origin https://github.com/usernam/repo.git (push)  修改仓库的地址：
$ git remote set-url origin https://github.com/username/repo2.git # Change the &#39;origin&#39; remote&#39;s URL  查看验证新的远端地址：
$ git remote -v # origin https://github.com/username/repo2.git (fetch) # origin https://github.com/username/repo2.git (push)  远端列表 查看这个仓库关联的远端列表：
$ git remote  查看这个仓库关联的远端列表，包括这些远端的fetch和push的Url地址。
$ git remote --verbose  或者</description>
    </item>
    
    <item>
      <title>Git专业笔记（二）</title>
      <link>http://blog.huaifufeng.com/2019/01/post/git-section-2.html</link>
      <pubDate>Fri, 18 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>http://blog.huaifufeng.com/2019/01/post/git-section-2.html</guid>
      <description>查看历史    Parameter Explanation     -q, &amp;ndash;quiet Quiet, suppresses diff output   &amp;ndash;source Shows source of commit   &amp;ndash;use-mailmap Use mail map file (changes user info for committing user)   &amp;ndash;decorate[=&amp;hellip;] Decorate options   &amp;ndash;L &amp;lt; n,m:file&amp;gt; Show log for specific range of lines in a file, counting from 1. Starts from line n, goes to line m. Also shows diff.</description>
    </item>
    
    <item>
      <title>Git专业笔记（一）</title>
      <link>http://blog.huaifufeng.com/2019/01/post/git-section-1.html</link>
      <pubDate>Tue, 15 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>http://blog.huaifufeng.com/2019/01/post/git-section-1.html</guid>
      <description>开始学习Git 创建自己的项目，并添加、提交文件 首页在终端验证你是否已经安装有Git：
在所有的操作系统上，都可以使用下面的命令：
$ git --version  在类Unix系统还可以使用下面的命令：
$ which git  如果什么都没有返回，或者没有通过验证，这就表明你需要通过下载并运行安装程序，在你的系统上安装Git。查看Git官网，上面有特别详细和容易的安装教程。
安装完Git之后，在你真正的提交之前，还需要配置好你的名称和邮件地址。
一旦安装成功Git，你就可以到你希望进行版本管理的文件夹下，初始化一个空的Git仓库：
$ git init  这会创建一个隐藏的.git文件夹，用来存放Git工作需要的信息。
接下来检查下Git将把什么文件加入到仓库内，这是非常值得注意的，也是在添加、提交文件之前的必要操作：
$ git status  检查文件的列表，你可以告诉Git哪些文件你想进行版本的管理（避免将像密码这样的重要信息或者污染仓库的信息添加到Git仓库里面）：
$ git add &amp;lt;file/directory name #1&amp;gt; &amp;lt;file/directory name #2&amp;gt; &amp;lt; ... &amp;gt;  如果所有的文件你都想和能访问这个仓库的人分享，有一个简单的命令可以添加当前目录和当前目录子目录内的所有文件：
$ git add .  这将“暂存”所有的文件，等待将这些文件加入版本管理，准备在你的第一次提交中提交它们。
对于你不想添加到版本管理的文件，你可以在执行add之前命令创建一个名.gitignore的文件，并且填写里面的内容。
提交所有已经添加的文件，同时填写一个提交的注释信息：
$ git commit -m &amp;quot;Initial commit&amp;quot;  这使用提供的信息创建了一个新的提交。一个提交就像你整个项目的一个快照。现在你就可以把本地的文件push到远端的仓库内，如果有需要的时候，你可以重新返回这里。
如果你忽略了-m参数，你默认的编辑器将会打开，你可以在编辑器里面编辑并且保存提交信息。
添加远端仓库 想要添加一个新的远端仓库地址，你可以在你仓库所在的文件夹内，在终端内执行git remote add命令。
1. 一个远端的名称，比如```origin``` 2. 一个远端的URL地址，比如```https://&amp;lt;your-git-service-address&amp;gt;/user/repo.git``` ```shell $ git remote add origin https://&amp;lt;your-git-service-address&amp;gt;/owner/repository.</description>
    </item>
    
  </channel>
</rss>